{
    "name": "Pantheon Advanced Page Cache",
    "slug": "pantheon-advanced-page-cache",
    "version": "2.1.0",
    "author": "<a href=\"https://pantheon.io\">Pantheon</a>",
    "author_profile": "https://profiles.wordpress.org/getpantheon/",
    "contributors": {
        "getpantheon": {
            "profile": "https://profiles.wordpress.org/getpantheon/",
            "avatar": "https://secure.gravatar.com/avatar/f49a8919fd068cbbb81b36643367070a?s=96&d=monsterid&r=g",
            "display_name": "Pantheon Systems"
        },
        "danielbachhuber": {
            "profile": "https://profiles.wordpress.org/danielbachhuber/",
            "avatar": "https://secure.gravatar.com/avatar/560b284fd021779ea4817470074133f1?s=96&d=monsterid&r=g",
            "display_name": "Daniel Bachhuber"
        },
        "kporras07": {
            "profile": "https://profiles.wordpress.org/kporras07/",
            "avatar": "https://secure.gravatar.com/avatar/f0669efc25f6a106d97e8cbe56e88864?s=96&d=monsterid&r=g",
            "display_name": "kporras07"
        },
        "jspellman": {
            "profile": "https://profiles.wordpress.org/jspellman/",
            "avatar": "https://secure.gravatar.com/avatar/f0a6a9ca58a5db894454f3f21bde2eff?s=96&d=monsterid&r=g",
            "display_name": "John Spellman"
        },
        "jazzs3quence": {
            "profile": "https://profiles.wordpress.org/jazzs3quence/",
            "avatar": "https://secure.gravatar.com/avatar/2e6c0a0ecb51c9d67263485a1713294d?s=96&d=monsterid&r=g",
            "display_name": "Chris Reynolds"
        },
        "ryanshoover": {
            "profile": "https://profiles.wordpress.org/ryanshoover/",
            "avatar": "https://secure.gravatar.com/avatar/5f22675cc71a388c7e003cadfb313535?s=96&d=monsterid&r=g",
            "display_name": "ryanshoover"
        },
        "rwagner00": {
            "profile": "https://profiles.wordpress.org/rwagner00/",
            "avatar": "https://secure.gravatar.com/avatar/3abd6047a5dc4565b6d6a81202085761?s=96&d=monsterid&r=g",
            "display_name": "rwagner00"
        },
        "pwtyler": {
            "profile": "https://profiles.wordpress.org/pwtyler/",
            "avatar": "https://secure.gravatar.com/avatar/6ed3c3f6fbbbe9bb72dc544fae6b3974?s=96&d=monsterid&r=g",
            "display_name": "pwtyler"
        }
    },
    "requires": "6.4",
    "tested": "6.6.1",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 1,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/pantheon-advanced-page-cache/",
    "support_threads": 1,
    "support_threads_resolved": 0,
    "active_installs": 10000,
    "downloaded": 789615,
    "last_updated": "2024-08-08 15:11:00",
    "added": "2016-11-09",
    "homepage": "https://wordpress.org/plugins/pantheon-advanced-page-cache/",
    "sections": {
        "description": "<p><a href=\"https://circleci.com/gh/pantheon-systems/pantheon-advanced-page-cache\" rel=\"nofollow ugc\"></a></p>\n<p>For sites wanting fine-grained control over how their responses are represented in their edge cache, Pantheon Advanced Page Cache is the golden ticket. Here&#8217;s a high-level overview of how the plugin works:</p>\n<ol>\n<li>When a response is generated, the plugin uses surrogate keys based on WordPress&#8217; main <code>WP_Query</code> object to &#8220;tag&#8221; the response with identifers for the data used in the response. See the &#8220;Adding Custom Keys&#8221; section for including your own surrogate keys.</li>\n<li>When WordPress data is modified, the plugin triggers a purge request for the data&#8217;s corresponding surrogate keys.</li>\n</ol>\n<p>Because of its surrogate key technology, Pantheon Advanced Page Cache empowers WordPress sites with a significantly more accurate cache purge mechanism, and generally higher cache hit rate. It even works with the WordPress REST API.</p>\n<p>Go forth and make awesome! And, once you&#8217;ve built something great, <a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/issues\" rel=\"nofollow ugc\">send us feature requests (or bug reports)</a>.</p>\n<h3>How It Works</h3>\n<p>Pantheon Advanced Page Cache makes heavy use of surrogate keys, which enable responses to be &#8220;tagged&#8221; with identifiers that can then later be used in purge requests. For instance, a home page response might include the <code>Surrogate-Key</code> header with these keys:</p>\n<pre><code>Surrogate-Key: front home post-43 user-4 post-41 post-9 post-7 post-1 user-1\n</code></pre>\n<p>Similarly, a <code>GET</code> requests to <code>/wp-json/wp/v2/posts</code> might include the <code>Surrogate-Key</code> header with these keys:</p>\n<pre><code>Surrogate-Key: rest-post-collection rest-post-43 rest-post-43 rest-post-9 rest-post-7 rest-post-1\n</code></pre>\n<p>Because cached responses include metadata describing the data therein, surrogate keys enable more flexible purging behavior like:</p>\n<ul>\n<li>When a post is updated, clear the cache for the post&#8217;s URL, the homepage, any index view the post appears on, and any REST API endpoints the post is present in.</li>\n<li>When an author changes their name, clear the cache for the author&#8217;s archive and any post they&#8217;ve authored.</li>\n</ul>\n<p>There is a limit to the number of surrogate keys in a response, so we&#8217;ve optimized them based on a user&#8217;s expectation of a normal WordPress site. See the &#8220;Emitted Keys&#8221; section for full details on which keys are included, and the &#8220;Adding Custom Keys&#8221; section following for information on how to add your own.</p>\n<h4>Adding Custom Keys</h4>\n<p>By default, Pantheon Advanced Page Cache generates surrogate keys based on an interpretation of the main <code>WP_Query</code> query object. Because WordPress sends headers before the page is rendered, you need to use the <code>pantheon_wp_main_query_surrogate_keys</code> filter to include additional surrogate keys for any data present on the page.</p>\n<p>For example, to include surrogate keys for a sidebar rendered on the homepage, you can filter the keys using the <code>is_home()</code> template tag:</p>\n<pre><code>/**\n * Add surrogate key for the featured content sidebar rendered on the homepage.\n */\nadd_filter( 'pantheon_wp_main_query_surrogate_keys', function( $keys ){\n    if ( is_home() ) {\n        $keys[] = 'sidebar-home-featured';\n    }\n    return $keys;\n});\n</code></pre>\n<p>Then, when sidebars are updated, you can use the <code>pantheon_wp_clear_edge_keys()</code> helper function to emit a purge event specific to the surrogate key:</p>\n<pre><code>/**\n * Trigger a purge event for the featured content sidebar when widgets are updated.\n */\nadd_action( 'update_option_sidebars_widgets', function() {\n    pantheon_wp_clear_edge_keys( array( 'sidebar-home-featured' ) );\n});\n</code></pre>\n<p>Similarly, to include surrogate keys for posts queried on the homepage, you can pre-fetch the posts before the page is rendered:</p>\n<pre><code>/**\n * An example of pre-fetching a WP_Query to tag the\n * response with queried data. You'd use `papcx_wp_query()`\n * a second time within your template to use the data.\n */\nadd_filter( 'pantheon_wp_main_query_surrogate_keys', function( $keys ) {\n    if ( is_home() ) {\n        $query = papcx_wp_query( array(\n            'post_type' =&gt; 'page',\n        ) );\n        foreach( $query-&gt;posts as $post ) {\n            $keys[] = 'post-' . $post-&gt;ID;\n        }\n    }\n    return $keys;\n});\n\n/**\n * Register a 'papc-non-persistent' cache group to cache data\n * in a non-persistent manner. We only want data in this group\n * to be cached within the page request.\n */\nadd_action( 'init', function(){\n    wp_cache_add_non_persistent_groups( array( 'papc-non-persistent' ) );\n});\n\n/**\n * Helper function to instantiate a WP_Query object only\n * once per page request.\n *\n * @param array $args Arguments to pass to WP_Query.\n * @return WP_Query\n */\nfunction papcx_wp_query( $args = array() ) {\n    $cache_key = md5( serialize( $args ) );\n    // WP_Query object will be in cache the second time we use the function.\n    $cache_value = wp_cache_get( $cache_key, 'papc-non-persistent' );\n    if ( false !== $cache_value ) {\n        return $cache_value;\n    }\n    $query = new WP_Query( $args );\n    wp_cache_set( $cache_key, $query, 'papc-non-persistent' );\n    return $query;\n}\n</code></pre>\n<p>Because Pantheon Advanced Page Cache already handles WordPress post purge events, there&#8217;s no additional call to <code>pantheon_wp_clear_edge_keys()</code>.</p>\n<p>Lastly, the <code>pantheon_wp_rest_api_surrogate_keys</code> filter lets you filter surrogate keys present in a REST API response.</p>\n<p>Need a bit more power? In addition to <code>pantheon_wp_clear_edge_keys()</code>, there are two additional helper functions you can use:</p>\n<ul>\n<li><code>pantheon_wp_clear_edge_paths( $paths = array() )</code> &#8211; Purge cache for one or more paths.</li>\n<li><code>pantheon_wp_clear_edge_all()</code> &#8211; Warning! With great power comes great responsibility. Purge the entire cache, but do so wisely.</li>\n</ul>\n<h4>Ignoring Specific Post Types</h4>\n<p>By default, Pantheon Advanced Page Cache is pretty aggressive in how it clears its surrogate keys. Specifically, any time <code>wp_insert_post</code> is called (which can include any time a post of any type is added or updated, even private post types), it will purge a variety of keys including <code>home</code>, <code>front</code>, <code>404</code> and <code>feed</code>. To bypass or override this behavior, since 1.5.0 we have a filter allowing an array of post types to ignore to be passed before those caches are purged. By default, the <code>revision</code> post type is ignored, but others can be added:</p>\n<pre><code>/**\n* Add a custom post type to the ignored post types.\n*\n* @param array $ignored_post_types The array of ignored post types.\n* @return array\n*/\nfunction filter_ignored_posts( $ignored_post_types ) {\n    $ignored_post_types[] = 'my-post-type'; // Ignore my-post-type from cache purges.\n    return $ignored_post_types;\n}\n\nadd_filter( 'pantheon_purge_post_type_ignored', 'filter_ignored_posts' );\n</code></pre>\n<p>This will prevent the cache from being purged if the given post type is updated.</p>\n<h4>Setting the Cache Max Age with a filter</h4>\n<p>The cache max age setting is controlled by the <a href=\"https://docs.pantheon.io/guides/wordpress-configurations/wordpress-cache-plugin\" rel=\"nofollow ugc\">Pantheon Page Cache</a> admin page. As of 2.0.0, there are three cache age options by default — 1 week, 1 month, 1 year. Pantheon Advanced Page Cache automatically purges the cache of updated and related posts and pages, but you might want to override the cache max age value and set it programmatically. In this case, you can use the <code>pantheon_cache_default_max_age</code> filter added in <a href=\"https://docs.pantheon.io/guides/wordpress-configurations/wordpress-cache-plugin#override-the-default-max-age\" rel=\"nofollow ugc\">Pantheon MU plugin 1.4.0+</a>. For example:</p>\n<pre><code>add_filter( 'pantheon_cache_default_max_age', function() {\n    return 10 * DAY_IN_SECONDS;\n} );\n</code></pre>\n<p>When the cache max age is filtered in this way, the admin option is disabled and a notice is displayed.</p>\n<h4>Updating the cache max age based on nonces</h4>\n<p>Nonces created on the front-end, often used to secure forms and other data, have a lifetime, and if the cache max age is longer than the nonce lifetime, the nonce may expire before the cache does. To avoid this, you can use the <code>pantheon_cache_nonce_lifetime</code> action to set the <code>pantheon_cache_default_max_age</code> to less than the nonce lifetime. For example:</p>\n<pre><code>do_action( 'pantheon_cache_nonce_lifetime' );\n</code></pre>\n<p>It&#8217;s important to wrap your <code>do_action</code> in the appropriate conditionals to ensure that the action is only called when necessary and not filtering the cache max age in cases when it&#8217;s not necessary. This might mean only running on certain pages or in certain contexts in your code.</p>\n<h3>WP-CLI Commands</h3>\n<p>This plugin implements a variety of <a href=\"https://wp-cli.org\" rel=\"nofollow ugc\">WP-CLI</a> commands. All commands are grouped into the <code>wp pantheon cache</code> namespace.</p>\n<pre><code>$ wp help pantheon cache\n\nNAME\n\n  wp pantheon cache\n\nDESCRIPTION\n\n  Manage the Pantheon Advanced Page Cache.\n\nSYNOPSIS\n\n  wp pantheon cache &lt;command&gt;\n\nSUBCOMMANDS\n\n  purge-all       Purge the entire page cache.\n  purge-key       Purge one or more surrogate keys from cache.\n  purge-path      Purge one or more paths from cache.\n</code></pre>\n<p>Use <code>wp help pantheon cache &lt;command&gt;</code> to learn more about each command.</p>\n<h3>Debugging</h3>\n<p>By default, Pantheon&#8217;s infrastructure strips out the <code>Surrogate-Key</code> response header before responses are served to clients. The contents of this header can be viewed as <code>Surrogate-Key-Raw</code> by adding on a debugging header to the request.</p>\n<p>A direct way of inspecting headers is with <code>curl -I</code>. This command will make a request and show just the response headers. Adding <code>-H \"Pantheon-Debug:1\"</code> will result in <code>Surrogate-Key-Raw</code> being included in the response headers. The complete command looks like this:</p>\n<pre><code>curl -IH \"Pantheon-Debug:1\" https://scalewp.io/\n</code></pre>\n<p>Piping to <code>grep</code> will filter the output down to just the <code>Surrogate-Key-Raw</code> header:</p>\n<pre><code>curl -IH \"Pantheon-Debug:1\" https://scalewp.io/ | grep -i Surrogate-Key-Raw\n</code></pre>\n<p>Tada!</p>\n<h3>Emitted Keys and Purge Events</h3>\n<h4>Emitted Keys on Traditional Views</h4>\n<p><strong>Home <code>/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>home</code>, <code>front</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Single post <code>/2016/10/14/surrogate-keys/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>single</code>, <code>post-&lt;id&gt;</code>, <code>post-user-&lt;id&gt;</code>, <code>post-term-&lt;id&gt;</code> (all terms assigned to post)</li>\n</ul>\n<p><strong>Author archive <code>/author/pantheon/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>user-&lt;id&gt;</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Term archive <code>/tag/cdn/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>term-&lt;id&gt;</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Day archive <code>/2016/10/14/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Month archive <code>/2016/10/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Year archive <code>/2016/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Search <code>/?s=&lt;search&gt;</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>search</code>, either <code>search-results</code> or <code>search-no-results</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Not found (404)</strong></p>\n<ul>\n<li>Emits surrogate keys: <code>404</code></li>\n</ul>\n<h4>Emitted Keys on REST API Endpoints</h4>\n<p><strong>Posts</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/posts</code> emits surrogate keys: <code>rest-post-collection</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/posts/&lt;id&gt;</code> emits surrogate keys: <code>rest-post-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Pages</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/pages</code> emits surrogate keys: <code>rest-page-collection</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/pages/&lt;id&gt;</code> emits surrogate keys: <code>rest-post-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Categories</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/categories</code> emits surrogate keys: <code>rest-category-collection</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/categories/&lt;id&gt;</code> emits surrogate keys: <code>rest-term-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Tags</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/tags</code> emits surrogate keys: <code>rest-post_tag-collection</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/tags/&lt;id&gt;</code> emits surrogate keys: <code>rest-term-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Comments</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/comments</code> emits surrogate keys: <code>rest-comment-collection</code>, <code>rest-comment-post-&lt;post-id&gt;</code>, <code>rest-comment-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/comments/&lt;id&gt;</code> emits surrogate keys: <code>rest-comment-post-&lt;post-id&gt;</code>, <code>rest-comment-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Users</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/users</code> emits surrogate keys: <code>rest-user-collection</code>, <code>rest-user-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/users/&lt;id&gt;</code> emits surrogate keys: <code>rest-user-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Settings</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/settings</code> emits surrogate keys: <code>rest-setting-&lt;name&gt;</code></li>\n</ul>\n<h4>Purge Events</h4>\n<p>Different WordPress actions cause different surrogate keys to be purged, documented here.</p>\n<p><strong>wp_insert_post / transition_post_status / before_delete_post / delete_attachment</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>home</code>, <code>front</code>, <code>404</code>, <code>post-&lt;id&gt;</code>, <code>user-&lt;id&gt;</code>, <code>term-&lt;id&gt;</code>, <code>rest-&lt;type&gt;-collection</code>, <code>rest-comment-post-&lt;id&gt;</code></li>\n<li>Affected views: homepage, single post, any page with 404 header, any archive where post displays, author archive, term archive, REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_post_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>post-&lt;id&gt;</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li>Affected views: single post, REST API resource endpoint</li>\n</ul>\n<p><strong>created_term / edited_term / delete_term</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>term-&lt;id&gt;</code>, <code>post-term-&lt;id&gt;</code>, <code>rest-&lt;taxonomy&gt;-collection</code></li>\n<li>Affected views: term archive, any post where the term is assigned, REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_term_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>term-&lt;id&gt;</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li>Affected views: term archive, REST API resource endpoint</li>\n</ul>\n<p><strong>wp_insert_comment / transition_comment_status</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-comment-collection</code>, <code>rest-comment-&lt;id&gt;</code></li>\n<li>Affected views: REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_comment_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-comment-&lt;id&gt;</code></li>\n<li>Affected views: REST API resource endpoint</li>\n</ul>\n<p><strong>clean_user_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>user-&lt;id&gt;</code>, <code>rest-user-&lt;id&gt;</code></li>\n<li>Affected views: author archive, any post where the user is the author</li>\n</ul>\n<p><strong>updated_option</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-setting-&lt;name&gt;</code></li>\n<li>Affected views: REST API resource endpoint</li>\n</ul>\n<h3>Surrogate Keys for taxonomy terms</h3>\n<p>Setting surrogate keys for posts with large numbers of taxonomies (such as WooCommerce products with a large number of global attributes) can suffer from slower queries. Surrogate keys can be skipped for &#8216;product&#8217; post types&#8217; taxonomy terms (or any other criteria you see fit) with the following filter:</p>\n<pre><code>function custom_should_add_terms($should_add_terms, $wp_query) {\n    if ( $wp_query-&gt;is_singular( 'product' ) ) {\n        return false;\n    }\n    return $should_add_terms;\n}\nadd_filter('pantheon_should_add_terms', 'custom_should_add_terms', 10, 2);&lt;h3&gt;Other Filters&lt;/h3&gt;\n</code></pre>\n<h4>pantheon_apc_disable_admin_notices</h4>\n<p>Since 2.0.0, Pantheon Advanced Page Cache displays a number of admin notices about your current cache max age value. You can disable these notices with the <code>pantheon_apc_disable_admin_notices</code> filter.</p>\n<pre><code>add_filter( 'pantheon_apc_disable_admin_notices', '__return_true' );\n</code></pre>\n<p>Alternately, the function callback is passed into the <code>pantheon_apc_disable_admin_notices</code> filter, allowing you to specify precisely <em>which</em> notice to disable, for example:</p>\n<pre><code>add_filter( 'pantheon_apc_disable_admin_notices', function( $disable_notices, $callback ) {\n    if ( $callback === '\\\\Pantheon_Advanced_Page_Cache\\\\Admin_Interface\\\\admin_notice_maybe_recommend_higher_max_age' ) {\n        return true;\n    }\n    return $disable_notices;\n}, 10, 2 );\n</code></pre>\n<p>The above example would disable <em>only</em> the admin notice recommending a higher cache max age.</p>\n<h3>Plugin Integrations</h3>\n<p>Pantheon Advanced Page Cache integrates with WordPress plugins, including:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/wp-graphql/\" rel=\"ugc\">WPGraphQL</a></li>\n</ul>\n<h3>Contributing</h3>\n<p>See <a href=\"https://github.com/pantheon-systems/wp-saml-auth/blob/master/CONTRIBUTING.md\" rel=\"nofollow ugc\">CONTRIBUTING.md</a> for information on contributing.</p>\n",
        "installation": "<p>To install Pantheon Advanced Page Cache, follow these steps:</p>\n<ol>\n<li>Install the plugin from WordPress.org using the WordPress dashboard.</li>\n<li>Activate the plugin.</li>\n</ol>\n<p>To install Pantheon Advanced Page Cache in one line with WP-CLI:</p>\n<pre><code>wp plugin install pantheon-advanced-page-cache --activate\n</code></pre>\n",
        "changelog": "<h4>2.1.0 (8 August 2024)</h4>\n<ul>\n<li>Adds any callable functions hooked to the <code>pantheon_cache_default_max_age</code> filter to the message that displays in the WordPress admin when a cache max age filter is active. [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/292\" rel=\"nofollow ugc\">#292</a>] This gives some context to troubleshoot if the filter is active somewhere in the codebase. If an anonymous function is used, it is noted in the message that displays.</li>\n<li>Removes the hook to <code>nonce_life</code> and replaces it with a new action (<code>pantheon_cache_nonce_lifetime</code>, see <a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache?tab=readme-ov-file#updating-the-cache-max-age-based-on-nonces\" rel=\"nofollow ugc\">documentation</a>). [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/293\" rel=\"nofollow ugc\">#293</a>] This was erroneously overriding any admin settings and setting the default cache max age for some sites to always be 23 hours (the nonce lifetime minus 1 hour). This solution requires that developers add the <code>do_action</code> when they are creating nonces on the front-end, but allows the cache settings to work as designed in all other instances.</li>\n</ul>\n<h4>2.0.0 (28 May 2024)</h4>\n<ul>\n<li>Adds new admin alerts and Site Health tests about default cache max age settings and recommendations [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/268\" rel=\"nofollow ugc\">#268</a>, <a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/271\" rel=\"nofollow ugc\">#271</a>]. The default Pantheon GCDN cache max age value has been updated to 1 week in the <a href=\"https://github.com/pantheon-systems/pantheon-mu-plugin\" rel=\"nofollow ugc\">Pantheon MU plugin</a>. For more information, see the <a href=\"https://docs.pantheon.io/release-notes/2024/04/pantheon-mu-plugin-1-4-0-update\" rel=\"nofollow ugc\">release note</a>.</li>\n<li>Updated UI in Pantheon Page Cache admin page when used in a Pantheon environment (with the Pantheon MU plugin). [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/272\" rel=\"nofollow ugc\">#272</a>] This UI change takes effect when <a href=\"https://docs.pantheon.io/release-notes/2024/05/pantheon-mu-plugin-1-4-3-update\" rel=\"nofollow ugc\">Pantheon MU plugin version 1.4.3</a> is available on your site.</li>\n<li>Automatically updates the cache max age to the recommended value (1 week) if it was saved at the old default value (600 seconds). [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/269\" rel=\"nofollow ugc\">#269</a>]</li>\n<li>Adds a hook into the <code>nonce_life</code> filter when nonces are created on the front-end to set the <code>pantheon_cache_default_max_age</code> to less than the nonce lifetime to avoid nonces expiring before the cache does. [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/282\" rel=\"nofollow ugc\">#282</a>] props <a href=\"https://profiles.wordpress.org/ryanshoover/\" rel=\"nofollow ugc\">@ryanshoover</a></li>\n</ul>\n<h4>1.5.0 (11 March 2024)</h4>\n<ul>\n<li>Adds filter <code>pantheon_purge_post_type_ignored</code> to allow an array of post types to ignore before purging cache [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/258\" rel=\"nofollow ugc\">#258</a>]</li>\n<li>Adds <a href=\"https://github.com/pantheon-systems/wpunit-helpers\" rel=\"nofollow ugc\">wpunit-helpers</a> for running/setting up WP Unit tests</li>\n</ul>\n<h4>1.4.2 (October 16, 2023)</h4>\n<ul>\n<li>Updates Pantheon WP Coding Standards to 2.0 [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/249\" rel=\"nofollow ugc\">#249</a>]</li>\n<li>Fixes an issue where a PHP warning was thrown when surrogate keys were emitted from archive pages with multiple post types. [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/252\" rel=\"nofollow ugc\">#252</a>]</li>\n</ul>\n<h4>1.4.1 (August 8, 2023)</h4>\n<ul>\n<li>Send the REST API response header to the result and not the REST server [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/237\" rel=\"nofollow ugc\">#237</a>]. Props <a href=\"https://github.com/srtfisher\" rel=\"nofollow ugc\">@srtfisher</a> &amp; <a href=\"https://github.com/felixarntz\" rel=\"nofollow ugc\">@felixarntz</a>.</li>\n</ul>\n<h4>1.4.0 (August 1, 2023)</h4>\n<ul>\n<li>Bumped Dependencies [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/236\" rel=\"nofollow ugc\">236</a>]</li>\n<li>Add filter <code>pantheon_should_add_terms</code> to allow disabling surrogate keys for posts&#8217; taxonomy terms [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/239\" rel=\"nofollow ugc\">239</a>]</li>\n</ul>\n<h4>1.3.0 (April 19, 2023)</h4>\n<ul>\n<li>Adds support for WordPress Multisite which resolves issue where editing a Post on one subsite clears the home page cache of other sites in the Multisite install if it has a Post containing the same ID [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/228\" rel=\"nofollow ugc\">#228</a>].</li>\n</ul>\n<h4>1.2.4 (April 13, 2023)</h4>\n<ul>\n<li>Adds surrogate key to post-type archive pages (e.g. &#8220;portfolio&#8221;) that&#8217;s specific to that archive(e.g. &#8220;portfolio-archive&#8221;), and clears that archive where appropriate [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/225\" rel=\"nofollow ugc\">#225</a>].</li>\n</ul>\n<h4>1.2.3 (April 5, 2023)</h4>\n<ul>\n<li>Bump tested up to version to 6.2</li>\n</ul>\n<h4>1.2.2 (March 14, 2023)</h4>\n<ul>\n<li>Adds PHP 8.2 compatibility [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/218\" rel=\"nofollow ugc\">#218</a>].</li>\n<li>Bump dependencies [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/204\" rel=\"nofollow ugc\">#204</a>].</li>\n</ul>\n<h4>1.2.1 (February 23, 2023)</h4>\n<ul>\n<li>Handle models that are not instances of the <code>WPGraphQL\\Model\\Model</code> class [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/212\" rel=\"nofollow ugc\">#212</a>].</li>\n<li>Make dependabot target develop branch [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/209\" rel=\"nofollow ugc\">#209</a>].</li>\n<li>Bump dependencies [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/210\" rel=\"nofollow ugc\">#210</a>] [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/214\" rel=\"nofollow ugc\">#214</a>].</li>\n</ul>\n<h4>1.2.0 (November 29, 2022)</h4>\n<ul>\n<li>Adds Github Actions for building tag and deploying to wp.org. Add CONTRIBUTING.md. [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/203\" rel=\"nofollow ugc\">#203</a>]</li>\n</ul>\n<h4>1.1.0 (November 1, 2022)</h4>\n<ul>\n<li>Hook into WPGraphQL to emit surrogate keys [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/199\" rel=\"nofollow ugc\">#199</a>].</li>\n<li>Add Plugin Integrations section to README</li>\n</ul>\n<h4>1.0.0 (March 2, 2020)</h4>\n<ul>\n<li>Plugin is stable.</li>\n</ul>\n<h4>0.3.1 (October 27th, 2019)</h4>\n<ul>\n<li>Fixes reversed argument order with use of <code>implode()</code> [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/139\" rel=\"nofollow ugc\">#139</a>].</li>\n<li>Various PHPCS cleanup [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/127\" rel=\"nofollow ugc\">#127</a>].</li>\n</ul>\n<h4>0.3.0 (November 27th, 2017)</h4>\n<ul>\n<li>Emits &#8216;404&#8217; surrogate key on 404s; purges when purging the homepage [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/107\" rel=\"nofollow ugc\">#107</a>].</li>\n<li>Adds more specific filters for modifying surrogate keys in different contexts [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/109\" rel=\"nofollow ugc\">#109</a>].</li>\n<li>Cleans up codebase according to WordPress Coding Standards [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/110\" rel=\"nofollow ugc\">#110</a>, <a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/116\" rel=\"nofollow ugc\">#116</a>].</li>\n</ul>\n<h4>0.2.1 (October 25th, 2017)</h4>\n<ul>\n<li>Ensures use of <code>?_embed</code> emits correct surrogate keys [<a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/pull/103\" rel=\"nofollow ugc\">#103</a>].</li>\n</ul>\n<h4>0.2.0 (August 10th, 2017)</h4>\n<ul>\n<li>Automatically trims large lists of surrogate keys that break Nginx and Varnish limits for header size.</li>\n</ul>\n<h4>0.1.5 (May 24th, 2017)</h4>\n<ul>\n<li>Disables emitting surrogate keys for the admin, unless explicitly added by filter.</li>\n</ul>\n<h4>0.1.4 (March 7th, 2017)</h4>\n<ul>\n<li>Emits <code>feed</code> surrogate key for RSS feeds, and purges when posts are created, modified, or deleted.</li>\n</ul>\n<h4>0.1.3 (March 1st, 2017)</h4>\n<ul>\n<li>Prevents error notices by only accessing <code>$rest_base</code> property of post types and taxonomies when set.</li>\n</ul>\n<h4>0.1.2 (December 6th, 2016)</h4>\n<ul>\n<li>Permits admins to flush cache for a specific page if the <code>delete_others_posts</code> capability has been deleted.</li>\n</ul>\n<h4>0.1.1 (November 30th, 2016)</h4>\n<ul>\n<li>Drops settings UI in favor of including it in Pantheon&#8217;s WordPress upstream.</li>\n</ul>\n<h4>0.1.0 (November 23rd, 2016)</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "Automatically clear related pages from Pantheon&#039;s Edge when you update content. High TTL. Fresh content. Visitors never wait.",
    "description": "<p><a href=\"https://circleci.com/gh/pantheon-systems/pantheon-advanced-page-cache\" rel=\"nofollow ugc\"></a></p>\n<p>For sites wanting fine-grained control over how their responses are represented in their edge cache, Pantheon Advanced Page Cache is the golden ticket. Here&#8217;s a high-level overview of how the plugin works:</p>\n<ol>\n<li>When a response is generated, the plugin uses surrogate keys based on WordPress&#8217; main <code>WP_Query</code> object to &#8220;tag&#8221; the response with identifers for the data used in the response. See the &#8220;Adding Custom Keys&#8221; section for including your own surrogate keys.</li>\n<li>When WordPress data is modified, the plugin triggers a purge request for the data&#8217;s corresponding surrogate keys.</li>\n</ol>\n<p>Because of its surrogate key technology, Pantheon Advanced Page Cache empowers WordPress sites with a significantly more accurate cache purge mechanism, and generally higher cache hit rate. It even works with the WordPress REST API.</p>\n<p>Go forth and make awesome! And, once you&#8217;ve built something great, <a href=\"https://github.com/pantheon-systems/pantheon-advanced-page-cache/issues\" rel=\"nofollow ugc\">send us feature requests (or bug reports)</a>.</p>\n<h3>How It Works</h3>\n<p>Pantheon Advanced Page Cache makes heavy use of surrogate keys, which enable responses to be &#8220;tagged&#8221; with identifiers that can then later be used in purge requests. For instance, a home page response might include the <code>Surrogate-Key</code> header with these keys:</p>\n<pre><code>Surrogate-Key: front home post-43 user-4 post-41 post-9 post-7 post-1 user-1\n</code></pre>\n<p>Similarly, a <code>GET</code> requests to <code>/wp-json/wp/v2/posts</code> might include the <code>Surrogate-Key</code> header with these keys:</p>\n<pre><code>Surrogate-Key: rest-post-collection rest-post-43 rest-post-43 rest-post-9 rest-post-7 rest-post-1\n</code></pre>\n<p>Because cached responses include metadata describing the data therein, surrogate keys enable more flexible purging behavior like:</p>\n<ul>\n<li>When a post is updated, clear the cache for the post&#8217;s URL, the homepage, any index view the post appears on, and any REST API endpoints the post is present in.</li>\n<li>When an author changes their name, clear the cache for the author&#8217;s archive and any post they&#8217;ve authored.</li>\n</ul>\n<p>There is a limit to the number of surrogate keys in a response, so we&#8217;ve optimized them based on a user&#8217;s expectation of a normal WordPress site. See the &#8220;Emitted Keys&#8221; section for full details on which keys are included, and the &#8220;Adding Custom Keys&#8221; section following for information on how to add your own.</p>\n<h4>Adding Custom Keys</h4>\n<p>By default, Pantheon Advanced Page Cache generates surrogate keys based on an interpretation of the main <code>WP_Query</code> query object. Because WordPress sends headers before the page is rendered, you need to use the <code>pantheon_wp_main_query_surrogate_keys</code> filter to include additional surrogate keys for any data present on the page.</p>\n<p>For example, to include surrogate keys for a sidebar rendered on the homepage, you can filter the keys using the <code>is_home()</code> template tag:</p>\n<pre><code>/**\n * Add surrogate key for the featured content sidebar rendered on the homepage.\n */\nadd_filter( 'pantheon_wp_main_query_surrogate_keys', function( $keys ){\n    if ( is_home() ) {\n        $keys[] = 'sidebar-home-featured';\n    }\n    return $keys;\n});\n</code></pre>\n<p>Then, when sidebars are updated, you can use the <code>pantheon_wp_clear_edge_keys()</code> helper function to emit a purge event specific to the surrogate key:</p>\n<pre><code>/**\n * Trigger a purge event for the featured content sidebar when widgets are updated.\n */\nadd_action( 'update_option_sidebars_widgets', function() {\n    pantheon_wp_clear_edge_keys( array( 'sidebar-home-featured' ) );\n});\n</code></pre>\n<p>Similarly, to include surrogate keys for posts queried on the homepage, you can pre-fetch the posts before the page is rendered:</p>\n<pre><code>/**\n * An example of pre-fetching a WP_Query to tag the\n * response with queried data. You'd use `papcx_wp_query()`\n * a second time within your template to use the data.\n */\nadd_filter( 'pantheon_wp_main_query_surrogate_keys', function( $keys ) {\n    if ( is_home() ) {\n        $query = papcx_wp_query( array(\n            'post_type' =&gt; 'page',\n        ) );\n        foreach( $query-&gt;posts as $post ) {\n            $keys[] = 'post-' . $post-&gt;ID;\n        }\n    }\n    return $keys;\n});\n\n/**\n * Register a 'papc-non-persistent' cache group to cache data\n * in a non-persistent manner. We only want data in this group\n * to be cached within the page request.\n */\nadd_action( 'init', function(){\n    wp_cache_add_non_persistent_groups( array( 'papc-non-persistent' ) );\n});\n\n/**\n * Helper function to instantiate a WP_Query object only\n * once per page request.\n *\n * @param array $args Arguments to pass to WP_Query.\n * @return WP_Query\n */\nfunction papcx_wp_query( $args = array() ) {\n    $cache_key = md5( serialize( $args ) );\n    // WP_Query object will be in cache the second time we use the function.\n    $cache_value = wp_cache_get( $cache_key, 'papc-non-persistent' );\n    if ( false !== $cache_value ) {\n        return $cache_value;\n    }\n    $query = new WP_Query( $args );\n    wp_cache_set( $cache_key, $query, 'papc-non-persistent' );\n    return $query;\n}\n</code></pre>\n<p>Because Pantheon Advanced Page Cache already handles WordPress post purge events, there&#8217;s no additional call to <code>pantheon_wp_clear_edge_keys()</code>.</p>\n<p>Lastly, the <code>pantheon_wp_rest_api_surrogate_keys</code> filter lets you filter surrogate keys present in a REST API response.</p>\n<p>Need a bit more power? In addition to <code>pantheon_wp_clear_edge_keys()</code>, there are two additional helper functions you can use:</p>\n<ul>\n<li><code>pantheon_wp_clear_edge_paths( $paths = array() )</code> &#8211; Purge cache for one or more paths.</li>\n<li><code>pantheon_wp_clear_edge_all()</code> &#8211; Warning! With great power comes great responsibility. Purge the entire cache, but do so wisely.</li>\n</ul>\n<h4>Ignoring Specific Post Types</h4>\n<p>By default, Pantheon Advanced Page Cache is pretty aggressive in how it clears its surrogate keys. Specifically, any time <code>wp_insert_post</code> is called (which can include any time a post of any type is added or updated, even private post types), it will purge a variety of keys including <code>home</code>, <code>front</code>, <code>404</code> and <code>feed</code>. To bypass or override this behavior, since 1.5.0 we have a filter allowing an array of post types to ignore to be passed before those caches are purged. By default, the <code>revision</code> post type is ignored, but others can be added:</p>\n<pre><code>/**\n* Add a custom post type to the ignored post types.\n*\n* @param array $ignored_post_types The array of ignored post types.\n* @return array\n*/\nfunction filter_ignored_posts( $ignored_post_types ) {\n    $ignored_post_types[] = 'my-post-type'; // Ignore my-post-type from cache purges.\n    return $ignored_post_types;\n}\n\nadd_filter( 'pantheon_purge_post_type_ignored', 'filter_ignored_posts' );\n</code></pre>\n<p>This will prevent the cache from being purged if the given post type is updated.</p>\n<h4>Setting the Cache Max Age with a filter</h4>\n<p>The cache max age setting is controlled by the <a href=\"https://docs.pantheon.io/guides/wordpress-configurations/wordpress-cache-plugin\" rel=\"nofollow ugc\">Pantheon Page Cache</a> admin page. As of 2.0.0, there are three cache age options by default — 1 week, 1 month, 1 year. Pantheon Advanced Page Cache automatically purges the cache of updated and related posts and pages, but you might want to override the cache max age value and set it programmatically. In this case, you can use the <code>pantheon_cache_default_max_age</code> filter added in <a href=\"https://docs.pantheon.io/guides/wordpress-configurations/wordpress-cache-plugin#override-the-default-max-age\" rel=\"nofollow ugc\">Pantheon MU plugin 1.4.0+</a>. For example:</p>\n<pre><code>add_filter( 'pantheon_cache_default_max_age', function() {\n    return 10 * DAY_IN_SECONDS;\n} );\n</code></pre>\n<p>When the cache max age is filtered in this way, the admin option is disabled and a notice is displayed.</p>\n<h4>Updating the cache max age based on nonces</h4>\n<p>Nonces created on the front-end, often used to secure forms and other data, have a lifetime, and if the cache max age is longer than the nonce lifetime, the nonce may expire before the cache does. To avoid this, you can use the <code>pantheon_cache_nonce_lifetime</code> action to set the <code>pantheon_cache_default_max_age</code> to less than the nonce lifetime. For example:</p>\n<pre><code>do_action( 'pantheon_cache_nonce_lifetime' );\n</code></pre>\n<p>It&#8217;s important to wrap your <code>do_action</code> in the appropriate conditionals to ensure that the action is only called when necessary and not filtering the cache max age in cases when it&#8217;s not necessary. This might mean only running on certain pages or in certain contexts in your code.</p>\n<h3>WP-CLI Commands</h3>\n<p>This plugin implements a variety of <a href=\"https://wp-cli.org\" rel=\"nofollow ugc\">WP-CLI</a> commands. All commands are grouped into the <code>wp pantheon cache</code> namespace.</p>\n<pre><code>$ wp help pantheon cache\n\nNAME\n\n  wp pantheon cache\n\nDESCRIPTION\n\n  Manage the Pantheon Advanced Page Cache.\n\nSYNOPSIS\n\n  wp pantheon cache &lt;command&gt;\n\nSUBCOMMANDS\n\n  purge-all       Purge the entire page cache.\n  purge-key       Purge one or more surrogate keys from cache.\n  purge-path      Purge one or more paths from cache.\n</code></pre>\n<p>Use <code>wp help pantheon cache &lt;command&gt;</code> to learn more about each command.</p>\n<h3>Debugging</h3>\n<p>By default, Pantheon&#8217;s infrastructure strips out the <code>Surrogate-Key</code> response header before responses are served to clients. The contents of this header can be viewed as <code>Surrogate-Key-Raw</code> by adding on a debugging header to the request.</p>\n<p>A direct way of inspecting headers is with <code>curl -I</code>. This command will make a request and show just the response headers. Adding <code>-H \"Pantheon-Debug:1\"</code> will result in <code>Surrogate-Key-Raw</code> being included in the response headers. The complete command looks like this:</p>\n<pre><code>curl -IH \"Pantheon-Debug:1\" https://scalewp.io/\n</code></pre>\n<p>Piping to <code>grep</code> will filter the output down to just the <code>Surrogate-Key-Raw</code> header:</p>\n<pre><code>curl -IH \"Pantheon-Debug:1\" https://scalewp.io/ | grep -i Surrogate-Key-Raw\n</code></pre>\n<p>Tada!</p>\n<h3>Emitted Keys and Purge Events</h3>\n<h4>Emitted Keys on Traditional Views</h4>\n<p><strong>Home <code>/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>home</code>, <code>front</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Single post <code>/2016/10/14/surrogate-keys/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>single</code>, <code>post-&lt;id&gt;</code>, <code>post-user-&lt;id&gt;</code>, <code>post-term-&lt;id&gt;</code> (all terms assigned to post)</li>\n</ul>\n<p><strong>Author archive <code>/author/pantheon/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>user-&lt;id&gt;</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Term archive <code>/tag/cdn/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>term-&lt;id&gt;</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Day archive <code>/2016/10/14/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Month archive <code>/2016/10/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Year archive <code>/2016/</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>archive</code>, <code>date</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Search <code>/?s=&lt;search&gt;</code></strong></p>\n<ul>\n<li>Emits surrogate keys: <code>search</code>, either <code>search-results</code> or <code>search-no-results</code>, <code>post-&lt;id&gt;</code> (all posts in main query)</li>\n</ul>\n<p><strong>Not found (404)</strong></p>\n<ul>\n<li>Emits surrogate keys: <code>404</code></li>\n</ul>\n<h4>Emitted Keys on REST API Endpoints</h4>\n<p><strong>Posts</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/posts</code> emits surrogate keys: <code>rest-post-collection</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/posts/&lt;id&gt;</code> emits surrogate keys: <code>rest-post-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Pages</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/pages</code> emits surrogate keys: <code>rest-page-collection</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/pages/&lt;id&gt;</code> emits surrogate keys: <code>rest-post-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Categories</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/categories</code> emits surrogate keys: <code>rest-category-collection</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/categories/&lt;id&gt;</code> emits surrogate keys: <code>rest-term-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Tags</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/tags</code> emits surrogate keys: <code>rest-post_tag-collection</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/tags/&lt;id&gt;</code> emits surrogate keys: <code>rest-term-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Comments</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/comments</code> emits surrogate keys: <code>rest-comment-collection</code>, <code>rest-comment-post-&lt;post-id&gt;</code>, <code>rest-comment-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/comments/&lt;id&gt;</code> emits surrogate keys: <code>rest-comment-post-&lt;post-id&gt;</code>, <code>rest-comment-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Users</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/users</code> emits surrogate keys: <code>rest-user-collection</code>, <code>rest-user-&lt;id&gt;</code></li>\n<li><code>/wp-json/wp/v2/users/&lt;id&gt;</code> emits surrogate keys: <code>rest-user-&lt;id&gt;</code></li>\n</ul>\n<p><strong>Settings</strong></p>\n<ul>\n<li><code>/wp-json/wp/v2/settings</code> emits surrogate keys: <code>rest-setting-&lt;name&gt;</code></li>\n</ul>\n<h4>Purge Events</h4>\n<p>Different WordPress actions cause different surrogate keys to be purged, documented here.</p>\n<p><strong>wp_insert_post / transition_post_status / before_delete_post / delete_attachment</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>home</code>, <code>front</code>, <code>404</code>, <code>post-&lt;id&gt;</code>, <code>user-&lt;id&gt;</code>, <code>term-&lt;id&gt;</code>, <code>rest-&lt;type&gt;-collection</code>, <code>rest-comment-post-&lt;id&gt;</code></li>\n<li>Affected views: homepage, single post, any page with 404 header, any archive where post displays, author archive, term archive, REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_post_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>post-&lt;id&gt;</code>, <code>rest-post-&lt;id&gt;</code></li>\n<li>Affected views: single post, REST API resource endpoint</li>\n</ul>\n<p><strong>created_term / edited_term / delete_term</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>term-&lt;id&gt;</code>, <code>post-term-&lt;id&gt;</code>, <code>rest-&lt;taxonomy&gt;-collection</code></li>\n<li>Affected views: term archive, any post where the term is assigned, REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_term_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>term-&lt;id&gt;</code>, <code>rest-term-&lt;id&gt;</code></li>\n<li>Affected views: term archive, REST API resource endpoint</li>\n</ul>\n<p><strong>wp_insert_comment / transition_comment_status</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-comment-collection</code>, <code>rest-comment-&lt;id&gt;</code></li>\n<li>Affected views: REST API collection and resource endpoints</li>\n</ul>\n<p><strong>clean_comment_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-comment-&lt;id&gt;</code></li>\n<li>Affected views: REST API resource endpoint</li>\n</ul>\n<p><strong>clean_user_cache</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>user-&lt;id&gt;</code>, <code>rest-user-&lt;id&gt;</code></li>\n<li>Affected views: author archive, any post where the user is the author</li>\n</ul>\n<p><strong>updated_option</strong></p>\n<ul>\n<li>Purges surrogate keys: <code>rest-setting-&lt;name&gt;</code></li>\n<li>Affected views: REST API resource endpoint</li>\n</ul>\n<h3>Surrogate Keys for taxonomy terms</h3>\n<p>Setting surrogate keys for posts with large numbers of taxonomies (such as WooCommerce products with a large number of global attributes) can suffer from slower queries. Surrogate keys can be skipped for &#8216;product&#8217; post types&#8217; taxonomy terms (or any other criteria you see fit) with the following filter:</p>\n<pre><code>function custom_should_add_terms($should_add_terms, $wp_query) {\n    if ( $wp_query-&gt;is_singular( 'product' ) ) {\n        return false;\n    }\n    return $should_add_terms;\n}\nadd_filter('pantheon_should_add_terms', 'custom_should_add_terms', 10, 2);&lt;h3&gt;Other Filters&lt;/h3&gt;\n</code></pre>\n<h4>pantheon_apc_disable_admin_notices</h4>\n<p>Since 2.0.0, Pantheon Advanced Page Cache displays a number of admin notices about your current cache max age value. You can disable these notices with the <code>pantheon_apc_disable_admin_notices</code> filter.</p>\n<pre><code>add_filter( 'pantheon_apc_disable_admin_notices', '__return_true' );\n</code></pre>\n<p>Alternately, the function callback is passed into the <code>pantheon_apc_disable_admin_notices</code> filter, allowing you to specify precisely <em>which</em> notice to disable, for example:</p>\n<pre><code>add_filter( 'pantheon_apc_disable_admin_notices', function( $disable_notices, $callback ) {\n    if ( $callback === '\\\\Pantheon_Advanced_Page_Cache\\\\Admin_Interface\\\\admin_notice_maybe_recommend_higher_max_age' ) {\n        return true;\n    }\n    return $disable_notices;\n}, 10, 2 );\n</code></pre>\n<p>The above example would disable <em>only</em> the admin notice recommending a higher cache max age.</p>\n<h3>Plugin Integrations</h3>\n<p>Pantheon Advanced Page Cache integrates with WordPress plugins, including:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/wp-graphql/\" rel=\"ugc\">WPGraphQL</a></li>\n</ul>\n<h3>Contributing</h3>\n<p>See <a href=\"https://github.com/pantheon-systems/wp-saml-auth/blob/master/CONTRIBUTING.md\" rel=\"nofollow ugc\">CONTRIBUTING.md</a> for information on contributing.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.2.1.0.zip",
    "upgrade_notice": {
        "2.0.0 (28 May 2024)": "<p>This release requires a minimum WordPress version of 6.4.0. It uses Site Health checks and the <code>wp_admin_notices</code> function to alert users to the new cache max-age default settings and recommendations. The plugin will still function with earlier versions, but you will not get the benefit of the alerts and Site Health checks.</p>\n\n<p>This version also automatically updates the cache max age (set in the <a href=\"https://docs.pantheon.io/guides/wordpress-configurations/wordpress-cache-plugin\">Pantheon Page Cache settings</a>) to the recommended value (1 week) if it was saved at the old default value (600 seconds). If the cache max age was set to any other value (or not set at all), it will not be changed. A one-time notice will be displayed in the admin interface to inform administrators of this change.</p>",
        "1.3.0": "<p>Note that the Pantheon Advanced Page Cache 1.3.0 release now prefixes keys on a WordPress Multisite (WPMS) with the blog ID. For users who already have this plugin installed on a WPMS, they will need to click the Clear Cache button on the settings page to generate the prefixed keys.</p>"
    },
    "screenshots": [],
    "tags": {
        "cache": "cache",
        "cdn": "cdn",
        "pantheon": "pantheon"
    },
    "stable_tag": "2.1.0",
    "versions": {
        "0.1.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.0.zip",
        "0.1.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.1.zip",
        "0.1.2": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.2.zip",
        "0.1.3": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.3.zip",
        "0.1.4": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.4.zip",
        "0.1.5": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.1.5.zip",
        "0.2.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.2.0.zip",
        "0.2.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.2.1.zip",
        "0.3.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.3.0.zip",
        "0.3.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.0.3.1.zip",
        "1.0.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.0.0.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.1.1.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.2.1.zip",
        "1.2.2": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.2.2.zip",
        "1.2.3": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.2.3.zip",
        "1.2.4": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.2.4.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.3.0.zip",
        "1.4.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.4.0.zip",
        "1.4.1": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.4.1.zip",
        "1.4.2": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.4.2.zip",
        "1.5.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.1.5.0.zip",
        "2.0.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.2.0.0.zip",
        "2.1.0": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.2.1.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/pantheon-advanced-page-cache.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/pantheon-advanced-page-cache/assets/banner-772x250.png?rev=2826148",
        "high": "https://ps.w.org/pantheon-advanced-page-cache/assets/banner-1544x500.png?rev=2826148"
    },
    "icons": {
        "1x": "https://ps.w.org/pantheon-advanced-page-cache/assets/icon-128x128.png?rev=2826148",
        "2x": "https://ps.w.org/pantheon-advanced-page-cache/assets/icon-256x256.png?rev=2826148"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}