{
    "name": "Boone&#039;s Pagination",
    "slug": "boones-pagination",
    "version": "1.1",
    "author": "<a href=\"http://boonebgorges.com\">Boone B Gorges</a>",
    "author_profile": "https://profiles.wordpress.org/boonebgorges/",
    "contributors": {
        "boonebgorges": {
            "profile": "https://profiles.wordpress.org/boonebgorges/",
            "avatar": "https://secure.gravatar.com/avatar/9cf7c4541a582729a5fc7ae484786c0c?s=96&d=monsterid&r=g",
            "display_name": "Boone Gorges"
        }
    },
    "requires": "3.1",
    "tested": "3.3.2",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/boones-pagination/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 1565,
    "last_updated": "2012-05-02 14:17:00",
    "added": "2011-05-15",
    "homepage": "http://github.com/boonebgorges/boones-pagination",
    "sections": {
        "description": "<p>Here&#8217;s how I recommend using the class.</p>\n<ol>\n<li>Either activate this plugin, or include the class in your own plugin file.</li>\n<li>When you start to render the page with the post list, instantiate the pagination class, using an argument array if you&#8217;d like: $pargs = array(   &#8216;get_per_page_key&#8217; =&gt; &#8216;perpage&#8217;,   &#8216;get_paged_key&#8217;    =&gt; &#8216;current_page&#8217;,   &#8216;per_page&#8217;         =&gt; 15 ); $pagination = new BBG_CPT_Pag( $args );</li>\n<li>When constructing your query arguments (for query_posts() or WP_Query), you can use the class to get your pagination arguments out of the $_GET parameters. For instance: $args = array(   &#8230;   &#8216;posts_per_page&#8217; =&gt; $pagination-&gt;get_per_page,   &#8216;paged&#8217; =&gt; $pagination-&gt;get_paged   &#8230; ); query_posts( $args );</li>\n<li>After firing the query, use the <code>setup_query()</code> method to populate the rest of the class. If you used <code>query_posts()</code>, you don&#8217;t need an argument: $pagination-&gt;setup_query(); If you use <code>new WP_Query</code>, you&#8217;ll have to pass the query object: $my_query = new WP_Query; $pagination-&gt;setup_query( $my_query );</li>\n<li>Then you can use all sorts of fun methods, like $pagination-&gt;paginate_links(); $pagination-&gt;currently_viewing_text();</li>\n</ol>\n",
        "changelog": "<h4>1.1</h4>\n<ul>\n<li>Adds additional customization arguments. Thanks, r-a-y!</li>\n</ul>\n<h4>1.0.1</h4>\n<ul>\n<li>Updates plugin structure to keep plugin metadata in a separate loader file</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n"
    },
    "short_description": "A handy, extensible class for paginating your custom post type lists.",
    "description": "<p>Here&#8217;s how I recommend using the class.</p>\n<ol>\n<li>Either activate this plugin, or include the class in your own plugin file.</li>\n<li>When you start to render the page with the post list, instantiate the pagination class, using an argument array if you&#8217;d like: $pargs = array(   &#8216;get_per_page_key&#8217; =&gt; &#8216;perpage&#8217;,   &#8216;get_paged_key&#8217;    =&gt; &#8216;current_page&#8217;,   &#8216;per_page&#8217;         =&gt; 15 ); $pagination = new BBG_CPT_Pag( $args );</li>\n<li>When constructing your query arguments (for query_posts() or WP_Query), you can use the class to get your pagination arguments out of the $_GET parameters. For instance: $args = array(   &#8230;   &#8216;posts_per_page&#8217; =&gt; $pagination-&gt;get_per_page,   &#8216;paged&#8217; =&gt; $pagination-&gt;get_paged   &#8230; ); query_posts( $args );</li>\n<li>After firing the query, use the <code>setup_query()</code> method to populate the rest of the class. If you used <code>query_posts()</code>, you don&#8217;t need an argument: $pagination-&gt;setup_query(); If you use <code>new WP_Query</code>, you&#8217;ll have to pass the query object: $my_query = new WP_Query; $pagination-&gt;setup_query( $my_query );</li>\n<li>Then you can use all sorts of fun methods, like $pagination-&gt;paginate_links(); $pagination-&gt;currently_viewing_text();</li>\n</ol>\n",
    "download_link": "https://downloads.wordpress.org/plugin/boones-pagination.1.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "custom-post-types": "custom post types",
        "pagination": "pagination"
    },
    "stable_tag": "1.1",
    "versions": {
        "1.0": "https://downloads.wordpress.org/plugin/boones-pagination.1.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/boones-pagination.1.0.1.zip",
        "1.1": "https://downloads.wordpress.org/plugin/boones-pagination.1.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/boones-pagination.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/boones-pagination.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}