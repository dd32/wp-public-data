{
    "name": "/well-known-uris/",
    "slug": "well-known-uris",
    "version": "1.0.3",
    "author": "<a href=\"https://github.com/brave/wordpress-well-known\">mrose17</a>",
    "author_profile": "https://profiles.wordpress.org/mrose17/",
    "contributors": {
        "pfefferle": {
            "profile": "https://profiles.wordpress.org/pfefferle/",
            "avatar": "https://secure.gravatar.com/avatar/a2bdca7870e859658cece96c044b3be5?s=96&d=monsterid&r=g",
            "display_name": "Matthias Pfefferle"
        },
        "mrose17": {
            "profile": "https://profiles.wordpress.org/mrose17/",
            "avatar": "https://secure.gravatar.com/avatar/f90235d94dd1c114e4719dd30f0c3335?s=96&d=monsterid&r=g",
            "display_name": "mrose17"
        }
    },
    "requires": "3.5.1",
    "tested": "4.6.29",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/well-known-uris/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 90,
    "downloaded": 2099,
    "last_updated": "2016-11-03 1:20pm GMT",
    "added": "2016-11-03",
    "homepage": "http://wordpress.org/extend/plugins/well-known-uris/",
    "sections": {
        "description": "<p>This plugin enables &#8220;Well-Known URIs&#8221; support for WordPress (RFC 5785: http://tools.ietf.org/html/rfc5785).</p>\n<p>From the RFC:</p>\n<blockquote>\n<p>It is increasingly common for Web-based protocols to require the<br />\n  discovery of policy or other information about a host (&#8220;site-wide<br />\n  metadata&#8221;) before making a request.  For example, the Robots<br />\n  Exclusion Protocol <a href=\"http://www.robotstxt.org/\" rel=\"nofollow ugc\">http://www.robotstxt.org/</a> specifies a way for<br />\n  automated processes to obtain permission to access resources;<br />\n  likewise, the Platform for Privacy Preferences<br />\n  tells user-agents how to discover privacy policy beforehand.</p>\n<p>While there are several ways to access per-resource metadata (e.g.,<br />\n  HTTP headers, WebDAV&#8217;s PROPFIND [RFC4918]), the perceived overhead<br />\n  (either in terms of client-perceived latency and/or deployment<br />\n  difficulties) associated with them often precludes their use in these<br />\n  scenarios.</p>\n<p>When this happens, it is common to designate a &#8220;well-known location&#8221;<br />\n  for such data, so that it can be easily located.  However, this<br />\n  approach has the drawback of risking collisions, both with other such<br />\n  designated &#8220;well-known locations&#8221; and with pre-existing resources.</p>\n<p>To address this, this memo defines a path prefix in HTTP(S) URIs for<br />\n  these &#8220;well-known locations&#8221;, &#8220;/.well-known/&#8221;.  Future specifications<br />\n  that need to define a resource for such site-wide metadata can<br />\n  register their use to avoid collisions and minimise impingement upon<br />\n  sites&#8217; URI space.</p>\n</blockquote>\n<p>You will need &#8216;manage_options&#8217; capability in order to use the Settings<br />\npage for this plugin.</p>\n",
        "installation": "<ol>\n<li>Upload the <code>well-known</code>-folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the <em>Plugins</em> menu in WordPress</li>\n<li>\n<p>If you wish to define one or more Well-Known URIs that return static output,<br />\ngo to <em>Settings &gt; Well-Known URIs</em> and define them, e.g.</p>\n<pre><code>Path: /.well-known/\nrobots.txt\n\nContent-Type:\ntext/plain; charset=utf-8\n\nURI contents:\nUser-agent: *\nAllow: /\n</code></pre>\n</li>\n<li>If you want to configure a Well-Known URI that returns dynamic output,<br />\nfirst, edit the plugin source to define a function invoked by<br />\n   do_action for the action <code>\"well_known_uri_\" + $path</code>. That function<br />\nwill be invoked when <code>/.well-known/${path}</code> is requested.</li>\n</ol>\n",
        "faq": "\n<dt id='how%20can%20i%20define%20a%20well-known%20uri%3F'>\nHow can I define a well-known uri?\n</h4>\n<p>\n<p>Set a callback for an URI (e.g., &#8220;/.well-known/robots.txt&#8221;),<br />\nidentified by <code>\"well_known_uri_\" + $path</code> (e.g., <code>\"well_known_uri_robots.txt\"</code>).</p>\n<pre><code>    add_action('well_known_uri_robots.txt', 'robots_txt');\n</code></pre>\n<p>In the callback, do whatever processing is appropriate, e.g.,</p>\n<pre><code>    function robots_txt($query) {\n          header('Content-Type: text/plain; charset=' . get_option('blog_charset'), TRUE);\n          echo \"User-agent: *\";\n          echo \"Allow: /\";\n\n          exit;\n        }\n</code></pre>\n<p>This code defines a URI that returns static output, as shown in Step 3 above.<br />\n(For static output, you will want to use <em>Settings &gt; Well-Known URIs</em> page to<br />\navoid writing any code.)</p>\n</p>\n<dt id='is%20there%20an%20implementation%20where%20i%20can%20write%20off%3F'>\nIs there an implementation where I can write off?\n</h4>\n<p>\n<p>Yes, you can find an example plugin, which defines a Well-Known URI,<br />\nhere: https://wordpress.org/extend/plugins/host-meta/</p>\n</p>\n\n",
        "changelog": "<h4>1.0.3</h4>\n<ul>\n<li>Fork from the original &#8212; https://wordpress.org/plugins/well-known/ &#8212;<br />\nmany thanks to https://profiles.wordpress.org/pfefferle/ for the<br />\nexcellent plugin!</li>\n</ul>\n"
    },
    "short_description": "&quot;Well-Known URIs&quot; for WordPress!",
    "description": "<p>This plugin enables &#8220;Well-Known URIs&#8221; support for WordPress (RFC 5785: http://tools.ietf.org/html/rfc5785).</p>\n<p>From the RFC:</p>\n<blockquote>\n<p>It is increasingly common for Web-based protocols to require the<br />\n  discovery of policy or other information about a host (&#8220;site-wide<br />\n  metadata&#8221;) before making a request.  For example, the Robots<br />\n  Exclusion Protocol <a href=\"http://www.robotstxt.org/\" rel=\"nofollow ugc\">http://www.robotstxt.org/</a> specifies a way for<br />\n  automated processes to obtain permission to access resources;<br />\n  likewise, the Platform for Privacy Preferences<br />\n  tells user-agents how to discover privacy policy beforehand.</p>\n<p>While there are several ways to access per-resource metadata (e.g.,<br />\n  HTTP headers, WebDAV&#8217;s PROPFIND [RFC4918]), the perceived overhead<br />\n  (either in terms of client-perceived latency and/or deployment<br />\n  difficulties) associated with them often precludes their use in these<br />\n  scenarios.</p>\n<p>When this happens, it is common to designate a &#8220;well-known location&#8221;<br />\n  for such data, so that it can be easily located.  However, this<br />\n  approach has the drawback of risking collisions, both with other such<br />\n  designated &#8220;well-known locations&#8221; and with pre-existing resources.</p>\n<p>To address this, this memo defines a path prefix in HTTP(S) URIs for<br />\n  these &#8220;well-known locations&#8221;, &#8220;/.well-known/&#8221;.  Future specifications<br />\n  that need to define a resource for such site-wide metadata can<br />\n  register their use to avoid collisions and minimise impingement upon<br />\n  sites&#8217; URI space.</p>\n</blockquote>\n<p>You will need &#8216;manage_options&#8217; capability in order to use the Settings<br />\npage for this plugin.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/well-known-uris.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "discovery": "discovery",
        "well-known": "well-known",
        "well-known-uris": "well-known-uris"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://www.14101978.de",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/well-known-uris.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}