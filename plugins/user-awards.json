{
    "name": "User Awards",
    "slug": "user-awards",
    "version": "0.1.1",
    "author": "<a href=\"http://kellanmartin.com\">Kellan Martin</a>",
    "author_profile": "https://profiles.wordpress.org/kwmartin/",
    "contributors": {
        "kwmartin": {
            "profile": "https://profiles.wordpress.org/kwmartin/",
            "avatar": "https://secure.gravatar.com/avatar/6df83a7229238cf024c2de1bd17fa4ca?s=96&d=monsterid&r=g",
            "display_name": "kwmartin"
        }
    },
    "requires": "5.1.1",
    "tested": "5.2.21",
    "requires_php": "5.6",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/user-awards/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 790,
    "last_updated": "2019-07-24 10:56pm GMT",
    "added": "2019-05-24",
    "homepage": "",
    "sections": {
        "description": "<p>Activating this plugin now means that you are able to award users for specific actions that they take.</p>\n<p><strong>NOTE</strong>: Currently this only works for actions that update or add to user meta values.</p>\n<p>At a basic level, the following happens when you activate this plugin:</p>\n<ul>\n<li>\n<p>Awards <em>custom post type</em> is added to the administration window. Regular post type window but with a few additional meta boxes that provide access to the core behavior of this plugin.</p>\n</li>\n<li>\n<p>A new table is created under the name of <code>{wpdb_prefix}user_awards</code>. This contains all award assignment references to users. The <em>User Awards</em> sub-menu provides an interface to help perform administrative actions on the table.</p>\n</li>\n</ul>\n<p>There is also a <code>User Awards</code> sub-menu which gives a tabular view of all the awards that are assigned to users. This is accessible from the <code>Awards</code> admin menu in your WordPress administration area.</p>\n<h3>Usage</h3>\n<p>Understanding the different actions you can take in each available window is key to having this plugin work for you.</p>\n<h3>Award List Window</h3>\n<p>This window displays all of the specific &#8220;Award&#8221; post types.</p>\n<p>There are two different bulk actions available to you:</p>\n<ul>\n<li>\n<p><strong>Bulk Assign</strong> &#8211; Assign multiple awards to a user</p>\n</li>\n<li>\n<p><strong>Bulk Give</strong> &#8211; Give multiple awards to a user</p>\n</li>\n</ul>\n<h3>New Award / Edit Award Window</h3>\n<p>These administration windows have three meta boxes associated with them. Below are descriptions of each metabox and why it is included.</p>\n<h3>Awards Trigger</h3>\n<p><em>Text Input</em>. Accepts an <strong>awards trigger string</strong>, which will describe the behavior of how an award will be assigned to users. Documentation for the awards trigger is shown below.</p>\n<h4>Example</h4>\n<p>You have a membership blog site, and because you&#8217;re a nice person, you want to award your members for being engaged with your site and liking at least ten blog posts!</p>\n<p>A previous developer implemented a like button on each of your site&#8217;s blog posts that increments a <code>post_likes</code> <em>user_meta</em> value on the user that clicks it (e.g. If a member likes 3 blog posts, they will have a <code>post_likes</code> meta value of <code>3</code>).</p>\n<p>We&#8217;ve decided to name our award the &#8220;User Engagement&#8221; award. In order to <em>assign</em> it to a member based on the prerequisites, you would put something like this in the &#8220;Awards Trigger&#8221; input.</p>\n<pre><code>CURRENT_USER_META ASSIGNED WHERE key=post_likes EQ 10\n</code></pre>\n<p>This string tells the award to assign itself to the user if the <code>post_likes</code> value of the current user&#8217;s meta was updated or created to equal a value of <code>10</code>.</p>\n<h3>Auto-Give Award</h3>\n<p><em>Checkbox input</em>. Check this box to automatically have the award be <em>given</em> to a user when it would originally be assigned.</p>\n<h3>Apply/Give Award To User</h3>\n<p><em>Select Input combined with a checkbox input</em>. Select a user from your member list to either assign/give an award by clicking on the <em>Assign</em> submit button.</p>\n<h3>User Awards Window</h3>\n<p>This window allows administrators to <strong>physically see and update</strong> the status of all of the awards that are assigned to users.</p>\n<p>This window will allow you to perform the following actions:</p>\n<ul>\n<li>Singular/Bulk remove awards from members</li>\n<li>Singular give awards to members</li>\n<li>Edit Awards</li>\n</ul>\n<h3>Documentation</h3>\n<h3>Awards Trigger Syntax</h3>\n<p>Explanation of each of the items that make up our trigger string, with accepted values of each listed under.</p>\n<ul>\n<li>\n<p>[ entity ] &#8212; Used to scope your awards trigger to a specific action.</p>\n<ul>\n<li>CURRENT_USER_META &#8212; Consider the meta value of the current user</li>\n</ul>\n</li>\n<li>\n<p>[ trigger_type ] &#8212; Type of action that is performed to the current entity.</p>\n<ul>\n<li>UPDATED &#8212; When entity value is updated (Listens to calls of the  update_user_meta() function)</li>\n<li>CREATED &#8212; When entity value is created (Listens to calls of the add_user_meta() function)</li>\n<li>ASSIGNED &#8212; Listens to calls of both the update_user_meta() and add_user_meta() function.</li>\n<li>~EXCLUDED~ &#8212; Not Implemented</li>\n</ul>\n</li>\n<li>\n<p>[ trigger ] &#8211; Made up of three separate values itself, [ descriptor ] [ operator ] [ control ]</p>\n<ul>\n<li>\n<p>[ descriptor ]</p>\n<ul>\n<li>[ entity_type ] = [ value ] ex: key = hours</li>\n</ul>\n</li>\n<li>\n<p>[ operator ]</p>\n<ul>\n<li>GT &#8211; greater than</li>\n<li>LT &#8211; less than</li>\n<li>EQ &#8211; equal to</li>\n<li>GTEQ &#8211; greater than equal to</li>\n<li>LTEQ &#8211; less than equal to</li>\n</ul>\n</li>\n<li>\n<p>[ control ]</p>\n<ul>\n<li>Value used to compare against. e.g. 2</li>\n<li><em>NOTE</em>: The control <em>can also be a string</em>, but in order for this to work, you must use the EQ operator, as shown above.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>EXAMPLE:</p>\n<pre><code>CURRENT_USER_META UPDATED WHERE key=total_hours GT 600\n</code></pre>\n<p>This example creates a wp action handler that only applies when a user&#8217;s meta tags are updated.<br />\nIn the handler, we will compare the meta tag being updated to the given comparitors in the [ trigger ].<br />\ni.e. we will look for a meta tag of the current user that is labeled &#8220;total_hours&#8221; and check to see if the value is<br />\ngreater than 600. If that&#8217;s the case then the award will be assigned. If not then nothing happens.</p>\n<h3>$UserAward Global Object</h3>\n<p>The awards trigger syntax, while nice, is too limited in its current form. Our plugin provides a global <em>$UserAward</em> variable that allows developers to interact with the core API of the plugin in order to award items through methods that simply are not possible / too complex.</p>\n<p>You will find documentation and usage for functions available to you below.</p>\n<p>global $UserAward;</p>\n<p>/**<br />\n * Check to see if a user already has a specific award<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  int $award_id &#8211; UserAward_ID (Post ID)<br />\n * @return bool           Whether or not this user has an award with the current award id<br />\n */<br />\n$UserAwards-&gt;UserHasAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Assigns multiple awards to users using AssignAward<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  array $award_ids &#8211; Array of UserAward_IDs (Post ID)<br />\n * @return bool             &#8211; True if awards were assigned, false if there was an error with assigning awards<br />\n */<br />\n$UserAwards-&gt;AssignAwards( $user_id, $award_ids );</p>\n<p>/**<br />\n * Function that marks an award as assigned to a user.<br />\n * We insert a new record into our awards table that relates the award to the user.<br />\n *<br />\n * We do check to see if there is an auto-assignment of the award before we finish up our function though.<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return bool         &#8211; True if award was assigned,<br />\n *                        False if:<br />\n *                          &#8211; User already has that award<br />\n *                          &#8211; Error with assigning our award<br />\n */<br />\n$UserAwards-&gt;AssignAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Give multiple awards to users using GiveAward().<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  array $award_ids &#8211; Array of UserAward_IDs (Post ID)<br />\n * @return bool             &#8211; True if awards were given, false if there was an error with giving awards<br />\n */<br />\n$UserAwards-&gt;GiveAwards( $user_id, $award_ids );</p>\n<p>/**<br />\n * Function that will mark an award as given to a user,<br />\n * which essentially means that we mark the &#8220;date_given&#8221; time with<br />\n * an actual date.<br />\n *<br />\n * Returns the return value of a <code>db-&gt;update</code> call<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Return value of a $wpdb-&gt;update() call<br />\n */<br />\n$UserAwards-&gt;GiveAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Removes awards from our database.<br />\n * If &#8220;$award_id&#8221; is null, then we are going to delete everything in the database with the specific &#8220;$user_id&#8221;<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Return the value of a $wpdb-&gt;delete() call<br />\n */<br />\n$UserAwards-&gt;RemoveUserAward( $user_id, $award_id = NULL );</p>\n<p>/**<br />\n * Function that grabs as many awards assigned to the user as we can based on the parameters given.<br />\n * For example, if just a user_id is supplied, then we will return all of the awards with that user_id.<br />\n * If an award_id is supplied along with our user_id then we will probably get only one award. Hopefully<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Returnes the value of a $wpdb-&gt;get_results() call<br />\n */<br />\n$UserAwards-&gt;GetUserAward( $user_id, $award_id = NULL);</p>\n<h3>Attribution</h3>\n<p>This plugin&#8217;s icon is not an original piece of work. It was made by <a href=\"www.flaticon.com\" rel=\"nofollow ugc\"><strong>Freepik</strong> from Flaticon.com</a></p>\n",
        "installation": "<ol>\n<li>Upload the plugin files to the <code>/wp-content/plugins/user-awards</code> directory install the plugin through the WordPress plugins screen directly</li>\n<li>Activate the plugin through the<br />\nThis section describes how to install the plugin and get it working.</li>\n<li>Activate the plugin through the ‘Plugins’ screen in WordPress. You should be notified if the plugin activation was successful.</li>\n<li>Click on the <code>Awards</code> menu item on the administrator sidebar in order to interact with the User Awards plugin administration actions.</li>\n</ol>\n",
        "faq": "<p>No frequently asked questions are known at this time.</p>\n",
        "changelog": "<h4>Version 0.0.2</h4>\n<p>Updating readme.txt</p>\n<h4>Version 0.0.1</h4>\n<p>Initial version of the plugin.</p>\n"
    },
    "short_description": "Let your users know how much you appreciate them! Enhances your site with the ability to assign and give awards to users based on the actions that the &hellip;",
    "description": "<p>Activating this plugin now means that you are able to award users for specific actions that they take.</p>\n<p><strong>NOTE</strong>: Currently this only works for actions that update or add to user meta values.</p>\n<p>At a basic level, the following happens when you activate this plugin:</p>\n<ul>\n<li>\n<p>Awards <em>custom post type</em> is added to the administration window. Regular post type window but with a few additional meta boxes that provide access to the core behavior of this plugin.</p>\n</li>\n<li>\n<p>A new table is created under the name of <code>{wpdb_prefix}user_awards</code>. This contains all award assignment references to users. The <em>User Awards</em> sub-menu provides an interface to help perform administrative actions on the table.</p>\n</li>\n</ul>\n<p>There is also a <code>User Awards</code> sub-menu which gives a tabular view of all the awards that are assigned to users. This is accessible from the <code>Awards</code> admin menu in your WordPress administration area.</p>\n<h3>Usage</h3>\n<p>Understanding the different actions you can take in each available window is key to having this plugin work for you.</p>\n<h3>Award List Window</h3>\n<p>This window displays all of the specific &#8220;Award&#8221; post types.</p>\n<p>There are two different bulk actions available to you:</p>\n<ul>\n<li>\n<p><strong>Bulk Assign</strong> &#8211; Assign multiple awards to a user</p>\n</li>\n<li>\n<p><strong>Bulk Give</strong> &#8211; Give multiple awards to a user</p>\n</li>\n</ul>\n<h3>New Award / Edit Award Window</h3>\n<p>These administration windows have three meta boxes associated with them. Below are descriptions of each metabox and why it is included.</p>\n<h3>Awards Trigger</h3>\n<p><em>Text Input</em>. Accepts an <strong>awards trigger string</strong>, which will describe the behavior of how an award will be assigned to users. Documentation for the awards trigger is shown below.</p>\n<h4>Example</h4>\n<p>You have a membership blog site, and because you&#8217;re a nice person, you want to award your members for being engaged with your site and liking at least ten blog posts!</p>\n<p>A previous developer implemented a like button on each of your site&#8217;s blog posts that increments a <code>post_likes</code> <em>user_meta</em> value on the user that clicks it (e.g. If a member likes 3 blog posts, they will have a <code>post_likes</code> meta value of <code>3</code>).</p>\n<p>We&#8217;ve decided to name our award the &#8220;User Engagement&#8221; award. In order to <em>assign</em> it to a member based on the prerequisites, you would put something like this in the &#8220;Awards Trigger&#8221; input.</p>\n<pre><code>CURRENT_USER_META ASSIGNED WHERE key=post_likes EQ 10\n</code></pre>\n<p>This string tells the award to assign itself to the user if the <code>post_likes</code> value of the current user&#8217;s meta was updated or created to equal a value of <code>10</code>.</p>\n<h3>Auto-Give Award</h3>\n<p><em>Checkbox input</em>. Check this box to automatically have the award be <em>given</em> to a user when it would originally be assigned.</p>\n<h3>Apply/Give Award To User</h3>\n<p><em>Select Input combined with a checkbox input</em>. Select a user from your member list to either assign/give an award by clicking on the <em>Assign</em> submit button.</p>\n<h3>User Awards Window</h3>\n<p>This window allows administrators to <strong>physically see and update</strong> the status of all of the awards that are assigned to users.</p>\n<p>This window will allow you to perform the following actions:</p>\n<ul>\n<li>Singular/Bulk remove awards from members</li>\n<li>Singular give awards to members</li>\n<li>Edit Awards</li>\n</ul>\n<h3>Documentation</h3>\n<h3>Awards Trigger Syntax</h3>\n<p>Explanation of each of the items that make up our trigger string, with accepted values of each listed under.</p>\n<ul>\n<li>\n<p>[ entity ] &#8212; Used to scope your awards trigger to a specific action.</p>\n<ul>\n<li>CURRENT_USER_META &#8212; Consider the meta value of the current user</li>\n</ul>\n</li>\n<li>\n<p>[ trigger_type ] &#8212; Type of action that is performed to the current entity.</p>\n<ul>\n<li>UPDATED &#8212; When entity value is updated (Listens to calls of the  update_user_meta() function)</li>\n<li>CREATED &#8212; When entity value is created (Listens to calls of the add_user_meta() function)</li>\n<li>ASSIGNED &#8212; Listens to calls of both the update_user_meta() and add_user_meta() function.</li>\n<li>~EXCLUDED~ &#8212; Not Implemented</li>\n</ul>\n</li>\n<li>\n<p>[ trigger ] &#8211; Made up of three separate values itself, [ descriptor ] [ operator ] [ control ]</p>\n<ul>\n<li>\n<p>[ descriptor ]</p>\n<ul>\n<li>[ entity_type ] = [ value ] ex: key = hours</li>\n</ul>\n</li>\n<li>\n<p>[ operator ]</p>\n<ul>\n<li>GT &#8211; greater than</li>\n<li>LT &#8211; less than</li>\n<li>EQ &#8211; equal to</li>\n<li>GTEQ &#8211; greater than equal to</li>\n<li>LTEQ &#8211; less than equal to</li>\n</ul>\n</li>\n<li>\n<p>[ control ]</p>\n<ul>\n<li>Value used to compare against. e.g. 2</li>\n<li><em>NOTE</em>: The control <em>can also be a string</em>, but in order for this to work, you must use the EQ operator, as shown above.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>EXAMPLE:</p>\n<pre><code>CURRENT_USER_META UPDATED WHERE key=total_hours GT 600\n</code></pre>\n<p>This example creates a wp action handler that only applies when a user&#8217;s meta tags are updated.<br />\nIn the handler, we will compare the meta tag being updated to the given comparitors in the [ trigger ].<br />\ni.e. we will look for a meta tag of the current user that is labeled &#8220;total_hours&#8221; and check to see if the value is<br />\ngreater than 600. If that&#8217;s the case then the award will be assigned. If not then nothing happens.</p>\n<h3>$UserAward Global Object</h3>\n<p>The awards trigger syntax, while nice, is too limited in its current form. Our plugin provides a global <em>$UserAward</em> variable that allows developers to interact with the core API of the plugin in order to award items through methods that simply are not possible / too complex.</p>\n<p>You will find documentation and usage for functions available to you below.</p>\n<p>global $UserAward;</p>\n<p>/**<br />\n * Check to see if a user already has a specific award<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  int $award_id &#8211; UserAward_ID (Post ID)<br />\n * @return bool           Whether or not this user has an award with the current award id<br />\n */<br />\n$UserAwards-&gt;UserHasAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Assigns multiple awards to users using AssignAward<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  array $award_ids &#8211; Array of UserAward_IDs (Post ID)<br />\n * @return bool             &#8211; True if awards were assigned, false if there was an error with assigning awards<br />\n */<br />\n$UserAwards-&gt;AssignAwards( $user_id, $award_ids );</p>\n<p>/**<br />\n * Function that marks an award as assigned to a user.<br />\n * We insert a new record into our awards table that relates the award to the user.<br />\n *<br />\n * We do check to see if there is an auto-assignment of the award before we finish up our function though.<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return bool         &#8211; True if award was assigned,<br />\n *                        False if:<br />\n *                          &#8211; User already has that award<br />\n *                          &#8211; Error with assigning our award<br />\n */<br />\n$UserAwards-&gt;AssignAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Give multiple awards to users using GiveAward().<br />\n * @param  int $user_id  &#8211; WPUser_ID<br />\n * @param  array $award_ids &#8211; Array of UserAward_IDs (Post ID)<br />\n * @return bool             &#8211; True if awards were given, false if there was an error with giving awards<br />\n */<br />\n$UserAwards-&gt;GiveAwards( $user_id, $award_ids );</p>\n<p>/**<br />\n * Function that will mark an award as given to a user,<br />\n * which essentially means that we mark the &#8220;date_given&#8221; time with<br />\n * an actual date.<br />\n *<br />\n * Returns the return value of a <code>db-&gt;update</code> call<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Return value of a $wpdb-&gt;update() call<br />\n */<br />\n$UserAwards-&gt;GiveAward( $user_id, $award_id );</p>\n<p>/**<br />\n * Removes awards from our database.<br />\n * If &#8220;$award_id&#8221; is null, then we are going to delete everything in the database with the specific &#8220;$user_id&#8221;<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Return the value of a $wpdb-&gt;delete() call<br />\n */<br />\n$UserAwards-&gt;RemoveUserAward( $user_id, $award_id = NULL );</p>\n<p>/**<br />\n * Function that grabs as many awards assigned to the user as we can based on the parameters given.<br />\n * For example, if just a user_id is supplied, then we will return all of the awards with that user_id.<br />\n * If an award_id is supplied along with our user_id then we will probably get only one award. Hopefully<br />\n *<br />\n * @param int $user_id  &#8211; ID of the user that we are &#8220;awarding&#8221; the award to<br />\n * @param int $award_id &#8211; ID of the award that we are &#8220;awarding&#8221;<br />\n * @return mixed        &#8211; Returnes the value of a $wpdb-&gt;get_results() call<br />\n */<br />\n$UserAwards-&gt;GetUserAward( $user_id, $award_id = NULL);</p>\n<h3>Attribution</h3>\n<p>This plugin&#8217;s icon is not an original piece of work. It was made by <a href=\"www.flaticon.com\" rel=\"nofollow ugc\"><strong>Freepik</strong> from Flaticon.com</a></p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/user-awards.0.1.1.zip",
    "upgrade_notice": {
        "": "<p>No Upgrade notices at this time</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/user-awards/assets/screenshot-1.png?rev=2123539",
            "caption": "Award List Window. Shows the awards that are available to give to users."
        },
        {
            "src": "https://ps.w.org/user-awards/assets/screenshot-2.png?rev=2123539",
            "caption": "New/Edit Award Window #1"
        },
        {
            "src": "https://ps.w.org/user-awards/assets/screenshot-3.png?rev=2123539",
            "caption": "New/Edit Award Window #2"
        },
        {
            "src": "https://ps.w.org/user-awards/assets/screenshot-4.png?rev=2123539",
            "caption": "User Awards window. Shows any awards that are assigned to users."
        }
    ],
    "tags": {
        "awards": "Awards",
        "user-engagement": "user engagement"
    },
    "stable_tag": "0.1.1",
    "versions": {
        "0.0.1": "https://downloads.wordpress.org/plugin/user-awards.0.0.1.zip",
        "0.0.2": "https://downloads.wordpress.org/plugin/user-awards.0.0.2.zip",
        "0.1.0": "https://downloads.wordpress.org/plugin/user-awards.0.1.0.zip",
        "0.1.1": "https://downloads.wordpress.org/plugin/user-awards.0.1.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/user-awards.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://N/A",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/user-awards/assets/icon-128x128.png?rev=2123539",
        "2x": "https://ps.w.org/user-awards/assets/icon-256x256.png?rev=2123539"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}