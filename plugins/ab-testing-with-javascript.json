{
    "name": "AB Testing with Javascript",
    "slug": "ab-testing-with-javascript",
    "version": "1.0",
    "author": "Nate Martin",
    "author_profile": "https://profiles.wordpress.org/bmorenate/",
    "contributors": {
        "bmorenate": {
            "profile": "https://profiles.wordpress.org/bmorenate/",
            "avatar": "https://secure.gravatar.com/avatar/25cf14b8ee0b67ae84222317d9935906?s=96&d=monsterid&r=g",
            "display_name": "bmorenate"
        }
    },
    "requires": "3.0.1",
    "tested": "3.5.2",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/ab-testing-with-javascript/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 1306,
    "last_updated": "2014-02-11 17:00:00",
    "added": "2013-12-03",
    "homepage": "",
    "sections": {
        "description": "<p>A plugin for A/B split-testing HTML/CSS/DOM elements with javascript.  WordPress, JQuery, and Google Analytics are required to run experiments.</p>\n<p>Important: This plugin is probably best suited for developers with advanced JavaScript and theme development skills.  It’s not overly complex, but if you’re not experienced with manipulating the DOM with JS, you probably won’t find this plugin useful.</p>\n<ul>\n<li>Test changes to your site with Javascript</li>\n<li>Run up to 5 tests simultaneously (per visitor session)</li>\n<li>Unlimited versions per test</li>\n<li>Test info is saved in cookies so returning visitors see the same version of your site</li>\n<li>Experiment data is sent to your google analytics account as custom variables</li>\n<li>No AJAX. Test info and javascript code are served from static <code>ab.js</code> file</li>\n<li>Experiment info/data is saved in the wordpress table <code>wp_options</code></li>\n</ul>\n<p>Supports both versions of Google Analytics, old &#8220;_gaq&#8221; and new Universal &#8220;ga()&#8221;</p>\n<p>If you have <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Universal Analytics</a> deployed on your site, you must provide a <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Custom Dimension key</a>. <a href=\"https://support.google.com/analytics/answer/2709829?hl=en&amp;topic=2709827&amp;ctx=topic\" rel=\"nofollow ugc\">Follow these instructions</a> to setup a custom dimension. Then, eadd the dimension to the plugin settings.</p>\n<p>Also, Universal Analytics users must use this (Custom Report)[https://www.google.com/analytics/web/template?uid=-O_F9EH4Qpil1mSt9l6U8A] to view test results (Universal Analytics only).</p>\n<p>You can help to contribute to this project on github.com @ <a href=\"https://github.com/etan-nitram/split-testing\" rel=\"nofollow ugc\">WordPress AB Testing</a></p>\n<h3>Requirements</h3>\n<ul>\n<li>General WordPress Installation</li>\n<li>Google Analytics</li>\n<li>jQuery &#8211; available to your wp-admin and client side</li>\n<li>ability to set file and folder permissions on your server</li>\n<li>Do not run more than 5 A/B tests per visitor session. Otherwise analytics data will be overwritten or lost</li>\n<li>Cache control of file <code>js/ab.js</code>. This file is rewritten and updated often, so make sure you can update cached versions of this file.</li>\n</ul>\n<h3>Javascript</h3>\n<ul>\n<li>After your first test is created, you must globally link to the plugin file <code>js/ab.js</code> in your wordpress theme.</li>\n<li>This plugin does not load any external libraries.</li>\n<li><a href=\"https://raw.github.com/carhartl/jquery-cookie/\" rel=\"nofollow ugc\">jQuery Cookie</a> is included in the <code>js/ab.js</code> file.</li>\n<li>You must load <a href=\"http://jquery.com/\" rel=\"nofollow ugc\">jQuery</a> in your wordpress theme to support the jQuery Cookie library.</li>\n<li>You can load and use any other javascript library you require for your theme and use that library in your A/B tests to manipulate DOM elements during tests.</li>\n</ul>\n<h3>Google Analytics</h3>\n<ul>\n<li>This plugin uses google analytics to store test data.</li>\n<li>Data stored is Test Name and Test Version</li>\n<li>The combination of Test Name and one Test Version Name must be less than 128 characters. Otherwise <code>_setCustomVar()</code> will not except all data.</li>\n<li><code>_setCustomVar()</code> is called just before firing <code>_trackEvent()</code> to store test data.</li>\n<li>Custom Variable applied to track event <code>_gaq.push(['_setCustomVar', 'Slot', 'AB: ' + 'Test Name', 'Version Name', 2]);</code> Slot = Test Index</li>\n<li>Event sent <code>_gaq.push(['_trackEvent', 'AB Testing', 'Test View', 'Test Name &amp; Version']);</code></li>\n<li>Goals: It is up to you, the webmaster or analytics admin, to set the test goals in your analytics admin settings.</li>\n<li>Do not run more than 5 A/B tests per visitor session. Otherwise analytics data will be overwritten or lost</li>\n</ul>\n<p>Supports both versions of Google Analytics, old &#8220;_gaq&#8221; and new Universal &#8220;ga()&#8221;</p>\n<p>If you have <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Universal Analytics</a> deployed on your site, you must provide a <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Custom Dimension key</a>. <a href=\"https://support.google.com/analytics/answer/2709829?hl=en&amp;topic=2709827&amp;ctx=topic\" rel=\"nofollow ugc\">Follow these instructions</a> to setup a custom dimension. Then, eadd the dimension to the plugin settings.</p>\n<p>Also, Universal Analytics users must use this (Custom Report)[https://www.google.com/analytics/web/template?uid=-O_F9EH4Qpil1mSt9l6U8A] to view test results (Universal Analytics only).</p>\n<p>Here&#8217;s further reading about Google Analytics <a href=\"https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingCustomVariables\" rel=\"nofollow ugc\">Custom Variables</a>, <a href=\"https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide\" rel=\"nofollow ugc\">Analytics Events</a>, and <a href=\"https://support.google.com/analytics/answer/1032415?hl=en\" rel=\"nofollow ugc\">Analytics Goals</a>.</p>\n<p>When a visitor views a page with a given test running, we use &#8220;Session Level&#8221; events to track the test view, because this ensures the test data will carry through the session to the conversion goal. From what I understand, &#8220;Page Level&#8221; custom variables will not work because we are firing an event after page load. Therefore, because the event is fired in the middle of a session, we must use session level custom variables <a href=\"http://www.kaushik.net/avinash/hits-sessions-metrics-dimensions-web-analytics/\" rel=\"nofollow ugc\">Read More Here</a></p>\n<h3>A/B Split Test</h3>\n<ul>\n<li>All A/B tests are run by manipulating HTML/CSS DOM elements in your wordpress theme with javascript.</li>\n<li>Depending on how many versions you are testing, all site traffic will be split evenly to show each test version.</li>\n<li>When a test version is run, the javascript you defined in the plugin admin will execute and show that variation to the user.</li>\n<li>No Server-Side scripting is used.</li>\n<li>Any javascript library can be used in your A/B Test, given that you have loaded the library in your wordpress theme.</li>\n</ul>\n<h3>Running An A/B Split Test</h3>\n<p>After you have installed the plugin, in the wordpress admin, navigate to <code>AB Testing</code> and click <code>Create New Test</code>. Enter Test Name, each test Version&#8217;s Name, and enter your custom javascript in <code>Version Code</code> and click <code>Save Test</code>. Be sure to include your <code>analytics=true</code> flag in all of your test version code snippets.</p>\n<p>The combination of Test Name and one Test Version Name must be less than 128 characters. This is because <code>_setCustomVar</code> limits character length.</p>\n<p>Make sure your server <code>/js/</code> directory and file <code>/js/ab.js</code> have permissions 0755 or 0775 so PHP can write output to the <code>ab.js</code> file.</p>\n<p>When you are ready to start your test, click the checkbox <code>Active</code>, which will write your new test to the <code>js/ab.js</code> file and make your test live to your site visitors.</p>\n<p>And don&#8217;t forget to update any cached versions of <code>js/ab.js</code>.</p>\n<h3>Example Test Version Code</h3>\n<p>First, decide what elements in your theme HTML you want to test.  Because your <code>js/ab.js</code> file is included globally into your theme, your A/B test code will manipulate any DOM elements that meet its conditions.</p>\n<p>Therefore, do not run tests on general elements like <code>&lt;h1&gt;</code> or <code>&lt;button&gt;</code> unless you want to test these changes site wide.  It is better to be highly specific and target your DOM elements with IDs and Classes.</p>\n<p>Also, you must remember to include the <code>analytics=true</code> flag in your javascript code.</p>\n<h3>Example</h3>\n<p>This is how we would test changing the color of <code>&lt;button class=\"test_button\"&gt;Add To Cart&lt;/button&gt;</code> from green to orange.  Let&#8217;s assume our <code>button.test_button</code> is already green in our current theme.  Therefore, green is our control version.</p>\n<p>However, since we don&#8217;t need to change the color for version 1, because it&#8217;s already green, we must still check to see if <code>$('button.test_button')</code> exists in the DOM, and if so, trigger the <code>analytics=true</code> flag to send our Custom Variable data to google analytics for the control version.</p>\n<h4>Version 1: Javascript Code</h4>\n<pre><code>if ( $('button.test_button').length &gt; 0 ) {\n    analytics = true;\n}\n</code></pre>\n<h4>Version 2: Javascript Code</h4>\n<p>In version 2 we are changing the color to orange. Once again, we must check if <code>$('button.test_button')</code> exists in the DOM.  If it does, we change the button color to orange and trigger the <code>analytics=true</code> flag.</p>\n<pre><code>if ( $('button.test_button').length &gt; 0 ) {\n    $('button.test_button').css('background-color', 'orange');\n    analytics = true;\n}\n</code></pre>\n<h3>analytics = true;</h3>\n<ul>\n<li>do not override or re-declare the <code>analytics</code> variable. It must be available to the <code>ab.js</code> file scope and set to true.</li>\n<li>It is up to you to correctly and logically set the <code>analytics=true</code> flag in your javascript code.</li>\n<li>If you forget to set it to true, no test results (custom variables) will be sent to analytics.</li>\n<li>If you set it to true in every test, without checking for test page level DOM elements, you will send invalid test data on every website page load.</li>\n</ul>\n<h3>Test Results</h3>\n<p>You will find your test data located in Google Analytics Custom Variables Reporting.</p>\n<p>Report Navigation: Audience -&gt; Custom -&gt; Custom Variables</p>\n<h3>Custom Variables Report</h3>\n<p>You should not have more than 5 tests running at one time.  Or more specifically, no more than 5 tests per visitor session, which is up to you to negotiate.</p>\n<p>Depending on how many tests you have running at a given time, your tests will fall into 1 of 5 &#8216;slots&#8217; in the Custom Variables Report, which are found at;<br />\n    Custom Variable (Key 1) Custom Variable (Key 2) Custom Variable (Key 3) Custom Variable (Key 4) Custom Variable (Key 5)</p>\n",
        "installation": "<ul>\n<li>Copy the files from this repo to your server directory <code>/wp-content/plugins/</code></li>\n<li>In wp-admin, navigate to Plugins and activate &#8216;A/B Split Testing&#8217;</li>\n<li>set server <code>/js/</code> directory permissions to 0755 or 0775. Directory must be writable by PHP</li>\n<li>set server <code>/js/ab.js</code> file permissions to 0755 or 0775. File must be writable by PHP</li>\n<li>link to the file <code>/js/ab.js</code> in the header of every page on your website\n</li>\n<li>Make sure to clear any cache for the <code>/js/ab.js</code> file after starting, updating, or stopping tests.</li>\n</ul>\n"
    },
    "short_description": "AB test website content with javascript (no PHP scripting). Run AB experiments without redirecting users to a different URL",
    "description": "<p>A plugin for A/B split-testing HTML/CSS/DOM elements with javascript.  WordPress, JQuery, and Google Analytics are required to run experiments.</p>\n<p>Important: This plugin is probably best suited for developers with advanced JavaScript and theme development skills.  It’s not overly complex, but if you’re not experienced with manipulating the DOM with JS, you probably won’t find this plugin useful.</p>\n<ul>\n<li>Test changes to your site with Javascript</li>\n<li>Run up to 5 tests simultaneously (per visitor session)</li>\n<li>Unlimited versions per test</li>\n<li>Test info is saved in cookies so returning visitors see the same version of your site</li>\n<li>Experiment data is sent to your google analytics account as custom variables</li>\n<li>No AJAX. Test info and javascript code are served from static <code>ab.js</code> file</li>\n<li>Experiment info/data is saved in the wordpress table <code>wp_options</code></li>\n</ul>\n<p>Supports both versions of Google Analytics, old &#8220;_gaq&#8221; and new Universal &#8220;ga()&#8221;</p>\n<p>If you have <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Universal Analytics</a> deployed on your site, you must provide a <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Custom Dimension key</a>. <a href=\"https://support.google.com/analytics/answer/2709829?hl=en&amp;topic=2709827&amp;ctx=topic\" rel=\"nofollow ugc\">Follow these instructions</a> to setup a custom dimension. Then, eadd the dimension to the plugin settings.</p>\n<p>Also, Universal Analytics users must use this (Custom Report)[https://www.google.com/analytics/web/template?uid=-O_F9EH4Qpil1mSt9l6U8A] to view test results (Universal Analytics only).</p>\n<p>You can help to contribute to this project on github.com @ <a href=\"https://github.com/etan-nitram/split-testing\" rel=\"nofollow ugc\">WordPress AB Testing</a></p>\n<h3>Requirements</h3>\n<ul>\n<li>General WordPress Installation</li>\n<li>Google Analytics</li>\n<li>jQuery &#8211; available to your wp-admin and client side</li>\n<li>ability to set file and folder permissions on your server</li>\n<li>Do not run more than 5 A/B tests per visitor session. Otherwise analytics data will be overwritten or lost</li>\n<li>Cache control of file <code>js/ab.js</code>. This file is rewritten and updated often, so make sure you can update cached versions of this file.</li>\n</ul>\n<h3>Javascript</h3>\n<ul>\n<li>After your first test is created, you must globally link to the plugin file <code>js/ab.js</code> in your wordpress theme.</li>\n<li>This plugin does not load any external libraries.</li>\n<li><a href=\"https://raw.github.com/carhartl/jquery-cookie/\" rel=\"nofollow ugc\">jQuery Cookie</a> is included in the <code>js/ab.js</code> file.</li>\n<li>You must load <a href=\"http://jquery.com/\" rel=\"nofollow ugc\">jQuery</a> in your wordpress theme to support the jQuery Cookie library.</li>\n<li>You can load and use any other javascript library you require for your theme and use that library in your A/B tests to manipulate DOM elements during tests.</li>\n</ul>\n<h3>Google Analytics</h3>\n<ul>\n<li>This plugin uses google analytics to store test data.</li>\n<li>Data stored is Test Name and Test Version</li>\n<li>The combination of Test Name and one Test Version Name must be less than 128 characters. Otherwise <code>_setCustomVar()</code> will not except all data.</li>\n<li><code>_setCustomVar()</code> is called just before firing <code>_trackEvent()</code> to store test data.</li>\n<li>Custom Variable applied to track event <code>_gaq.push(['_setCustomVar', 'Slot', 'AB: ' + 'Test Name', 'Version Name', 2]);</code> Slot = Test Index</li>\n<li>Event sent <code>_gaq.push(['_trackEvent', 'AB Testing', 'Test View', 'Test Name &amp; Version']);</code></li>\n<li>Goals: It is up to you, the webmaster or analytics admin, to set the test goals in your analytics admin settings.</li>\n<li>Do not run more than 5 A/B tests per visitor session. Otherwise analytics data will be overwritten or lost</li>\n</ul>\n<p>Supports both versions of Google Analytics, old &#8220;_gaq&#8221; and new Universal &#8220;ga()&#8221;</p>\n<p>If you have <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Universal Analytics</a> deployed on your site, you must provide a <a href=\"https://support.google.com/analytics/answer/2790010?hl=en\" rel=\"nofollow ugc\">Custom Dimension key</a>. <a href=\"https://support.google.com/analytics/answer/2709829?hl=en&amp;topic=2709827&amp;ctx=topic\" rel=\"nofollow ugc\">Follow these instructions</a> to setup a custom dimension. Then, eadd the dimension to the plugin settings.</p>\n<p>Also, Universal Analytics users must use this (Custom Report)[https://www.google.com/analytics/web/template?uid=-O_F9EH4Qpil1mSt9l6U8A] to view test results (Universal Analytics only).</p>\n<p>Here&#8217;s further reading about Google Analytics <a href=\"https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingCustomVariables\" rel=\"nofollow ugc\">Custom Variables</a>, <a href=\"https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide\" rel=\"nofollow ugc\">Analytics Events</a>, and <a href=\"https://support.google.com/analytics/answer/1032415?hl=en\" rel=\"nofollow ugc\">Analytics Goals</a>.</p>\n<p>When a visitor views a page with a given test running, we use &#8220;Session Level&#8221; events to track the test view, because this ensures the test data will carry through the session to the conversion goal. From what I understand, &#8220;Page Level&#8221; custom variables will not work because we are firing an event after page load. Therefore, because the event is fired in the middle of a session, we must use session level custom variables <a href=\"http://www.kaushik.net/avinash/hits-sessions-metrics-dimensions-web-analytics/\" rel=\"nofollow ugc\">Read More Here</a></p>\n<h3>A/B Split Test</h3>\n<ul>\n<li>All A/B tests are run by manipulating HTML/CSS DOM elements in your wordpress theme with javascript.</li>\n<li>Depending on how many versions you are testing, all site traffic will be split evenly to show each test version.</li>\n<li>When a test version is run, the javascript you defined in the plugin admin will execute and show that variation to the user.</li>\n<li>No Server-Side scripting is used.</li>\n<li>Any javascript library can be used in your A/B Test, given that you have loaded the library in your wordpress theme.</li>\n</ul>\n<h3>Running An A/B Split Test</h3>\n<p>After you have installed the plugin, in the wordpress admin, navigate to <code>AB Testing</code> and click <code>Create New Test</code>. Enter Test Name, each test Version&#8217;s Name, and enter your custom javascript in <code>Version Code</code> and click <code>Save Test</code>. Be sure to include your <code>analytics=true</code> flag in all of your test version code snippets.</p>\n<p>The combination of Test Name and one Test Version Name must be less than 128 characters. This is because <code>_setCustomVar</code> limits character length.</p>\n<p>Make sure your server <code>/js/</code> directory and file <code>/js/ab.js</code> have permissions 0755 or 0775 so PHP can write output to the <code>ab.js</code> file.</p>\n<p>When you are ready to start your test, click the checkbox <code>Active</code>, which will write your new test to the <code>js/ab.js</code> file and make your test live to your site visitors.</p>\n<p>And don&#8217;t forget to update any cached versions of <code>js/ab.js</code>.</p>\n<h3>Example Test Version Code</h3>\n<p>First, decide what elements in your theme HTML you want to test.  Because your <code>js/ab.js</code> file is included globally into your theme, your A/B test code will manipulate any DOM elements that meet its conditions.</p>\n<p>Therefore, do not run tests on general elements like <code>&lt;h1&gt;</code> or <code>&lt;button&gt;</code> unless you want to test these changes site wide.  It is better to be highly specific and target your DOM elements with IDs and Classes.</p>\n<p>Also, you must remember to include the <code>analytics=true</code> flag in your javascript code.</p>\n<h3>Example</h3>\n<p>This is how we would test changing the color of <code>&lt;button class=\"test_button\"&gt;Add To Cart&lt;/button&gt;</code> from green to orange.  Let&#8217;s assume our <code>button.test_button</code> is already green in our current theme.  Therefore, green is our control version.</p>\n<p>However, since we don&#8217;t need to change the color for version 1, because it&#8217;s already green, we must still check to see if <code>$('button.test_button')</code> exists in the DOM, and if so, trigger the <code>analytics=true</code> flag to send our Custom Variable data to google analytics for the control version.</p>\n<h4>Version 1: Javascript Code</h4>\n<pre><code>if ( $('button.test_button').length &gt; 0 ) {\n    analytics = true;\n}\n</code></pre>\n<h4>Version 2: Javascript Code</h4>\n<p>In version 2 we are changing the color to orange. Once again, we must check if <code>$('button.test_button')</code> exists in the DOM.  If it does, we change the button color to orange and trigger the <code>analytics=true</code> flag.</p>\n<pre><code>if ( $('button.test_button').length &gt; 0 ) {\n    $('button.test_button').css('background-color', 'orange');\n    analytics = true;\n}\n</code></pre>\n<h3>analytics = true;</h3>\n<ul>\n<li>do not override or re-declare the <code>analytics</code> variable. It must be available to the <code>ab.js</code> file scope and set to true.</li>\n<li>It is up to you to correctly and logically set the <code>analytics=true</code> flag in your javascript code.</li>\n<li>If you forget to set it to true, no test results (custom variables) will be sent to analytics.</li>\n<li>If you set it to true in every test, without checking for test page level DOM elements, you will send invalid test data on every website page load.</li>\n</ul>\n<h3>Test Results</h3>\n<p>You will find your test data located in Google Analytics Custom Variables Reporting.</p>\n<p>Report Navigation: Audience -&gt; Custom -&gt; Custom Variables</p>\n<h3>Custom Variables Report</h3>\n<p>You should not have more than 5 tests running at one time.  Or more specifically, no more than 5 tests per visitor session, which is up to you to negotiate.</p>\n<p>Depending on how many tests you have running at a given time, your tests will fall into 1 of 5 &#8216;slots&#8217; in the Custom Variables Report, which are found at;<br />\n    Custom Variable (Key 1) Custom Variable (Key 2) Custom Variable (Key 3) Custom Variable (Key 4) Custom Variable (Key 5)</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/ab-testing-with-javascript.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/ab-testing-with-javascript/assets/screenshot-1.png?rev=814469",
            "caption": "<p>Enter test code and parameters into wp-admin interface</p>"
        },
        {
            "src": "https://ps.w.org/ab-testing-with-javascript/assets/screenshot-2.png?rev=814469",
            "caption": "<p>Test data and results are sent to your google analtyics account. Example: Testing Black or Dark Grey headline colors</p>"
        }
    ],
    "tags": {
        "ab-testing": "a/b testing",
        "ab-experiments": "ab experiments",
        "ab-tests": "ab tests",
        "content-experiments": "content experiments"
    },
    "stable_tag": "trunk",
    "versions": {
        "1.0": "https://downloads.wordpress.org/plugin/ab-testing-with-javascript.1.0.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://github.com/etan-nitram/split-testing",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/ab-testing-with-javascript.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}