{
    "name": "Bang System Logging",
    "slug": "bang-syslog",
    "version": "1.2",
    "author": "<a href=\"http://www.bang-on.net/\">Marcus Downing</a>",
    "author_profile": "https://profiles.wordpress.org/marcusdowning/",
    "contributors": {
        "marcusdowning": {
            "profile": "https://profiles.wordpress.org/marcusdowning/",
            "avatar": "https://secure.gravatar.com/avatar/85da34890f23a1fbd629bacc8b6bb81a?s=96&d=monsterid&r=g",
            "display_name": "Marcus Downing"
        }
    },
    "requires": "3.0",
    "tested": "3.5.2",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/bang-syslog/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1220,
    "last_updated": "2013-08-30 14:08:00",
    "added": "2013-08-30",
    "homepage": "http://www.bang-on.net/",
    "sections": {
        "description": "<p>Enable system logging for WordPress plugin and theme development. This can make it easier to know what your code is doing.</p>\n<p>Features include:</p>\n<ul>\n<li>Log to the system log or to a file</li>\n<li>Easily append or embed any value in log messages</li>\n<li>Coloured logs indicating strings, numbers, arrays, objects, null values etc.</li>\n<li>Extract values from arrays of objects</li>\n<li>Optionally exclude AJAX, Javascripts, CSS and any other pattern of URLs.</li>\n<li>Intercept PHP errors and log strict warnings</li>\n<li>Measure memory usage between two points, or the time taken by various parts of your code</li>\n<li>Easy to switch off for production sites</li>\n</ul>\n<h4>How to use</h4>\n<p>Using it is as simple as calling the <code>'log'</code> action in your templates or plugin.</p>\n<pre><code>&lt;?php do_action('log', 'Some log message'); ?&gt;\n</code></pre>\n<p>This will produce a line in your system log:</p>\n<pre><code>Jun  4 11:23:08 myserver php/mysite.com[1553]: b8e mysite.com/path-to-page: Some log message\n</code></pre>\n<p>This includes:</p>\n<ul>\n<li><code>Jun  4 11:23:08</code> &#8211; The date and time of the log message</li>\n<li><code>myserver</code> &#8211; The name of this computer</li>\n<li><code>php</code> &#8211; The program that produced the message</li>\n<li><code>mysite.com</code> &#8211; The domain name of the site</li>\n<li><code>1553</code> &#8211; The process ID of the running PHP process</li>\n<li><code>b8e</code> &#8211; A random 3-digit code identifying each page request</li>\n<li><code>mysite.com/path-to-page</code> &#8211; The URL of the request</li>\n<li><code>Some log message</code> &#8211; Your message</li>\n</ul>\n<p>For more detailed instructions, see the <strong>How to use</strong> tab.</p>\n<h3>How to use</h3>\n<p>To log a message, use the <code>'log'</code> action in your templates or plugins:</p>\n<pre><code>&lt;?php do_action('log', 'Some log message'); ?&gt;\n</code></pre>\n<p>This will output the log message:</p>\n<pre><code>Some log message\n</code></pre>\n<h4>Embedding values</h4>\n<p>If you include extra parameters, they&#8217;ll be added at the end of the log message:</p>\n<pre><code>&lt;?php do_action('log', 'A number and a string', 17, 'foo'); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>A number and a string: 17, foo\n</code></pre>\n<p>The value will be formatted correctly depending on its type: integers, strings, arrays, objects, booleans etc.<br />\nYou don&#8217;t need to check if values are null or empty, they&#8217;ll still be output safely.</p>\n<p>If you put the code <code>%s</code> into your log message, then one of the arguments will be dropped into the message:</p>\n<pre><code>&lt;?php do_action('log', 'I have %s numbers', count($numbers), $numbers); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>I have 4 numbers: [9, 16, 307, 1]\n</code></pre>\n<h4>Selecting fields</h4>\n<p>Logging a complete object &#8211; such as a WordPress post &#8211; can be very large, and sometimes it&#8217;s only one or two fields you need.<br />\nIf you put a string starting with an exclamation point <code>\"!\"</code> followed by a list of field names, they will be selected from the following object.<br />\nThe following will only show the <code>ID</code> and <code>post_title</code> fields of the post:</p>\n<pre><code>&lt;?php do_action('log', 'Loaded the post', '!ID,post_title', $post); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>Loaded the post: {ID: 1932, post_title: Test page}\n</code></pre>\n<p>If you do this with an array of objects, those fields will be selected from each of them. The following will output a list of post <code>ID</code>s:</p>\n<pre><code>&lt;?php do_action('log', 'Loaded %s posts', count($posts), '!ID', $posts); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>Loaded 3 posts: [1932, 1594, 1103]\n</code></pre>\n<h4>Coloured logs</h4>\n<p>If you have coloured logging switched on, values will appear in different colours to indicate their type.<br />\nThis can make for quicker scanning of log files.<br />\nTo enable coloured logs, tick the <em>Coloured logs</em> checkbox on the settings page.<br />\nThen use the <code>log.sh</code> script, included with this plugin, to decode and display the coloured log files.</p>\n",
        "installation": "<h4>Basic installation</h4>\n<ol>\n<li>Upload the <code>bang-syslog</code> directory into the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Place <code>&lt;?php do_action('log', 'Some log message'); ?&gt;</code> in your templates and plugins</li>\n</ol>\n<h4>Early logging for plugin developers</h4>\n<p>Normally, this plugin can only begin logging once the plugin has loaded.<br />\nIf you&#8217;re using logging to develop your own plugin, you may find it helpful to activate this plugin earlier.<br />\nPut this line near the bottom of your <code>wp-config.php</code> file:</p>\n<pre><code>require_once(ABSPATH . 'wp-content/plugins/bang-syslog/include.php');\n</code></pre>\n<h4>Using the plugin</h4>\n<p>The plugin does nothing until it&#8217;s called in PHP code.<br />\nSee the <strong>How to use</strong> tab for more information.</p>\n",
        "faq": "\n<h4>What happens when I switch the plugin off?</h4>\n<p>\n<p>The <code>'log'</code> action will have no effect.<br />\nNo logs will be written, but there should be no errors either.</p>\n</p>\n<h4>Where are my logs?</h4>\n<p>\n<p>By default, the message will be written to the computer&#8217;s system log.<br />\nThe exact location of this file varies depending on your operating system.<br />\nOn linux, the logs will typically go to <code>/var/log/syslog</code> or <code>/var/log/messages</code>.</p>\n<p>The <em>System Logging</em> settings page can be used to send the logs instead to the Apache error log, or into a file in your web folder.</p>\n</p>\n<h4>My logs are full of garbage!</h4>\n<p>\n<p>Like this?</p>\n<pre><code>Jun  4 11:23:08 potassium php/app.k[1553]: \\033[36m\\033[44m97a\\033[0m \\033[32mapp.k/app-content/public-order/policing-football/www.legislation.gov.uk/ukpga/2000/23/contents\\033[0m: \\033[37m\\033[1mfs: Setting page params: page = \\033[0m\\033[31mnull\\033[0m\\033[1m, offset = \\033[0m\\033[31mnull\\033[0m\\033[1m, size = \\033[0m\\033[36m10\\033[0m\\033[1m\\033[0m\n</code></pre>\n<p>You have coloured logging switched on. The codes are unix terminal colour codes, which don&#8217;t show properly in a normal text editor. You need to use the correct tool to view them.</p>\n<p>You can either switch coloured logging off in the settings page, or you can use the included script <code>log.sh</code> to decode the coloured logs.</p>\n</p>\n\n"
    },
    "short_description": "Enable system logging for WordPress plugin and theme development.",
    "description": "<p>Enable system logging for WordPress plugin and theme development. This can make it easier to know what your code is doing.</p>\n<p>Features include:</p>\n<ul>\n<li>Log to the system log or to a file</li>\n<li>Easily append or embed any value in log messages</li>\n<li>Coloured logs indicating strings, numbers, arrays, objects, null values etc.</li>\n<li>Extract values from arrays of objects</li>\n<li>Optionally exclude AJAX, Javascripts, CSS and any other pattern of URLs.</li>\n<li>Intercept PHP errors and log strict warnings</li>\n<li>Measure memory usage between two points, or the time taken by various parts of your code</li>\n<li>Easy to switch off for production sites</li>\n</ul>\n<h4>How to use</h4>\n<p>Using it is as simple as calling the <code>'log'</code> action in your templates or plugin.</p>\n<pre><code>&lt;?php do_action('log', 'Some log message'); ?&gt;\n</code></pre>\n<p>This will produce a line in your system log:</p>\n<pre><code>Jun  4 11:23:08 myserver php/mysite.com[1553]: b8e mysite.com/path-to-page: Some log message\n</code></pre>\n<p>This includes:</p>\n<ul>\n<li><code>Jun  4 11:23:08</code> &#8211; The date and time of the log message</li>\n<li><code>myserver</code> &#8211; The name of this computer</li>\n<li><code>php</code> &#8211; The program that produced the message</li>\n<li><code>mysite.com</code> &#8211; The domain name of the site</li>\n<li><code>1553</code> &#8211; The process ID of the running PHP process</li>\n<li><code>b8e</code> &#8211; A random 3-digit code identifying each page request</li>\n<li><code>mysite.com/path-to-page</code> &#8211; The URL of the request</li>\n<li><code>Some log message</code> &#8211; Your message</li>\n</ul>\n<p>For more detailed instructions, see the <strong>How to use</strong> tab.</p>\n<h3>How to use</h3>\n<p>To log a message, use the <code>'log'</code> action in your templates or plugins:</p>\n<pre><code>&lt;?php do_action('log', 'Some log message'); ?&gt;\n</code></pre>\n<p>This will output the log message:</p>\n<pre><code>Some log message\n</code></pre>\n<h4>Embedding values</h4>\n<p>If you include extra parameters, they&#8217;ll be added at the end of the log message:</p>\n<pre><code>&lt;?php do_action('log', 'A number and a string', 17, 'foo'); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>A number and a string: 17, foo\n</code></pre>\n<p>The value will be formatted correctly depending on its type: integers, strings, arrays, objects, booleans etc.<br />\nYou don&#8217;t need to check if values are null or empty, they&#8217;ll still be output safely.</p>\n<p>If you put the code <code>%s</code> into your log message, then one of the arguments will be dropped into the message:</p>\n<pre><code>&lt;?php do_action('log', 'I have %s numbers', count($numbers), $numbers); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>I have 4 numbers: [9, 16, 307, 1]\n</code></pre>\n<h4>Selecting fields</h4>\n<p>Logging a complete object &#8211; such as a WordPress post &#8211; can be very large, and sometimes it&#8217;s only one or two fields you need.<br />\nIf you put a string starting with an exclamation point <code>\"!\"</code> followed by a list of field names, they will be selected from the following object.<br />\nThe following will only show the <code>ID</code> and <code>post_title</code> fields of the post:</p>\n<pre><code>&lt;?php do_action('log', 'Loaded the post', '!ID,post_title', $post); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>Loaded the post: {ID: 1932, post_title: Test page}\n</code></pre>\n<p>If you do this with an array of objects, those fields will be selected from each of them. The following will output a list of post <code>ID</code>s:</p>\n<pre><code>&lt;?php do_action('log', 'Loaded %s posts', count($posts), '!ID', $posts); ?&gt;\n</code></pre>\n<p>This will produce the log message:</p>\n<pre><code>Loaded 3 posts: [1932, 1594, 1103]\n</code></pre>\n<h4>Coloured logs</h4>\n<p>If you have coloured logging switched on, values will appear in different colours to indicate their type.<br />\nThis can make for quicker scanning of log files.<br />\nTo enable coloured logs, tick the <em>Coloured logs</em> checkbox on the settings page.<br />\nThen use the <code>log.sh</code> script, included with this plugin, to decode and display the coloured log files.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/bang-syslog.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/bang-syslog/trunk/screenshot-1.png?rev=1566982",
            "caption": "<p>The settings page</p>"
        },
        {
            "src": "https://ps.w.org/bang-syslog/trunk/screenshot-2.png?rev=1566982",
            "caption": "<p>A coloured log file</p>"
        }
    ],
    "tags": {
        "debug": "debug",
        "syslog": "syslog"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/bang-syslog.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}