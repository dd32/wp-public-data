{
    "name": "Object Oriented Plugin Template Solution",
    "slug": "oop-plugin-template-solution",
    "version": "1.1.2",
    "author": "<a href=\"http://www.analysisandsolutions.com/\">Daniel Convissor</a>",
    "author_profile": "https://profiles.wordpress.org/convissor/",
    "contributors": {
        "convissor": {
            "profile": "https://profiles.wordpress.org/convissor/",
            "avatar": "https://secure.gravatar.com/avatar/9cfced0f9d0693bbae1620d6d8d9ab69?s=96&d=monsterid&r=g",
            "display_name": "Daniel Convissor"
        }
    },
    "requires": "3.3",
    "tested": "4.4.33",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 2,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/oop-plugin-template-solution/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 3096,
    "last_updated": "2016-08-13 4:46pm GMT",
    "added": "2012-11-05",
    "homepage": "http://wordpress.org/extend/plugins/oop-plugin-template-solution/",
    "sections": {
        "description": "<p>Gives authors of new plugins a leg up on creating a great, easy to maintain plugin by providing a carefully designed plugin skeleton to build on. Authors of existing plugins can extract individual components and concepts for transplantation into their own projects.</p>\n<ul>\n<li>Clean, object-oriented design</li>\n<li>PHPUnit tests</li>\n<li>Admin screen uses the Settings API</li>\n<li>Multisite support</li>\n<li>Creates a table during activation</li>\n<li>Drops the table and settings during deactivation</li>\n<li>Uses WordPress&#8217; i18n and provides scripts for generating the gettext files</li>\n<li>Installation instructions have a script for renaming files, classes and IDs</li>\n</ul>\n<p>See the FAQ section for more details about this plugin&#8217;s features.</p>\n<p>Development of this plugin template happens on <a href=\"https://github.com/convissor/oop-plugin-template-solution\" rel=\"nofollow ugc\">GitHub</a>. Please submit <a href=\"https://github.com/convissor/oop-plugin-template-solution/issues\" rel=\"nofollow ugc\">bug and feature requests</a>, <a href=\"https://github.com/convissor/oop-plugin-template-solution/pulls\" rel=\"nofollow ugc\">pull requests</a>, <a href=\"https://github.com/convissor/oop-plugin-template-solution/wiki\" rel=\"nofollow ugc\">wiki entries</a><br />\nthere. Releases are then squashed and pushed to WordPress&#8217; <a href=\"https://plugins.svn.wordpress.org/oop-plugin-template-solution/\" rel=\"nofollow ugc\">Plugins SVN repository</a>. This division is necessary due having being chastised that &#8220;the Plugins SVN repository is a release system, not a development system.&#8221;</p>\n<h4>Explanations</h4>\n<p>If you want an explanation of how this &#8220;plugin&#8221; works, please see the &#8220;PHPUnit Tests for WordPress Plugins&#8221; series on my blog.</p>\n<ul>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-global-variables.htm\" rel=\"nofollow ugc\">Global Variables</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-wp-mail.htm\" rel=\"nofollow ugc\">wp_mail()</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-wp-redirect-and-continuing-after-php-errors.htm\" rel=\"nofollow ugc\">wp_redirect() and Expected PHP Errors</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-auto-increment-id-records.htm\" rel=\"nofollow ugc\">Auto-increment ID Records</a></li>\n</ul>\n",
        "installation": "<ol>\n<li>\n<p>Download the zip file from WordPress&#8217; plugin site: <code>https://wordpress.org/extend/plugins/oop-plugin-template-solution/</code></p>\n</li>\n<li>\n<p>Unzip the file</p>\n</li>\n<li>\n<p>Here are some semi-automated steps to copy this plugin and rename the files, class names, and identifiers.  The commands are in Bash, adjust them as needed for your environment.  Replace the three mentions of &#8220;My Plugin&#8221; in the settings section with the name of your plugin.</p>\n<pre><code># Settings ----- # Plugin identifier / directory (hyphen separated). old_id=oop-plugin-template-solution new_id=my-plugin  # Class name (underscore separated). old_class=oop_plugin_template_solution new_class=my_plugin  # Plugin Name (space separated). old_name=\"Object Oriented Plugin Template Solution\" new_name=\"My Plugin\" # --------------   # Copy and rename the files. cp -R $old_id $new_id cd $new_id mv $old_id.php $new_id.php  # Replace strings in the files. find . -type f -exec sed \"s/$old_id/$new_id/g\" -i {} \\; find . -type f -exec sed \"s/$old_class/$new_class/g\" -i {} \\; find . -type f -exec sed \"s/$old_name/$new_name/g\" -i {} \\; find . -type f -exec sed -E \"s/^ \\* (Author:|Author URI:|@author|@copyright) (.*)$/ * \\1/g\" -i {} \\; find . -type f -exec sed \"s@REPLACE_PLUGIN_URI@https://wordpress.org/extend/plugins/oop-plugin-template-solution/@g\" -i {} \\; sed -E \"s/^(Contributors|Donate link|Tags): (.*)$/\\1:/g\" -i readme.txt </code></pre>\n</li>\n<li>\n<p>Now get down to making the plugin do what you want.  See the FAQ for instructions about particular aspects.</p>\n</li>\n<li>\n<p>Upload your plugin directory to your server&#8217;s <code>/wp-content/plugins/</code><br />\ndirectory</p>\n</li>\n<li>\n<p>Activate the plugin using WordPress&#8217; admin interface:</p>\n<ul>\n<li>Regular sites:  Plugins</li>\n<li>Sites using multisite networks:  My Sites | Network Admin | Plugins</li>\n</ul>\n</li>\n</ol>\n<h4>Removal</h4>\n<ol>\n<li>\n<p>This plugin offers the ability to remove all of this plugin&#8217;s settings from your database.  Go to WordPress&#8217; &#8220;Plugins&#8221; admin interface and click the &#8220;Settings&#8221; link for this plugin.  In the &#8220;Deactivate&#8221; entry, click the &#8220;Yes, delete the damn data&#8221; button and save the form.</p>\n</li>\n<li>\n<p>Use WordPress&#8217; &#8220;Plugins&#8221; admin interface to click the &#8220;Deactivate&#8221; link</p>\n</li>\n<li>\n<p>Remove the plugins directory from the server</p>\n</li>\n</ol>\n",
        "faq": "<h4>Multisite Networks</h4>\n<p>This plugin is coded to be installed in either a regular, single WordPress installation or as a network plugin for multisite installations.  So, by default, multisite networks can only activate this plugin via the Network Admin panel.</p>\n<p>If you want your plugin to be configurable for each site in a multisite network, follow the instructions in the docblock at the top of <code>admin.php</code>.</p>\n<h4>Settings API</h4>\n<p>We add some abstraction around WordPress&#8217; <a href=\"https://codex.wordpress.org/Settings_API\" rel=\"nofollow ugc\">Settings API</a>.  All you need to do is add some elements to two arrays and maybe create a section header if you want.  This is way better than having to write out <code>add_settings_field()</code><br />\ncalls and creating display and validation callbacks for each and every field.</p>\n<ol>\n<li>\n<p>Open <code>admin.php</code> in your favorite text editor</p>\n</li>\n<li>\n<p>Read the docblock at the top of the file</p>\n</li>\n</ol>\n<h4>Unit Tests</h4>\n<p>This framework uses PHPUnit, so standard PHPUnit file, class, and method naming practices apply.  Our framework requires that your test files and classes:</p>\n<ul>\n<li>Have a <code>require_once</code> call for <code>TestCase.php</code> at the top of the script. That obtains the PHPUnit and other items needed.  It&#8217;s the only file you need to include.</li>\n<li>Classes must extend <code>TestCase</code></li>\n<li>If you add a <code>setUpBeforeClass()</code> method, it must call <code>parent::setUpBeforeClass()</code></li>\n<li>If you add a <code>setUp()</code> method, it must call <code>parent::setUp()</code></li>\n<li>If you add a <code>tearDown()</code> method, it must call <code>parent::tearDown()</code></li>\n<li>If you add a <code>tearDownAfterClass()</code> method, it must call <code>parent::tearDownAfterClass()</code></li>\n</ul>\n<p>Take a look at the <code>TestLogin.php</code> script for examples of how to handle calls to <code>wp_mail()</code> (and translations of mail messages) and <code>wp_redirect()</code>, the use of database savepoints, and manipulating user metadata.</p>\n<p>Please note that the tests make extensive use of database transactions. Many tests will be skipped if your <code>wp_options</code> and <code>wp_usermeta</code> tables are not using the <code>InnoDB</code> storage engine.</p>\n<p>To execute the tests, install and activate the plugin, then use a shell to <code>cd</code> into this plugin&#8217;s directory and call <code>phpunit tests</code></p>\n<p>While it is possible to test plugins using <a href=\"https://codex.wordpress.org/Automated_Testing\" rel=\"nofollow ugc\">WordPress&#8217; Automated Testing</a> PHPUnit framework, it is a complex system, is another dependency, and runs in its own environment. The benefit of using my plugin&#8217;s PHPUnit is that it ships with the plugin and executes in the users actual WordPress installation.  This means any end user can easily test how the plugin interacts with their site.</p>\n<h4>Translations</h4>\n<p>To produce the machine readable translations used by WordPress&#8217; gettext implementation, use the scripts I made for generating all of the <code>.pot</code>, <code>.po</code> and <code>.mo</code> files:</p>\n<ul>\n<li><code>cd languages</code></li>\n<li><code>./makepot.sh</code></li>\n<li>Update the headers, version number, etc in the <code>.pot</code> file as desired.</li>\n<li>To add a new language: <code>touch &lt;plugin-id&gt;-&lt;lc&gt;_&lt;CC&gt;.mo</code>  Substitutions: plugin-id: the plugin&#8217;s identifier ($new_id from above) lc: language code CC: country code</li>\n<li><code>./updatepos.sh</code></li>\n<li>Fill the translated text in the <code>.po</code> files.</li>\n<li><code>./makemos.sh</code></li>\n</ul>\n",
        "changelog": "<h4>1.1.2 (2016-08-13)</h4>\n<ul>\n<li>Change translation domain from constant to string for integration with translate.wordpress.org</li>\n</ul>\n<h4>1.1.1 (2012-11-28)</h4>\n<ul>\n<li>Tell folks where explanations can be found.</li>\n</ul>\n<h4>1.1.0 (2012-11-08)</h4>\n<ul>\n<li>Move the <code>wp_logout()</code> and <code>wp_redirect()</code> calls from direct calls in the test method to a method in the tested class instead.</li>\n</ul>\n<h4>1.0.2 (2012-11-05)</h4>\n<ul>\n<li>Explain why can&#8217;t use PHPUnit&#8217;s @expectedException functionality.</li>\n</ul>\n<h4>1.0.1 (2012-11-05)</h4>\n<ul>\n<li>Clarify instructions and descriptions.</li>\n</ul>\n<h4>1.0.0 (2012-11-05)</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "A well engineered template for creating plugins using object-oriented programming practices. Uses Settings API, multisite, i18n, PHPUnit tests.",
    "description": "<p>Gives authors of new plugins a leg up on creating a great, easy to maintain plugin by providing a carefully designed plugin skeleton to build on. Authors of existing plugins can extract individual components and concepts for transplantation into their own projects.</p>\n<ul>\n<li>Clean, object-oriented design</li>\n<li>PHPUnit tests</li>\n<li>Admin screen uses the Settings API</li>\n<li>Multisite support</li>\n<li>Creates a table during activation</li>\n<li>Drops the table and settings during deactivation</li>\n<li>Uses WordPress&#8217; i18n and provides scripts for generating the gettext files</li>\n<li>Installation instructions have a script for renaming files, classes and IDs</li>\n</ul>\n<p>See the FAQ section for more details about this plugin&#8217;s features.</p>\n<p>Development of this plugin template happens on <a href=\"https://github.com/convissor/oop-plugin-template-solution\" rel=\"nofollow ugc\">GitHub</a>. Please submit <a href=\"https://github.com/convissor/oop-plugin-template-solution/issues\" rel=\"nofollow ugc\">bug and feature requests</a>, <a href=\"https://github.com/convissor/oop-plugin-template-solution/pulls\" rel=\"nofollow ugc\">pull requests</a>, <a href=\"https://github.com/convissor/oop-plugin-template-solution/wiki\" rel=\"nofollow ugc\">wiki entries</a><br />\nthere. Releases are then squashed and pushed to WordPress&#8217; <a href=\"https://plugins.svn.wordpress.org/oop-plugin-template-solution/\" rel=\"nofollow ugc\">Plugins SVN repository</a>. This division is necessary due having being chastised that &#8220;the Plugins SVN repository is a release system, not a development system.&#8221;</p>\n<h4>Explanations</h4>\n<p>If you want an explanation of how this &#8220;plugin&#8221; works, please see the &#8220;PHPUnit Tests for WordPress Plugins&#8221; series on my blog.</p>\n<ul>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-global-variables.htm\" rel=\"nofollow ugc\">Global Variables</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-wp-mail.htm\" rel=\"nofollow ugc\">wp_mail()</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-wp-redirect-and-continuing-after-php-errors.htm\" rel=\"nofollow ugc\">wp_redirect() and Expected PHP Errors</a></li>\n<li><a href=\"http://www.analysisandsolutions.com/blog/html/writing-phpunit-tests-for-wordpress-plugins-auto-increment-id-records.htm\" rel=\"nofollow ugc\">Auto-increment ID Records</a></li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/oop-plugin-template-solution.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "i18n": "i18n",
        "multisite": "multisite",
        "object-oriented": "object oriented",
        "phpunit": "phpunit",
        "settings-api": "settings api",
        "skeleton": "skeleton",
        "template": "template",
        "translation": "translation"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=danielc%40analysisandsolutions%2ecom&lc=US&item_name=Donate%3a%20Object%20Oriented%20Plugin%20Template%20Solution&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/oop-plugin-template-solution.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}