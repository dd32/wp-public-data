{
    "name": "Forms: 3rd-Party Xml Post",
    "slug": "forms-3rd-party-xpost",
    "version": "1.4.3",
    "author": "<a href=\"http://drzaus.com\">zaus, leadlogic</a>",
    "author_profile": "https://profiles.wordpress.org/zaus/",
    "contributors": {
        "zaus": {
            "profile": "https://profiles.wordpress.org/zaus/",
            "avatar": "https://secure.gravatar.com/avatar/d940dd93751cea6229c4b9b2098b7f39?s=96&d=monsterid&r=g",
            "display_name": "zaus"
        }
    },
    "requires": "3.0",
    "tested": "4.9.26",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 2,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/forms-3rd-party-xpost/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 200,
    "downloaded": 7311,
    "last_updated": "2018-07-17 04:03:00",
    "added": "2014-02-23",
    "homepage": "https://github.com/zaus/forms-3rdparty-xpost",
    "sections": {
        "description": "<p>Converts external submission from <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms: 3rdparty Integration</a> plugin to an XML or JSON post; optionally can add custom headers (to allow SOAP submissions) or transform/combine separate fields into nested values.</p>\n<p>This plugin can turn the 3rdparty mappings into XML elements, so that each form post will be the value (or attribute) of an XML element.</p>\n",
        "installation": "<ol>\n<li>Unzip, upload plugin folder to your plugins directory (<code>/wp-content/plugins/</code>)</li>\n<li>Make sure <a href=\"https://wordpress.org/extend/plugins/contact-form-7/\" title=\"Contact Form 7\" rel=\"ugc\">Contact Form 7</a> or <a href=\"http://www.gravityforms.com/\" title=\"Gravity Forms\" rel=\"nofollow ugc\">Gravity Forms</a> is installed</li>\n<li>Make sure <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms: 3rdparty Integration</a> is installed</li>\n<li>Activate plugin</li>\n<li>Go to new admin subpage <em>&#8220;3rdparty Services&#8221;</em> under the CF7 &#8220;Contact&#8221; menu or Gravity Forms &#8220;Forms&#8221; menu and configure services + field mapping.</li>\n<li>Configure the new &#8220;Xml Post&#8221; section to choose which services send as xml and/or determine special headers (given as a url querystring).</li>\n<li>Nest fields by separating nodes with <code>/</code>, and indicate attributes with <code>@</code>.  Numeric indexes by themselves will result in repetition of the parent element (ex. <code>item/%i/sub</code> could make <code>&lt;item&gt;&lt;sub /&gt;&lt;/item&gt;&lt;item&gt;&lt;sub /&gt;&lt;/item&gt;</code>).</li>\n</ol>\n",
        "faq": "\n<h4>Installation Instructions</h4>\n<p>\n<ol>\n<li>Unzip, upload plugin folder to your plugins directory (<code>/wp-content/plugins/</code>)</li>\n<li>Make sure <a href=\"https://wordpress.org/extend/plugins/contact-form-7/\" title=\"Contact Form 7\" rel=\"ugc\">Contact Form 7</a> or <a href=\"http://www.gravityforms.com/\" title=\"Gravity Forms\" rel=\"nofollow ugc\">Gravity Forms</a> is installed</li>\n<li>Make sure <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms: 3rdparty Integration</a> is installed</li>\n<li>Activate plugin</li>\n<li>Go to new admin subpage <em>&#8220;3rdparty Services&#8221;</em> under the CF7 &#8220;Contact&#8221; menu or Gravity Forms &#8220;Forms&#8221; menu and configure services + field mapping.</li>\n<li>Configure the new &#8220;Xml Post&#8221; section to choose which services send as xml and/or determine special headers (given as a url querystring).</li>\n<li>Nest fields by separating nodes with <code>/</code>, and indicate attributes with <code>@</code>.  Numeric indexes by themselves will result in repetition of the parent element (ex. <code>item/%i/sub</code> could make <code>&lt;item&gt;&lt;sub /&gt;&lt;/item&gt;&lt;item&gt;&lt;sub /&gt;&lt;/item&gt;</code>).</li>\n</ol>\n</p>\n<h4>I need help</h4>\n<p>\n<p>Submit an issue to the <a href=\"https://github.com/zaus/forms-3rdparty-xpost/issues\" title=\"GitHub issue tracker\" rel=\"nofollow ugc\">GitHub issue tracker</a> in addition to / instead of the WP Support Forums.</p>\n</p>\n<h4>How do I add / configure a service?</h4>\n<p>\n<p>See &#8220;base plugin&#8221; <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms: 3rdparty Integration</a>.</p>\n</p>\n<h4>How do I set headers</h4>\n<p>\n<p>Provide the list of headers as though they were a URL querystring, so that</p>\n<blockquote>\n<p>Content-Type: something<br />\n  X-Special-Header: something-else</p>\n</blockquote>\n<p>would be given as</p>\n<blockquote>\n<p><code>Content-Type=something&amp;X-Special-Header=something-else</code></p>\n</blockquote>\n<p>You may also use shortcodes such as <code>base64</code> in the header.</p>\n</p>\n<h4>How do I nest elements?</h4>\n<p>\n<p>Separate element names within the same 3rdparty field mapping using <code>/</code>, so that in order to make:</p>\n<pre><code>&lt;credentials type=\"123\"&gt;\n    &lt;user&gt;xyz&lt;/user&gt;\n    &lt;pass&gt;abc&lt;/pass&gt;\n&lt;/credentials&gt;\n</code></pre>\n<p>you would use <code>credentials/@type</code>, <code>credentials/user</code> and <code>credentials/pass</code>, respectively.</p>\n<p><strong>Note:</strong> You may nest and wrap elements even if not transforming into XML; they will be submitted as multi-dimensional arrays like:</p>\n<pre><code>credentials[@type]=123&amp;credentials[user]=xyz&amp;credentials[pass]=abc\n</code></pre>\n</p>\n<h4>How do I repeat elements?</h4>\n<p>\n<p>As of v1.3, if there is a standalone numerical index it will cause repetition of the &#8220;parent&#8221; element.</p>\n<p>ex) If the post is:</p>\n<pre><code>item =&gt; array (\n        0 =&gt; value1,\n        1 =&gt; value2,\n        2 =&gt; value3\n    )\n</code></pre>\n<p>it will result in</p>\n<pre><code>&lt;item&gt;value1&lt;/item&gt;\n&lt;item&gt;value2&lt;/item&gt;\n&lt;item&gt;value3&lt;/item&gt;\n</code></pre>\n<p>You can accomplish this with the Forms-3rdparty separator <code>[%]</code> to place your index appropriately.</p>\n</p>\n<h4>How do I set xml prolog attributes?</h4>\n<p>\n<p>Just enter the entire root xml in the field, a la http://stackoverflow.com/questions/5992268/simplexml-how-to-correctly-set-encoding-and-xmins</p>\n</p>\n<h4>How do I autoclose/not autoclose empty values?</h4>\n<p>\n<p>To produce <code>&lt;SomeTag /&gt;</code>, make sure the &#8220;Autoclose&#8221; option is enabled.<br />\nTo produce <code>&lt;SomeTag&gt;&lt;/SomeTag&gt;</code>, make sure the &#8220;Autoclose&#8221; option is unchecked.</p>\n</p>\n<h4>How do I completely customize the xml/wrappers/transform?</h4>\n<p>\n<p>Use the &#8216;Mask&#8217; format, which allows you to specify the result exactly as you want via string replacement (<code>sprintf</code>), or the &#8216;Replace&#8217;/&#8217;Advanced Replace&#8217; format which will replace string tokens (<code>{{3rdparty}}</code>).  Useful for complex XML.</p>\n<ul>\n<li>The &#8216;Root Element&#8217; field will now be treated as a string-replacement mask (a la <code>sprintf</code> for &#8220;Mask&#8221; or <code>str_replace</code> for &#8220;Replace&#8221;), so make sure to include the post body with the appropriate placeholder(s) (<code>%s</code> for &#8220;Mask&#8221;, <code>{{3rdparty_Fields}}</code> for &#8220;Replace&#8221;).</li>\n<li>For &#8216;Mask&#8217; format, each &#8216;3rd-Party Field&#8217; will also be treated the same, using <code>%s</code> to indicate where the submission value should go.</li>\n<li>For &#8216;Replace&#8217; format, repeating fields are not handled &#8212; it essentially looks for instances of each &#8220;3rd-Party Field&#8221; column and replaces it with the corresponding input value.</li>\n<li>For &#8216;Advanced Replace&#8217; format, it works the same except that repeating fields are handled in one of two ways:\n<ul>\n<li>Providing the shortcode <code>[xpost-loop on=\"repeatingFieldKey\" times=\"a number\"]loop content[/xpost-loop]</code> will repeat the <code>loop content</code> either <em>times</em> or for each key in the array <em>repeatingFieldKey</em> (which is your 3rdparty mapped field)</li>\n<li>otherwise it will suffix each repeating field key with its index and look for that as a placeholder (e.g. <code>myfield1</code>, <code>myfield2</code>, etc)</li>\n</ul>\n</li>\n</ul>\n</p>\n<h4>How do I use the Advanced Replace format?</h4>\n<p>\n<p>For the given mapping:</p>\n<pre><code>Source                  3rdparty\n------                  --------\ninput_1                 name\ninput_2                 phone\ninput_3.1               files\\%i\\name\ninput_3.2               files\\%i\\name\ninput_3.3               files\\%i\\name\ninput_4.1               files\\%i\\content\ninput_4.2               files\\%i\\content\ninput_4.3               files\\%i\\content\ninput_5.1               files\\%i\\mime\ninput_5.2               files\\%i\\mime\ninput_5.3               files\\%i\\mime\n</code></pre>\n<p>Normally the <code>input_3.*</code> fields would get grouped together, as would the <code>input_4.*</code> fields.  Using separator <code>[%]</code>, it will create a nested list like:</p>\n<pre><code>array(\n    'files' =&gt; array(\n        0 =&gt; array(\n            'name' =&gt; 'value of input_3.1',\n            'mime' =&gt; 'value of input_5.1',\n            'content' =&gt; 'value of input_4.1' ),\n        1 =&gt; array(\n            'name' =&gt; 'value of input_3.2',\n            'mime' =&gt; 'value of input_5.2',\n            'content' =&gt; 'value of input_4.2' ),\n        2 =&gt; array(\n            'name' =&gt; 'value of input_3.3',\n            'mime' =&gt; 'value of input_5.2',\n            'content' =&gt; 'value of input_4.3' ),\n))\n</code></pre>\n<p>With Advanced Replacement, you could set the &#8220;Root Elements&#8221; field to something like the following (which mimics a normal form upload):</p>\n<pre><code>--multipartboundaryPE6azq\nContent-Disposition: form-data; name=\"myNameField\"\n\n{{name}}\n--multipartboundaryPE6azq\nContent-Disposition: form-data; name=\"myPhoneField\"\n\n{{phone}}\n[xpost-loop on=\"files\"]--multipartboundaryPE6azq\nContent-Disposition: form-data; name=\"myUploadFiles\"; filename=\"{{name}}\"\nContent-Type: {{mime}}\n\n{{content}}\n[/xpost-loop]\n</code></pre>\n<p>Note the use of the shortcode <code>xpost-loop</code> which will repeat for each of the elements in the nested <code>files</code> array, replacing the placeholders accordingly.</p>\n</p>\n\n",
        "changelog": "<h4>1.4.3</h4>\n<ul>\n<li>added new &#8220;Advanced Replace&#8221; format which behaves the same as the existing mustache-style replacement but with <code>xpost-loop</code> shortcode</li>\n<li>fix: cloning row clears textarea field too</li>\n</ul>\n<h4>1.4.2</h4>\n<ul>\n<li>wrapper field is textarea for easier format usage</li>\n</ul>\n<h4>1.4.1</h4>\n<ul>\n<li>fix constructor warning for PHP7</li>\n</ul>\n<h4>1.4</h4>\n<ul>\n<li>new string replacement format using mustache-style token placeholders <code>{{3rdparty}}</code></li>\n</ul>\n<h4>1.3.3</h4>\n<ul>\n<li>actually fix #24 parsing xml in root</li>\n</ul>\n<h4>1.3.2</h4>\n<ul>\n<li>fix: bug parsing existing xml root</li>\n<li>allow shortcodes in root</li>\n</ul>\n<h4>1.3</h4>\n<ul>\n<li>removed somewhat useless numerical index prefixing (n0, n1, nEtc)</li>\n<li>replaced with element repetition instead</li>\n</ul>\n<h4>1.2</h4>\n<ul>\n<li>ignores xml root when considering escaped backslashes (compatibility break &#8212; please update your setting accordingly)</li>\n<li>&#8216;mask&#8217; format &#8212; greater flexibility and control over field/wrapper</li>\n<li>shortcodes in header; base64 shortcode</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>autoclose option</li>\n<li>decided it was good enough to be v1</li>\n</ul>\n<h4>0.5</h4>\n<ul>\n<li>Added <code>multipart/form-data</code> and &#8216;url&#8217; formatting per GitHub issue #6 https://github.com/zaus/forms-3rdparty-xpost/issues/6</li>\n<li>Added xml prolog/root workaround per GitHub issue #8 https://github.com/zaus/forms-3rdparty-xpost/issues/8\n<ul>\n<li>Can now enter actual xml as root element for finer customization</li>\n</ul>\n</li>\n</ul>\n<h4>0.4.2</h4>\n<p>Can post body as json instead</p>\n<h4>0.4</h4>\n<p>Fixed GitHub issue #3 https://github.com/zaus/forms-3rdparty-xpost/issues/3:</p>\n<ul>\n<li>each plugin setting is only applied to that specific service if it has a value</li>\n<li>removed default <code>post</code> wrapper unless sending as xml (and if you send XML you should specify a wrapper)</li>\n</ul>\n<h4>0.3</h4>\n<p>Can nest regular post fields even when not submitting XML.</p>\n<h4>0.2</h4>\n<ul>\n<li>Element nesting, attributes</li>\n<li>reworked &#8220;xmlify&#8221; using recursive <code>SimpleXMLElement</code></li>\n</ul>\n<h4>0.1</h4>\n<p>Base version &#8211; xml and header transformation</p>\n"
    },
    "short_description": "Converts submission from Forms 3rdparty Integration to xml/json, add headers, or nest fields.",
    "description": "<p>Converts external submission from <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms: 3rdparty Integration</a> plugin to an XML or JSON post; optionally can add custom headers (to allow SOAP submissions) or transform/combine separate fields into nested values.</p>\n<p>This plugin can turn the 3rdparty mappings into XML elements, so that each form post will be the value (or attribute) of an XML element.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.zip",
    "upgrade_notice": {
        "1.3.2": "<ul>\n<li>fixed a bug in root parsing for already xml, please let me know if it breaks your usage</li>\n</ul>",
        "1.3": "<ul>\n<li>no longer prefixes standalone numerical indexes with <code>n</code></li>\n<li>instead will repeat the &#039;parent&#039; element -- so a mapping of <code>item/%i/sub%i</code> could make ``</li>\n</ul>",
        "1.2": "<ul>\n<li>no longer requires that you escape backslashes in the wrapper if providing XML (i.e. it starts with &lt;) -- breaks backwards compatibility</li>\n</ul>"
    },
    "screenshots": [],
    "tags": {
        "cf7": "cf7",
        "contact-form": "contact form",
        "contact-form-7": "contact form 7",
        "form": "form",
        "gravity-forms": "gravity forms"
    },
    "stable_tag": "trunk",
    "versions": {
        "0.1": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.0.1.zip",
        "0.2": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.0.2.zip",
        "0.4.3": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.0.4.3.zip",
        "0.5": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.0.5.zip",
        "1.0": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.1.0.zip",
        "1.3": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.1.3.zip",
        "1.4": "https://downloads.wordpress.org/plugin/forms-3rd-party-xpost.1.4.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://drzaus.com/donate",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/forms-3rd-party-xpost.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}