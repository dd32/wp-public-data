{
    "name": "WAJ Admin Menu",
    "slug": "waj-admin-menu",
    "version": "1.2.1",
    "author": "<a href=\"https://www.jaimeson-waugh.com\">Jaimeson Waugh</a>",
    "author_profile": "https://profiles.wordpress.org/waughjai/",
    "contributors": {
        "waughjai": {
            "profile": "https://profiles.wordpress.org/waughjai/",
            "avatar": "https://secure.gravatar.com/avatar/c18c3ff307c43dd4752168eb30f5030f?s=96&d=monsterid&r=g",
            "display_name": "waughjai"
        }
    },
    "requires": "4.9.8",
    "tested": "5.2.21",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/waj-admin-menu/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 849,
    "last_updated": "2019-05-07 22:55:00",
    "added": "2018-11-23",
    "homepage": "https://github.com/waughjai/waj-admin-menu",
    "sections": {
        "description": "<p>Creates menu in WordPress&#8217;s Appearances -&gt; Menus &amp; generates list HTML from it.</p>\n<p>Allows custom-set classes &amp; IDs for elements for easier styling &amp; has easy way to automatically add &#8220;Skip to Content&#8221; link for screen-reader users.</p>\n<h3>Usage</h3>\n<p>Since admin menus need to be created before initialization to work in the WordPress admin &amp; used later in template files to print, admin menu objects are handled through static methods in the WPAdminMenuManager singleton class.</p>\n<p>1st, before admin loads, call the &#8220;createAdminMenu&#8221; method on WPAdminMenuManager with a slug &amp; title as the 1st 2 mandatory, &amp; a hash map o&#8217; other attributes as an optional 3rd argument. This will make the menu appear under the given name in Appearances -&gt; Menus in the WordPress admin.</p>\n<p>Then you can print the menu through PHP in template files or shortcodes in WordPress content editors.</p>\n<p>= PHP</p>\n<p>To use through PHP, just call the &#8220;printAdminMenu&#8221; method on the WPAdminMenuManager class with the mandatory argument o&#8217; the slug representing the admin you want to print ( given when creating the menu earlier ) &amp; an optional hash map o&#8217; attributes to o&#8217;erride the ones given when creating the menu, if you want to print the same menu in different places with different element classes, for instance.</p>\n<p>= Shortcodes</p>\n<p>To print through shortcodes, just use the shortcode [admin-menu slug=&#8221;%slug%&#8221;], with optional extra attributes to o&#8217;erride the attributes given when creating the menu.</p>\n<p>WPAdminMenuManager also has 2 templates for easier creation o&#8217; admin menus, a header &amp; footer template. Just call WPAdminMenuManager::createHeaderMenu() or WPAdminMenuManager::createFooterMenu() respectively to create them &amp; either call WPAdminMenuManager::printHeaderMenu() or WPAdminMenuManager::printFooterMenu() or use the shortcodes [header-nav] or [footer-nav].</p>\n<p>If you try to print a menu that hasn&#8217;t been created yet, it will print nothing.</p>\n<p>Valid attributes for admin menus ( all are optional ):</p>\n<ul>\n<li>&#8220;nav&#8221;: represents the nav element that holds everything. Should hold a hash map with either a class or id attribute, or both.</li>\n<li>&#8220;ul&#8221;: represents ul element. Should hold the same as &#8220;nav&#8221;.</li>\n<li>&#8220;li&#8221;: represents li element. Should hold a hash map with a class attribute.</li>\n<li>&#8220;a&#8221;: represents a element. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;subnav&#8221;: represents child ul elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;subitem&#8221;: represents child li elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;sublink&#8221;: represents child a elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;parent-link&#8221;: represents a elements in top-level li elements that hold child navs. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;skip-to-content&#8221;: automatically adds &#8220;skip to content&#8221; link. Should be a string that will be the anchor ( without the # ) that the &#8220;skip to content&#8221; link should go to. If not added, &#8220;skip to content&#8221; link will not be added.</li>\n</ul>\n<p>Shortcode attributes that act as these:</p>\n<ul>\n<li>nav-class</li>\n<li>nav-id</li>\n<li>ul-class</li>\n<li>ul-id</li>\n<li>li-class</li>\n<li>a-class</li>\n<li>subnav-class</li>\n<li>subitem-class</li>\n<li>sublink-class</li>\n<li>parent-link-class</li>\n<li>skip-to-content</li>\n</ul>\n<h3>Example</h3>\n<p>// functions.php</p>\n<pre><code>declare( strict_types = 1 );\nnamespace MyTheme\n{\n    use WaughJ\\WPAdminMenuManager\\WPAdminMenumanager;\n\n    // Make sure this is initialized early,\n    // so WordPress Admin knows that this menu is set up.\n    WPAdminMenuManager::createAdminMenu\n    (\n        'extra-menu',\n        'Extra Menu',\n        [\n            'nav' =&gt;\n            [\n                'class' =&gt; 'extra-menu-nav',\n                'id' =&gt; 'extra-menu-nav'\n            ],\n            'ul' =&gt;\n            [\n                'class' =&gt; 'extra-menu-list',\n                'id' =&gt; 'extra-menu-list'\n            ],\n            'li' =&gt;\n            [\n                'class' =&gt; 'extra-menu-item'\n            ],\n            'a' =&gt;\n            [\n                'class' =&gt; 'extra-menu-link'\n            ],\n            'subnav' =&gt;\n            [\n                'class' =&gt; 'extra-menu-subnav'\n            ],\n            'subitem' =&gt;\n            [\n                'class' =&gt; 'extra-menu-subitem'\n            ],\n            'sublink' =&gt;\n            [\n                'class' =&gt; 'extra-menu-sublink'\n            ],\n            'parent-link' =&gt;\n            [\n                'class' =&gt; 'extra-menu-parent-link'\n            ],\n            'skip-to-content' =&gt; 'top'\n        ]\n    );\n}\n\n\n// inc/header.php\n\n&lt;?php\n\ndeclare( strict_types = 1 );\nnamespace MyTheme\n{\n    use WaughJ\\WPAdminMenuManager\\WPAdminMenumanager;\n\n    ?&gt;\n        &lt;header class=\"header\"&gt;\n            &lt;?php WPAdminMenuManager::printAdminMenu( 'extra-menu' ); ?&gt;\n        &lt;/header&gt;\n    &lt;?php\n}\n</code></pre>\n",
        "installation": "<ol>\n<li>Upload the plugin files to the <code>/wp-content/plugins/plugin-name</code> directory, or install the plugin through the WordPress plugins screen directly.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; screen in WordPress</li>\n</ol>\n",
        "changelog": "<h4>1.2</h4>\n<ul>\n<li>Add ability to get menu objects &amp; lists ( arrays ) from WPAdminMenuManager.</li>\n</ul>\n<h4>1.1</h4>\n<ul>\n<li>Add current item &amp; current link classes as possible attributes.</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial stable version.</li>\n</ul>\n"
    },
    "short_description": "Simple class &amp; shortcodes for easily generating HTML for admin menus set up in WordPress.",
    "description": "<p>Creates menu in WordPress&#8217;s Appearances -&gt; Menus &amp; generates list HTML from it.</p>\n<p>Allows custom-set classes &amp; IDs for elements for easier styling &amp; has easy way to automatically add &#8220;Skip to Content&#8221; link for screen-reader users.</p>\n<h3>Usage</h3>\n<p>Since admin menus need to be created before initialization to work in the WordPress admin &amp; used later in template files to print, admin menu objects are handled through static methods in the WPAdminMenuManager singleton class.</p>\n<p>1st, before admin loads, call the &#8220;createAdminMenu&#8221; method on WPAdminMenuManager with a slug &amp; title as the 1st 2 mandatory, &amp; a hash map o&#8217; other attributes as an optional 3rd argument. This will make the menu appear under the given name in Appearances -&gt; Menus in the WordPress admin.</p>\n<p>Then you can print the menu through PHP in template files or shortcodes in WordPress content editors.</p>\n<p>= PHP</p>\n<p>To use through PHP, just call the &#8220;printAdminMenu&#8221; method on the WPAdminMenuManager class with the mandatory argument o&#8217; the slug representing the admin you want to print ( given when creating the menu earlier ) &amp; an optional hash map o&#8217; attributes to o&#8217;erride the ones given when creating the menu, if you want to print the same menu in different places with different element classes, for instance.</p>\n<p>= Shortcodes</p>\n<p>To print through shortcodes, just use the shortcode [admin-menu slug=&#8221;%slug%&#8221;], with optional extra attributes to o&#8217;erride the attributes given when creating the menu.</p>\n<p>WPAdminMenuManager also has 2 templates for easier creation o&#8217; admin menus, a header &amp; footer template. Just call WPAdminMenuManager::createHeaderMenu() or WPAdminMenuManager::createFooterMenu() respectively to create them &amp; either call WPAdminMenuManager::printHeaderMenu() or WPAdminMenuManager::printFooterMenu() or use the shortcodes [header-nav] or [footer-nav].</p>\n<p>If you try to print a menu that hasn&#8217;t been created yet, it will print nothing.</p>\n<p>Valid attributes for admin menus ( all are optional ):</p>\n<ul>\n<li>&#8220;nav&#8221;: represents the nav element that holds everything. Should hold a hash map with either a class or id attribute, or both.</li>\n<li>&#8220;ul&#8221;: represents ul element. Should hold the same as &#8220;nav&#8221;.</li>\n<li>&#8220;li&#8221;: represents li element. Should hold a hash map with a class attribute.</li>\n<li>&#8220;a&#8221;: represents a element. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;subnav&#8221;: represents child ul elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;subitem&#8221;: represents child li elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;sublink&#8221;: represents child a elements for multilevel menus. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;parent-link&#8221;: represents a elements in top-level li elements that hold child navs. Should hold the same as &#8220;li&#8221;.</li>\n<li>&#8220;skip-to-content&#8221;: automatically adds &#8220;skip to content&#8221; link. Should be a string that will be the anchor ( without the # ) that the &#8220;skip to content&#8221; link should go to. If not added, &#8220;skip to content&#8221; link will not be added.</li>\n</ul>\n<p>Shortcode attributes that act as these:</p>\n<ul>\n<li>nav-class</li>\n<li>nav-id</li>\n<li>ul-class</li>\n<li>ul-id</li>\n<li>li-class</li>\n<li>a-class</li>\n<li>subnav-class</li>\n<li>subitem-class</li>\n<li>sublink-class</li>\n<li>parent-link-class</li>\n<li>skip-to-content</li>\n</ul>\n<h3>Example</h3>\n<p>// functions.php</p>\n<pre><code>declare( strict_types = 1 );\nnamespace MyTheme\n{\n    use WaughJ\\WPAdminMenuManager\\WPAdminMenumanager;\n\n    // Make sure this is initialized early,\n    // so WordPress Admin knows that this menu is set up.\n    WPAdminMenuManager::createAdminMenu\n    (\n        'extra-menu',\n        'Extra Menu',\n        [\n            'nav' =&gt;\n            [\n                'class' =&gt; 'extra-menu-nav',\n                'id' =&gt; 'extra-menu-nav'\n            ],\n            'ul' =&gt;\n            [\n                'class' =&gt; 'extra-menu-list',\n                'id' =&gt; 'extra-menu-list'\n            ],\n            'li' =&gt;\n            [\n                'class' =&gt; 'extra-menu-item'\n            ],\n            'a' =&gt;\n            [\n                'class' =&gt; 'extra-menu-link'\n            ],\n            'subnav' =&gt;\n            [\n                'class' =&gt; 'extra-menu-subnav'\n            ],\n            'subitem' =&gt;\n            [\n                'class' =&gt; 'extra-menu-subitem'\n            ],\n            'sublink' =&gt;\n            [\n                'class' =&gt; 'extra-menu-sublink'\n            ],\n            'parent-link' =&gt;\n            [\n                'class' =&gt; 'extra-menu-parent-link'\n            ],\n            'skip-to-content' =&gt; 'top'\n        ]\n    );\n}\n\n\n// inc/header.php\n\n&lt;?php\n\ndeclare( strict_types = 1 );\nnamespace MyTheme\n{\n    use WaughJ\\WPAdminMenuManager\\WPAdminMenumanager;\n\n    ?&gt;\n        &lt;header class=\"header\"&gt;\n            &lt;?php WPAdminMenuManager::printAdminMenu( 'extra-menu' ); ?&gt;\n        &lt;/header&gt;\n    &lt;?php\n}\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.2.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "admin-menu": "admin menu",
        "autogenerate": "autogenerate",
        "html": "html",
        "nav": "nav"
    },
    "stable_tag": "1.2.1",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.0.0.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.1.0.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.1.2.zip",
        "1.1.3": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.1.3.zip",
        "1.1.4": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.1.4.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/waj-admin-menu.1.2.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/waj-admin-menu.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/waj-admin-menu/assets/icon.svg?rev=2010141",
        "svg": "https://ps.w.org/waj-admin-menu/assets/icon.svg?rev=2010141"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}