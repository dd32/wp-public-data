{
    "name": "WP Get Post Image",
    "slug": "wp-get-post-image",
    "version": "0.2",
    "author": "<a href=\"http://michaelwender.com/\">Michael Wender</a>",
    "author_profile": "https://profiles.wordpress.org/thewebist/",
    "contributors": {
        "thewebist": {
            "profile": "https://profiles.wordpress.org/thewebist/",
            "avatar": "https://secure.gravatar.com/avatar/1e2c38869115dd5418dc860246fed8be?s=96&d=monsterid&r=g",
            "display_name": "TheWebist"
        }
    },
    "requires": "2.8.4",
    "tested": "3.0.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/wp-get-post-image/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 100,
    "downloaded": 9955,
    "last_updated": "2010-06-26 10:36:00",
    "added": "2009-11-19",
    "homepage": "http://michaelwender.com/wordpress/plugins/wp-get-post-image/",
    "sections": {
        "description": "<p>This plugin provides the template tag <code>wp_get_post_image()</code>. Use it to call dynamically created images uploaded via the WordPress media uploader.</p>\n<p>NOTE: This plugin is intended for use by WordPress developers and theme builders only.</p>\n<h4>Usage</h4>\n<pre><code>&lt;?php wp_get_post_image($args); ?&gt;\n</code></pre>\n<h4>Default Usage</h4>\n<pre><code>&lt;?php $args = array(\n    'width' =&gt; null,\n    'height' =&gt; null,\n    'css' =&gt; '',\n    'parent_id' =&gt; '',\n    'post_id' =&gt; '',\n    'filename' =&gt; '',\n    'return_html' =&gt; true       \n); ?&gt;\n</code></pre>\n<p>By default, the function returns:</p>\n<ul>\n<li>The last uploaded image wrapped in an image tag (<code>&lt;img /&gt;</code>).</li>\n<li>A proportionately sized image with a <code>width</code> no greater than <code>200px</code>.</li>\n<li>The CSS class <code>wp-image-*ID*</code> and no other classes.</li>\n<li>If you add <code>thickbox</code> via <code>css</code>, the appropriate anchor <code>&lt;a&gt;</code> tag will be added for Thickbox compatibility.</li>\n</ul>\n<h4>Parameters</h4>\n<ul>\n<li>\n<p><strong>width</strong> (<em>integer</em>) &#8211; Width of image.</p>\n</li>\n<li>\n<p><strong>height</strong> (<em>integer</em>) &#8211; Height of image.</p>\n</li>\n<li>\n<p><strong>parent_id</strong> (<em>integer</em>) &#8211; The ID of the <code>post_parent</code> for the attachment. Specifying the <code>parent_id</code> returns the first image attached to the parent post according to <code>menu_order</code>.</p>\n</li>\n<li>\n<p><strong>post_id</strong> (<em>integer</em>) &#8211; The ID of the attachment.</p>\n</li>\n<li>\n<p><strong>filename</strong> (<em>string</em>) &#8211; The filename that corresponds to the <code>post_name</code> of the attachment.</p>\n</li>\n<li>\n<p><strong>return_html</strong> (<em>boolean</em>) &#8211; <code>true</code> returns the image wrapped in an XHTML image tag. <code>false</code> returns the image&#8217;s URL.</p>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code>&lt;?php \n// use this example wherever you have access to $post-&gt;ID, e.g. the WordPress loop\nif(function_exists('wp_get_post_image'))\n    echo wp_get_post_image('width=450&amp;css=alignleft&amp;parent_id='.$post-&gt;ID);  \n?&gt;\n</code></pre>\n",
        "installation": "<p>Install the plugin as follows:</p>\n<ol>\n<li>Upload the folder <code>wp-get-post-image</code> to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Place <code>&lt;?php echo wp_get_post_image(); ?&gt;</code> in your templates</li>\n</ol>\n",
        "faq": "<p>No questions yet.</p>\n",
        "changelog": "<h4>0.2 (2010-01-26)</h4>\n<ul>\n<li>Adjusted <code>$image-&gt;basepath</code> to reference <code>get_bloginfo('wpurl')</code> instead of <code>get_bloginfo('url')</code>. This makes the plugin work when WordPress is installed in one directory while the blog displays in another. (HT: <a href=\"http://mikecohenmedia.com/\" title=\"Mike Cohen Media\" rel=\"nofollow ugc\">Mike Cohen</a>)</li>\n</ul>\n<h4>0.1 (2009-11-23)</h4>\n<ul>\n<li>first version</li>\n</ul>\n"
    },
    "short_description": "Adds the function wp_get_post_image(), giving theme builders easy access to images associated with a post or page.",
    "description": "<p>This plugin provides the template tag <code>wp_get_post_image()</code>. Use it to call dynamically created images uploaded via the WordPress media uploader.</p>\n<p>NOTE: This plugin is intended for use by WordPress developers and theme builders only.</p>\n<h4>Usage</h4>\n<pre><code>&lt;?php wp_get_post_image($args); ?&gt;\n</code></pre>\n<h4>Default Usage</h4>\n<pre><code>&lt;?php $args = array(\n    'width' =&gt; null,\n    'height' =&gt; null,\n    'css' =&gt; '',\n    'parent_id' =&gt; '',\n    'post_id' =&gt; '',\n    'filename' =&gt; '',\n    'return_html' =&gt; true       \n); ?&gt;\n</code></pre>\n<p>By default, the function returns:</p>\n<ul>\n<li>The last uploaded image wrapped in an image tag (<code>&lt;img /&gt;</code>).</li>\n<li>A proportionately sized image with a <code>width</code> no greater than <code>200px</code>.</li>\n<li>The CSS class <code>wp-image-*ID*</code> and no other classes.</li>\n<li>If you add <code>thickbox</code> via <code>css</code>, the appropriate anchor <code>&lt;a&gt;</code> tag will be added for Thickbox compatibility.</li>\n</ul>\n<h4>Parameters</h4>\n<ul>\n<li>\n<p><strong>width</strong> (<em>integer</em>) &#8211; Width of image.</p>\n</li>\n<li>\n<p><strong>height</strong> (<em>integer</em>) &#8211; Height of image.</p>\n</li>\n<li>\n<p><strong>parent_id</strong> (<em>integer</em>) &#8211; The ID of the <code>post_parent</code> for the attachment. Specifying the <code>parent_id</code> returns the first image attached to the parent post according to <code>menu_order</code>.</p>\n</li>\n<li>\n<p><strong>post_id</strong> (<em>integer</em>) &#8211; The ID of the attachment.</p>\n</li>\n<li>\n<p><strong>filename</strong> (<em>string</em>) &#8211; The filename that corresponds to the <code>post_name</code> of the attachment.</p>\n</li>\n<li>\n<p><strong>return_html</strong> (<em>boolean</em>) &#8211; <code>true</code> returns the image wrapped in an XHTML image tag. <code>false</code> returns the image&#8217;s URL.</p>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code>&lt;?php \n// use this example wherever you have access to $post-&gt;ID, e.g. the WordPress loop\nif(function_exists('wp_get_post_image'))\n    echo wp_get_post_image('width=450&amp;css=alignleft&amp;parent_id='.$post-&gt;ID);  \n?&gt;\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-get-post-image.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "attachments": "attachments",
        "function": "function",
        "images": "images",
        "post-image": "post image",
        "template-tag": "template tag"
    },
    "stable_tag": "trunk",
    "versions": {
        "0.1": "https://downloads.wordpress.org/plugin/wp-get-post-image.0.1.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://michaelwender.com",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/wp-get-post-image.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}