{
    "name": "Calculated fields for ACF",
    "slug": "calculated-fields-for-acf",
    "version": "1.3.2",
    "author": "<a href=\"https://wundermatics.com\">Wundermatics</a>",
    "author_profile": "https://profiles.wordpress.org/wundermatics/",
    "contributors": {
        "wundermatics": {
            "profile": "https://profiles.wordpress.org/wundermatics/",
            "avatar": "https://secure.gravatar.com/avatar/b86919e21f4cc0dd65eb3fce038f023d?s=96&d=monsterid&r=g",
            "display_name": "wundermatics"
        },
        "nick6352683": {
            "profile": "https://profiles.wordpress.org/nick6352683/",
            "avatar": "https://secure.gravatar.com/avatar/91e8faddd8ea5b552e8f98ac0f15c575?s=96&d=monsterid&r=g",
            "display_name": "nick6352683"
        }
    },
    "requires": "4.7",
    "tested": "5.9.10",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 86,
    "ratings": {
        "5": 9,
        "4": 2,
        "3": 0,
        "2": 1,
        "1": 1
    },
    "num_ratings": 13,
    "support_url": "https://wordpress.org/support/plugin/calculated-fields-for-acf/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 1000,
    "downloaded": 17208,
    "last_updated": "2022-02-02 15:30:00",
    "added": "2019-12-05",
    "homepage": "https://www.wundermatics.com/product/calculated-fields-for-acf",
    "sections": {
        "description": "<p>Adds a formula fields ot Advanced Custom Fields that allows you to perform simple math based on field values. Calculations are updated dynamically via ajax while editing a post on the backend post editor as well as on front end forms.</p>\n<h3>Requirements</h3>\n<p>Calculated fields requires Advanced Custom Fields 5.0 or later and works with Pro as well as the standard version.</p>\n<h3>Frontend forms</h3>\n<p>Beginning in version 1.2.3, Calculated fields for ACF supports frontend forms created using the acf_form() function (built in to Advanced Custom Fields).</p>\n<h4>Formulas</h4>\n<p>Calculated fields adds a new setting &#8220;Formula&#8221; to the the ACF field editor. Formulas supports referring to other fields in the same Field group using the field name. If a formula is added to a sub field inside a repeater field, the name refers to another sub field in the same repeater.</p>\n<p>A sub field inside a repeater field can also refer to a parent field using the &#8220;parent.&#8221;&#8221; prefix.</p>\n<p>A formula can contain the basic mathematical operations: plus (+), minus (-), multiply (*), division (/) and power of (^). Formulas can also contains functions like sin, cos, arcsin, log, ln, sqrt, abs. Parentheses are supported.</p>\n<p>If an expression can&#8217;t be evaluated due to invalid syntax or referring to undefined field names, it will silently return zero.</p>\n<p>Examples of valid expressions (note, no equal sign at the beginning):</p>\n<ul>\n<li>fieldA * 2</li>\n<li>fieldA * fieldB</li>\n<li>abs(fieldA) * (2 + sqrt(fieldB))</li>\n<li>amount * parent.price</li>\n</ul>\n<h4>Conditional operators</h4>\n<p>An expression can also contain a conditional expression that will return either 0 or 1. The supported operators are:</p>\n<ul>\n<li>Equals (==) &#8211; Returns 1 when two values are equal, 0 otherwise</li>\n<li>Not equals (!=) &#8211; Returns 1 when two values are not equal, 0 otherwise</li>\n<li>Greater than (&gt;) &#8211; Returns 1 when the first operand is greater than the second, 0 otherwise</li>\n<li>Greater than or equal (&gt;=) &#8211; Returns 1 when the first operand is greater than or equal to the second, 0 otherwise</li>\n<li>Less than (&lt;) &#8211; Returns 1 when the first operand is less than the second, 0 otherwise</li>\n<li>Less than or equal (&lt;=) &#8211; Returns 1 when the first operand is less than or equal to the second, 0 otherwise</li>\n</ul>\n<p>Examples of valid expressions using conditional operators:</p>\n<ul>\n<li>10 == 10 (returns 1)</li>\n<li>10 == 2 (returns 0)</li>\n<li>10 &gt; 2 (returns 1)</li>\n<li>10 &lt; 2 (returns 0)</li>\n<li>10 &lt;= 10 (returns 1)</li>\n</ul>\n<h4>Rounding functions</h4>\n<p>Round a decimal value to the nearest integer. Supported functions are:</p>\n<ul>\n<li>round() &#8211; Uses standard mathematical rounding rules to round to nearest integer</li>\n<li>ceil() &#8211; Rounds the value to the next higher integer</li>\n<li>floor() &#8211; Rounds the value to the next lower integer</li>\n</ul>\n<p>Examples of valid expressions using rounding functions:</p>\n<ul>\n<li>round(10.2) (returns 10)</li>\n<li>round(10.9)  (returns 11)</li>\n<li>round(10.888888 * 10) / 10 (returns 10.9)</li>\n<li>ceil(10.2) (returns 11)</li>\n<li>floor(10.2) (returns 10)</li>\n</ul>\n<p>Note that the round() function only takes one parameter and always round to an integer. If you need to round to a higher precision, multiply and divide as shown in third example above.</p>\n<h4>Group fields (new from 1.2.4)</h4>\n<p>Fields defined as part of a group, subfields, can be addressed using the group name as a prefix. Inside the group, a field defined on the parent level can be addressed using the &#8220;parent&#8221; prefix. See examples below:</p>\n<p>Valid formula to use the value of field &#8220;foobar&#8221; defined inside the group &#8220;group2&#8221;:<br />\n* group2.foobar + 10</p>\n<p>Valid formula in a field inside a group (assuming the parent has a field named count):<br />\n* parent.count * 22</p>\n<h4>Array functions for repeater fields</h4>\n<p>If repeater fields are used, a calculated field in the parent field group can summarize a specific repeater sub fields using the aggregation functions sum, count, average, min or max. For example, the expression: &#8220;Sum(orderlines.amount)&#8221;&#8221; will return the sum of all the &#8220;amount&#8221; fields in the repeater field &#8220;orderlines&#8221;.</p>\n<p>The available array functions are:</p>\n<ul>\n<li>sum()</li>\n<li>average()</li>\n<li>count()</li>\n<li>min()</li>\n<li>max()</li>\n</ul>\n<p>Note that anything after the dot (.) in the aggregate expression is an expression in itself. It&#8217;s perfectly OK to write a formula like: &#8220;Sum(orderlines.price * amount)&#8221;. This expression will walk over all lines in the &#8220;orderlines&#8221; repeater field, perform the calculation &#8220;price * amount&#8221; and return the sum of all lines.</p>\n<p>Note that when working with aggregate functions, parentheses can not be used. If you need to aggregate a more complex calculation, you should add an extra field in the repeater group and let the aggregate function work on this extra field.</p>\n<h4>Data type and calculation order</h4>\n<p>Calculated fields works with the assumption that all fields are defined as numeric in the ACF editor. Using a text field in a formula WILL PRODUCE UNPREDICTABLE RESULTS.</p>\n<p>Calculations are made as the custom field is stored to the database. To minimize the impact of performance, Calculated fields rely on field order. A formula field can only refer to fields ordered BEFORE itself. A formula field that refers to a field ordered after it WILL PRODUCE UNPREDICTABLE RESULTS.</p>\n",
        "installation": "<h4>Minimum requirements</h4>\n<ul>\n<li>PHP 7.3 or newer</li>\n</ul>\n<p>Calculated fields will for ACF run on PHP 5.6 or newer, but we highly recommend following the official <a href=\"https://wordpress.org/about/requirements/\" rel=\"ugc\">WordPress guidelines</a> that currently recommends PHP 7.3.</p>\n<h4>Install from within WordPress</h4>\n<ul>\n<li>Visit the plugins page within your dashboard and select ‘Add New’</li>\n<li>Search for ‘Calculated Fields for ACF’</li>\n<li>Click &#8216;Install&#8217; and wait until the button caption changes to &#8216;Activate&#8217;</li>\n<li>Click &#8216;Activate&#8217;</li>\n</ul>\n<h4>Install manually</h4>\n<ul>\n<li>Download the zip file</li>\n<li>Upload the calculated-fields-for-acf folder from the zip to the /wp-content/plugins/ directory on your server</li>\n<li>Navigate to the Plugins page in WordPress admin and locate the plugin<br />\nClick &#8216;Activate&#8217;</li>\n</ul>\n",
        "changelog": "<h4>1.3.2</h4>\n<ul>\n<li>Fix Improves input sanitation and output escaping</li>\n</ul>\n<h4>1.3.0</h4>\n<ul>\n<li>Feature: Support for formatting numeric output using PHP sprintf syntax</li>\n<li>Feature: Optionally let formula return empty string instead of zero</li>\n<li>Fix &#8220;empty needle&#8221; bug that emits PHP warning messages to the error log in certain field groups</li>\n</ul>\n<h4>1.2.4</h4>\n<ul>\n<li>Fixes problem with calculations of fields inside a group</li>\n</ul>\n<h4>1.2.3</h4>\n<ul>\n<li>Fixes problem with calculations not working in front end forms created with acf_form()</li>\n</ul>\n<h4>1.2.2</h4>\n<ul>\n<li>Fixes issue with operator == always returning false</li>\n</ul>\n<h4>1.2.1</h4>\n<ul>\n<li>Adds support for conditional operators &gt;=, &lt;=</li>\n</ul>\n<h4>1.2.0</h4>\n<ul>\n<li>Adds support for conditional operators ==, !=, &gt; and &lt;</li>\n<li>Adds support for rounding functions floor, ceil and round</li>\n</ul>\n<h4>1.1.3</h4>\n<ul>\n<li>Fixes issue with ajax recalculation not triggered by removing a row from a repeater field</li>\n<li>Fixes issue with ajax recalculation not triggered by changing a dropdown/select field</li>\n<li>Fixes multiple issues related to ACF Blocks. Should work as expected now, but we&#8217;re considering support for ACF blocks &#8220;beta&#8221; for now</li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Fixes typo in javascript file that causes more ajax recalculations that needed</li>\n<li>Fixes issue with some PHP versions and empty object keys (https://bugs.php.net/bug.php?id=46600)</li>\n<li>Fixes issue with ACF enumerating rows using alphanumeric keys in some cases (older versions)</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Adds in-edit recalculations. Calculated fields are updated while still in edit mode</li>\n<li>Adds read only option. All fields can be set as read only in the ACF field editor (not just calculated fields)</li>\n<li>Adds parent. prefix for formulas in sub fields in a repeater field.</li>\n</ul>\n<h4>1.0.1</h4>\n<ul>\n<li>Fixes issue with complex custom fields types that can&#8217;t be converted to string/numeric</li>\n</ul>\n"
    },
    "short_description": "Simple field math for Advanced Custom Fields.",
    "description": "<p>Adds a formula fields ot Advanced Custom Fields that allows you to perform simple math based on field values. Calculations are updated dynamically via ajax while editing a post on the backend post editor as well as on front end forms.</p>\n<h3>Requirements</h3>\n<p>Calculated fields requires Advanced Custom Fields 5.0 or later and works with Pro as well as the standard version.</p>\n<h3>Frontend forms</h3>\n<p>Beginning in version 1.2.3, Calculated fields for ACF supports frontend forms created using the acf_form() function (built in to Advanced Custom Fields).</p>\n<h4>Formulas</h4>\n<p>Calculated fields adds a new setting &#8220;Formula&#8221; to the the ACF field editor. Formulas supports referring to other fields in the same Field group using the field name. If a formula is added to a sub field inside a repeater field, the name refers to another sub field in the same repeater.</p>\n<p>A sub field inside a repeater field can also refer to a parent field using the &#8220;parent.&#8221;&#8221; prefix.</p>\n<p>A formula can contain the basic mathematical operations: plus (+), minus (-), multiply (*), division (/) and power of (^). Formulas can also contains functions like sin, cos, arcsin, log, ln, sqrt, abs. Parentheses are supported.</p>\n<p>If an expression can&#8217;t be evaluated due to invalid syntax or referring to undefined field names, it will silently return zero.</p>\n<p>Examples of valid expressions (note, no equal sign at the beginning):</p>\n<ul>\n<li>fieldA * 2</li>\n<li>fieldA * fieldB</li>\n<li>abs(fieldA) * (2 + sqrt(fieldB))</li>\n<li>amount * parent.price</li>\n</ul>\n<h4>Conditional operators</h4>\n<p>An expression can also contain a conditional expression that will return either 0 or 1. The supported operators are:</p>\n<ul>\n<li>Equals (==) &#8211; Returns 1 when two values are equal, 0 otherwise</li>\n<li>Not equals (!=) &#8211; Returns 1 when two values are not equal, 0 otherwise</li>\n<li>Greater than (&gt;) &#8211; Returns 1 when the first operand is greater than the second, 0 otherwise</li>\n<li>Greater than or equal (&gt;=) &#8211; Returns 1 when the first operand is greater than or equal to the second, 0 otherwise</li>\n<li>Less than (&lt;) &#8211; Returns 1 when the first operand is less than the second, 0 otherwise</li>\n<li>Less than or equal (&lt;=) &#8211; Returns 1 when the first operand is less than or equal to the second, 0 otherwise</li>\n</ul>\n<p>Examples of valid expressions using conditional operators:</p>\n<ul>\n<li>10 == 10 (returns 1)</li>\n<li>10 == 2 (returns 0)</li>\n<li>10 &gt; 2 (returns 1)</li>\n<li>10 &lt; 2 (returns 0)</li>\n<li>10 &lt;= 10 (returns 1)</li>\n</ul>\n<h4>Rounding functions</h4>\n<p>Round a decimal value to the nearest integer. Supported functions are:</p>\n<ul>\n<li>round() &#8211; Uses standard mathematical rounding rules to round to nearest integer</li>\n<li>ceil() &#8211; Rounds the value to the next higher integer</li>\n<li>floor() &#8211; Rounds the value to the next lower integer</li>\n</ul>\n<p>Examples of valid expressions using rounding functions:</p>\n<ul>\n<li>round(10.2) (returns 10)</li>\n<li>round(10.9)  (returns 11)</li>\n<li>round(10.888888 * 10) / 10 (returns 10.9)</li>\n<li>ceil(10.2) (returns 11)</li>\n<li>floor(10.2) (returns 10)</li>\n</ul>\n<p>Note that the round() function only takes one parameter and always round to an integer. If you need to round to a higher precision, multiply and divide as shown in third example above.</p>\n<h4>Group fields (new from 1.2.4)</h4>\n<p>Fields defined as part of a group, subfields, can be addressed using the group name as a prefix. Inside the group, a field defined on the parent level can be addressed using the &#8220;parent&#8221; prefix. See examples below:</p>\n<p>Valid formula to use the value of field &#8220;foobar&#8221; defined inside the group &#8220;group2&#8221;:<br />\n* group2.foobar + 10</p>\n<p>Valid formula in a field inside a group (assuming the parent has a field named count):<br />\n* parent.count * 22</p>\n<h4>Array functions for repeater fields</h4>\n<p>If repeater fields are used, a calculated field in the parent field group can summarize a specific repeater sub fields using the aggregation functions sum, count, average, min or max. For example, the expression: &#8220;Sum(orderlines.amount)&#8221;&#8221; will return the sum of all the &#8220;amount&#8221; fields in the repeater field &#8220;orderlines&#8221;.</p>\n<p>The available array functions are:</p>\n<ul>\n<li>sum()</li>\n<li>average()</li>\n<li>count()</li>\n<li>min()</li>\n<li>max()</li>\n</ul>\n<p>Note that anything after the dot (.) in the aggregate expression is an expression in itself. It&#8217;s perfectly OK to write a formula like: &#8220;Sum(orderlines.price * amount)&#8221;. This expression will walk over all lines in the &#8220;orderlines&#8221; repeater field, perform the calculation &#8220;price * amount&#8221; and return the sum of all lines.</p>\n<p>Note that when working with aggregate functions, parentheses can not be used. If you need to aggregate a more complex calculation, you should add an extra field in the repeater group and let the aggregate function work on this extra field.</p>\n<h4>Data type and calculation order</h4>\n<p>Calculated fields works with the assumption that all fields are defined as numeric in the ACF editor. Using a text field in a formula WILL PRODUCE UNPREDICTABLE RESULTS.</p>\n<p>Calculations are made as the custom field is stored to the database. To minimize the impact of performance, Calculated fields rely on field order. A formula field can only refer to fields ordered BEFORE itself. A formula field that refers to a field ordered after it WILL PRODUCE UNPREDICTABLE RESULTS.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.3.2.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/calculated-fields-for-acf/assets/screenshot-1.png?rev=2208024",
            "caption": ""
        },
        {
            "src": "https://ps.w.org/calculated-fields-for-acf/assets/screenshot-2.png?rev=2208024",
            "caption": ""
        },
        {
            "src": "https://ps.w.org/calculated-fields-for-acf/assets/screenshot-3.png?rev=2208024",
            "caption": ""
        }
    ],
    "tags": {
        "acf": "acf",
        "admin": "admin"
    },
    "stable_tag": "1.3.2",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.0.1.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.1.1.zip",
        "1.1.3": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.1.3.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.2.1.zip",
        "1.2.2": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.2.2.zip",
        "1.2.3": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.2.3.zip",
        "1.2.4": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.2.4.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.3.0.zip",
        "1.3.1": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.3.1.zip",
        "1.3.2": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.1.3.2.zip",
        "trunk": "https://downloads.wordpress.org/plugin/calculated-fields-for-acf.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/calculated-fields-for-acf/assets/icon-256x256.png?rev=2206639",
        "2x": "https://ps.w.org/calculated-fields-for-acf/assets/icon-256x256.png?rev=2206639"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 86,
    "blueprints": [],
    "preview_link": "",
    "language_packs": [
        {
            "type": "plugin",
            "slug": "calculated-fields-for-acf",
            "language": "nl_NL",
            "version": "1.3.2",
            "updated": "2022-03-19 15:43:03",
            "package": "https://downloads.wordpress.org/translation/plugin/calculated-fields-for-acf/1.3.2/nl_NL.zip"
        }
    ]
}