{
    "name": "AJAX Manufactory",
    "slug": "ajax-manufactory",
    "version": "1.7.11",
    "author": "<a href=\"http://e-wm.org/\">Epsilon Web Manufactory</a>",
    "author_profile": "https://profiles.wordpress.org/epsiloncool/",
    "contributors": {
        "epsiloncool": {
            "profile": "https://profiles.wordpress.org/epsiloncool/",
            "avatar": "https://secure.gravatar.com/avatar/45d6983a995a614236a2b923417d3761?s=96&d=monsterid&r=g",
            "display_name": "Epsiloncool"
        }
    },
    "requires": "3.0.1",
    "tested": "5.2.21",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 5,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 5,
    "support_url": "https://wordpress.org/support/plugin/ajax-manufactory/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 200,
    "downloaded": 3933,
    "last_updated": "2019-06-28 00:19:00",
    "added": "2015-09-07",
    "homepage": "http://e-wm.org/ajax-manufactory/",
    "sections": {
        "description": "<p>Whenever you plan to begin developing applications on WordPress using AJAX technology, you have to solve a number of<br />\nminor issues unrelated to the logic of your application:</p>\n<ul>\n<li>How to package and transmit data from the browser to the server, so they will not have been distorted?</li>\n<li>How to transfer data, if they are multi-dimensional array?</li>\n<li>How to implement a custom processing of AJAX response in case, again, it represents a complex set of data (a typical<br />\nexample &#8211; form sending and on-server validation)?</li>\n<li>How to handle data transition errors?</li>\n<li>How to debug all this stuff?</li>\n</ul>\n<p>Usually these issues generates a lot of spaghetti code, moreover, each new request type requires some customization of<br />\ncode. Managing all of this, you forget about the function that you would like to implement.</p>\n<p>AJAX Manufactory plugin for WordPress have most of these tasks already solved. You can think about functionality and<br />\nbusiness logic instead.</p>\n<p>What you can have from the box:</p>\n<ul>\n<li>A simple function at the client side which allows to send any your complex data from javascript to WordPress server<br />\nside.</li>\n<li>An AJAX response wrapper at the server side which gives to you sent data as PHP array and allows you to create<br />\nan AJAX response as a set of simple &#8220;commands&#8221; like &#8220;make an alert&#8221;, &#8220;set up javascript variable&#8221;, &#8220;put html text to<br />\nspecific html node(s)&#8221;, &#8220;execute a javascript function&#8221;, &#8220;go to specific URL&#8221; etc.</li>\n<li>Automatic execution of &#8220;commands&#8221; queue at the client side. Additionally you can specify your own callback.</li>\n</ul>\n<h4>Documentation</h4>\n<p>Please refer <a href=\"http://e-wm.org/ajax-manufactory/#documentation\" title=\"AJAX Manufactory Documentation\" rel=\"nofollow ugc\">Documentation</a>.</p>\n",
        "installation": "<ol>\n<li>Unpack and upload <code>ajax-manufactory</code> folder with all files to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n</ol>\n",
        "faq": "\n<h4>Where can I put some notices, comments or bugreports?</h4>\n<p>\n<p>Do not hesistate to write to us at <a href=\"http://e-wm.org/contact/\" title=\"Contact Us\" rel=\"nofollow ugc\">Contact Us</a> page.</p>\n</p>\n\n",
        "changelog": "<h4>1.7.11</h4>\n<ul>\n<li>Changed name back (it was prohibited)</li>\n</ul>\n<h4>1.7.10</h4>\n<ul>\n<li>Changed name</li>\n<li>Lots of fixes planned</li>\n</ul>\n<h4>1.6.5</h4>\n<ul>\n<li>Fixed logos</li>\n</ul>\n<h4>1.6.4</h4>\n<ul>\n<li>Fixed a bug with &#8216;data&#8217; parameter of jxAction() function (it become optional)</li>\n</ul>\n<h4>1.6.3</h4>\n<ul>\n<li>Added new method variables() to set bunch of variables simultaneously</li>\n<li>Added new method trigger() to trigger jQuery event on the client side (with parameters)</li>\n</ul>\n<h4>1.6.2</h4>\n<ul>\n<li>Added named global triggers to track AJAX activity: jx_start_, jx_success_, jx_finish_, jx_error_</li>\n</ul>\n<h4>1.6.1</h4>\n<ul>\n<li>Fix for WP 4.8.1 compatibility</li>\n</ul>\n<h4>1.6</h4>\n<ul>\n<li>Added global triggers (at document level) to track AJAX activity: jx_start, jx_finish, jx_success, jx_error</li>\n</ul>\n<h4>1.5.2.6</h4>\n<ul>\n<li>Fixed data collection from forms by jxFormData() method. Especially for checkbox lists and radio lists.</li>\n</ul>\n<h4>1.5.2.4</h4>\n<ul>\n<li>New method call() was added. Read doc for details.</li>\n</ul>\n<h4>1.5.2.3</h4>\n<ul>\n<li>Added new flag &#8220;has_priv&#8221; in JX class</li>\n</ul>\n<h4>1.5.2.1</h4>\n<ul>\n<li>Fixed version number in core file</li>\n</ul>\n<h4>1.5.1.1</h4>\n<ul>\n<li>Now working at admin side too</li>\n</ul>\n<h4>1.5.0.1</h4>\n<ul>\n<li>Some security bugs was fixed.</li>\n</ul>\n<h4>1.5</h4>\n<ul>\n<li>console() method added</li>\n<li>redirect() method has been fixed</li>\n<li>javascript module completely redone.</li>\n</ul>\n<h4>1.1</h4>\n<ul>\n<li>Full Documentation has been added</li>\n<li>variable() method added</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>First WordPress version</li>\n</ul>\n<h4>0.4</h4>\n<ul>\n<li>html(), redirect(), reload() methods were added.</li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial edition. Only conception is implemented with alert() method on-board.</li>\n</ul>\n"
    },
    "short_description": "This plugin allows you to create AJAX applications by simple way. It implements JSON data transfer, data escaping, error handling.",
    "description": "<p>Whenever you plan to begin developing applications on WordPress using AJAX technology, you have to solve a number of<br />\nminor issues unrelated to the logic of your application:</p>\n<ul>\n<li>How to package and transmit data from the browser to the server, so they will not have been distorted?</li>\n<li>How to transfer data, if they are multi-dimensional array?</li>\n<li>How to implement a custom processing of AJAX response in case, again, it represents a complex set of data (a typical<br />\nexample &#8211; form sending and on-server validation)?</li>\n<li>How to handle data transition errors?</li>\n<li>How to debug all this stuff?</li>\n</ul>\n<p>Usually these issues generates a lot of spaghetti code, moreover, each new request type requires some customization of<br />\ncode. Managing all of this, you forget about the function that you would like to implement.</p>\n<p>AJAX Manufactory plugin for WordPress have most of these tasks already solved. You can think about functionality and<br />\nbusiness logic instead.</p>\n<p>What you can have from the box:</p>\n<ul>\n<li>A simple function at the client side which allows to send any your complex data from javascript to WordPress server<br />\nside.</li>\n<li>An AJAX response wrapper at the server side which gives to you sent data as PHP array and allows you to create<br />\nan AJAX response as a set of simple &#8220;commands&#8221; like &#8220;make an alert&#8221;, &#8220;set up javascript variable&#8221;, &#8220;put html text to<br />\nspecific html node(s)&#8221;, &#8220;execute a javascript function&#8221;, &#8220;go to specific URL&#8221; etc.</li>\n<li>Automatic execution of &#8220;commands&#8221; queue at the client side. Additionally you can specify your own callback.</li>\n</ul>\n<h4>Documentation</h4>\n<p>Please refer <a href=\"http://e-wm.org/ajax-manufactory/#documentation\" title=\"AJAX Manufactory Documentation\" rel=\"nofollow ugc\">Documentation</a>.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/ajax-manufactory.zip",
    "upgrade_notice": {
        "1.5.0.1": "<ul>\n<li>Upgrade immediately, because of some security issues found and fixed</li>\n</ul>",
        "1.5": "<ul>\n<li>First version to be in Wordpress repository, just install it</li>\n</ul>"
    },
    "screenshots": [],
    "tags": {
        "ajax": "ajax",
        "client-side": "client side",
        "request": "request",
        "server-side": "server side",
        "xmlrequest": "xmlrequest"
    },
    "stable_tag": "trunk",
    "versions": {
        "1.5.0.1": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.0.1.zip",
        "1.5.1.1": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.1.1.zip",
        "1.5.2.1": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.1.zip",
        "1.5.2.3": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.3.zip",
        "1.5.2.4": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.4.zip",
        "1.5.2.5": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.5.zip",
        "1.5.2.6": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.6.zip",
        "1.5.2.7": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.5.2.7.zip",
        "1.6": "https://downloads.wordpress.org/plugin/ajax-manufactory.1.6.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://e-wm.org/",
    "banners": {
        "low": "https://ps.w.org/ajax-manufactory/assets/banner-772x250.png?rev=1737606",
        "high": false
    },
    "icons": {
        "1x": "https://ps.w.org/ajax-manufactory/assets/icon-256x256.png?rev=1737606",
        "2x": "https://ps.w.org/ajax-manufactory/assets/icon-256x256.png?rev=1737606"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}