{
    "name": "Cookie Tasting",
    "slug": "cookie-tasting",
    "version": "1.0.11",
    "author": "<a href=\"https://tarosky.co.jp\">Tarosky INC.</a>",
    "author_profile": "https://profiles.wordpress.org/tarosky/",
    "contributors": {
        "tarosky": {
            "profile": "https://profiles.wordpress.org/tarosky/",
            "avatar": "https://secure.gravatar.com/avatar/86f9cbced2e75d2a1458983a45754e17?s=96&d=monsterid&r=g",
            "display_name": "TAROSKY INC."
        },
        "takahashi_fumiki": {
            "profile": "https://profiles.wordpress.org/takahashi_fumiki/",
            "avatar": "https://secure.gravatar.com/avatar/e2340d831c2606e3b36661750ce0fd2c?s=96&d=monsterid&r=g",
            "display_name": "Takahashi Fumiki"
        }
    },
    "requires": "5.0",
    "tested": "5.5.15",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 1,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/cookie-tasting/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1549,
    "last_updated": "2020-10-27 03:03:00",
    "added": "2019-03-14",
    "homepage": "https://wordpress.org/plugins/cookie-tasting/",
    "sections": {
        "description": "<p>This plugin sets user cookie when user is logged in.<br />\nYou can use cookie as data store,<br />\nso you can use it as UI resource.</p>\n<h4>Visibility</h4>\n<p>This plugin adds class to <code>html</code> element.</p>\n<ul>\n<li><code>ct-logged-in</code> The current user is logged in.</li>\n<li><code>ct-not-logged-in</code> The current user is anonymous.</li>\n</ul>\n<p>You can control elements visibility with CSS.</p>\n<pre>.some-element{\n  display: none;\n}\n.ct-logged-in .some-element{\n  display: block;\n}</pre>\n<h4>From JavaScript</h4>\n<p>You can use Global Object <code>CookieTasting</code> for utility.</p>\n<ul>\n<li><code>CookieTasting.userName()</code> Returns user name. If not logged in, returns &#8216;Guest&#8217;.</li>\n<li><code>CookieTasting.lastUpdated()</code> Returns timestamp of last log in check. If this equals 0, it means that user is anonymous.</li>\n</ul>\n<p>Besides that, this plugin checks periodically log-in status.<br />\nYou can handle it with jQuery.</p>\n<pre>jQuery( document ).on( 'cookie.tasting', function( event, response ) {\n  if ( response.login ) {\n    // User is logged in.\n    // If you use React...\n    setAttributes({ name: CookieTasting.userName() })\n  } else {\n    // User is not logged in.\n  }\n} );</pre>\n<p>If you use react or something, updated the status with <code>setState()</code>.</p>\n<h4>Check Before Action</h4>\n<p>If you manage cached WordPress and customizing your own theme,<br />\nIt&#8217;s a good idea to implement dynamic UI components with JavaScript.</p>\n<p>You can check user&#8217;s credential just before important actions.</p>\n<pre>// Click action for button.\n$('.read-more').click( function( e ) {\n  e.preventDefault();\n  // Check cookie before do something.\n  CookieTasting.testBefore().then( function( response ) {\n    // Now user has fresh information.\n    // Load premium contents.\n    loadPremiumContents();\n  }).catch( function( response ) {\n    // This user is not logged in.\n    // Redirect them to login page.\n    window.locaion.href = '/wp-login.php';\n  } );\n} );</pre>\n<p>Plese remember adding dependency for <code>cookie-tasting-heartbeat</code> to your script.</p>\n<h4>Handle UUID</h4>\n<p>By default, this plugin set UUID for each user. This will be&#8230;</p>\n<ul>\n<li>Unique for each logged in user and will be saved as user_meta.</li>\n<li>Also kept for anonymous user.</li>\n</ul>\n<p>So you can use it for Google Analytic&#8217;s <a href=\"https://support.google.com/analytics/answer/3123662\" rel=\"nofollow ugc\">User ID View</a>.</p>\n<pre>const uuid = CookieTasting.get( 'uuid' );\n// For Google Analytics.\nga( 'set', \"userId\", uid );</pre>\n",
        "installation": "<ul>\n<li>Download zip file and unpack it.</li>\n<li>Upload the directory to <code>wp-content/plugins</code>.</li>\n<li>Go to WordPress admin screen and activate this plugin.</li>\n</ul>\n<p><strong>Recommendation:</strong> Search on WordPress admin screen and install it.</p>\n",
        "faq": "\n<h4>\nHow to Contribute\n</h4>\n<p>\n<p>This plugin is hosted on <a href=\"https://github.com/tarosky/cookie-tasting\" rel=\"nofollow ugc\">Github</a>.<br />\nPlease feel free to make issue or send pull requests.</p>\n</p>\n\n",
        "changelog": "<h4>1.0.11</h4>\n<ul>\n<li>Display <code>console.log</code> only if <code>SCRIPT_DEBUG</code> is true.</li>\n</ul>\n<h4>1.0.10</h4>\n<ul>\n<li>Bugfix: Add polyfil for <code>Object.assign</code> in favor of lte IE11.<br />\n(Props <a href=\"https://github.com/kamataryo\" rel=\"nofollow ugc\">@Kamata Ryo</a>).</li>\n</ul>\n<h4>1.0.9</h4>\n<ul>\n<li>Bugfix nonce refreshing for cached page.</li>\n</ul>\n<h4>1.0.8</h4>\n<ul>\n<li>Add filter for Cookie check API. Now you can change error message.</li>\n</ul>\n<h4>1.0.7</h4>\n<ul>\n<li>Fix UUID logic.</li>\n<li>Add automatic refresh for rewrite rules.</li>\n</ul>\n<h4>1.0.6</h4>\n<ul>\n<li>Fix SSL bug.</li>\n</ul>\n<h4>1.0.5</h4>\n<ul>\n<li>Fix fatal error. <code>vendor</code> directory was missing.</li>\n</ul>\n<h4>1.0.4</h4>\n<ul>\n<li>Update nonce for <a href=\"https://wordpress.org/gutenberg/handbook/designers-developers/developers/packages/packages-api-fetch/\" rel=\"ugc\">@wordpress/wp-api-featch</a> and <code>wpApiSettings</code> of <a href=\"https://developer.wordpress.org/rest-api/using-the-rest-api/backbone-javascript-client/\" rel=\"nofollow ugc\">wp-api</a>.</li>\n<li>Change REST API endpoit because it requires COOKIES properly set. The endpoint <code>wp-json/cookie/v1/nonce</code> is pseudo and it&#8217;s not REST API actually, so you can refresh nonce with this endpoint. Normally, this refresh will be executed automatically, but if you get &#8220;rest_cookie_invalid_nonce&#8221;, try updating permalink from &#8220;Setting &gt; Permalink&#8221;. Just click &#8220;Save&#8221; and that&#8217;s it.</li>\n<li>UUID will be set for current user. It&#8217;s userful for tracking.</li>\n</ul>\n<h4>1.0.3</h4>\n<ul>\n<li>Add filter to cookie detection API.</li>\n</ul>\n<h4>1.0.2</h4>\n<ul>\n<li>Bugfix: if home url is not SSL, cookie <code>$secure</code> flag is now false.<br />\nBut we sincerely recommend protecting your site under SSL.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "Detect user login only with cookie. The best helper for cached WordPress sites.",
    "description": "<p>This plugin sets user cookie when user is logged in.<br />\nYou can use cookie as data store,<br />\nso you can use it as UI resource.</p>\n<h4>Visibility</h4>\n<p>This plugin adds class to <code>html</code> element.</p>\n<ul>\n<li><code>ct-logged-in</code> The current user is logged in.</li>\n<li><code>ct-not-logged-in</code> The current user is anonymous.</li>\n</ul>\n<p>You can control elements visibility with CSS.</p>\n<pre>.some-element{\n  display: none;\n}\n.ct-logged-in .some-element{\n  display: block;\n}</pre>\n<h4>From JavaScript</h4>\n<p>You can use Global Object <code>CookieTasting</code> for utility.</p>\n<ul>\n<li><code>CookieTasting.userName()</code> Returns user name. If not logged in, returns &#8216;Guest&#8217;.</li>\n<li><code>CookieTasting.lastUpdated()</code> Returns timestamp of last log in check. If this equals 0, it means that user is anonymous.</li>\n</ul>\n<p>Besides that, this plugin checks periodically log-in status.<br />\nYou can handle it with jQuery.</p>\n<pre>jQuery( document ).on( 'cookie.tasting', function( event, response ) {\n  if ( response.login ) {\n    // User is logged in.\n    // If you use React...\n    setAttributes({ name: CookieTasting.userName() })\n  } else {\n    // User is not logged in.\n  }\n} );</pre>\n<p>If you use react or something, updated the status with <code>setState()</code>.</p>\n<h4>Check Before Action</h4>\n<p>If you manage cached WordPress and customizing your own theme,<br />\nIt&#8217;s a good idea to implement dynamic UI components with JavaScript.</p>\n<p>You can check user&#8217;s credential just before important actions.</p>\n<pre>// Click action for button.\n$('.read-more').click( function( e ) {\n  e.preventDefault();\n  // Check cookie before do something.\n  CookieTasting.testBefore().then( function( response ) {\n    // Now user has fresh information.\n    // Load premium contents.\n    loadPremiumContents();\n  }).catch( function( response ) {\n    // This user is not logged in.\n    // Redirect them to login page.\n    window.locaion.href = '/wp-login.php';\n  } );\n} );</pre>\n<p>Plese remember adding dependency for <code>cookie-tasting-heartbeat</code> to your script.</p>\n<h4>Handle UUID</h4>\n<p>By default, this plugin set UUID for each user. This will be&#8230;</p>\n<ul>\n<li>Unique for each logged in user and will be saved as user_meta.</li>\n<li>Also kept for anonymous user.</li>\n</ul>\n<p>So you can use it for Google Analytic&#8217;s <a href=\"https://support.google.com/analytics/answer/3123662\" rel=\"nofollow ugc\">User ID View</a>.</p>\n<pre>const uuid = CookieTasting.get( 'uuid' );\n// For Google Analytics.\nga( 'set', \"userId\", uid );</pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.11.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "cache": "cache",
        "cookie": "cookie",
        "membership": "membership"
    },
    "stable_tag": "1.0.11",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.1.zip",
        "1.0.10": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.10.zip",
        "1.0.11": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.11.zip",
        "1.0.2": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.2.zip",
        "1.0.3": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.3.zip",
        "1.0.4": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.4.zip",
        "1.0.5": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.5.zip",
        "1.0.6": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.6.zip",
        "1.0.7": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.7.zip",
        "1.0.8": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.8.zip",
        "1.0.9": "https://downloads.wordpress.org/plugin/cookie-tasting.1.0.9.zip",
        "trunk": "https://downloads.wordpress.org/plugin/cookie-tasting.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/cookie-tasting/assets/banner-772x250.jpg?rev=2050214",
        "high": "https://ps.w.org/cookie-tasting/assets/banner-1544x500.jpg?rev=2072383"
    },
    "icons": {
        "1x": "https://ps.w.org/cookie-tasting/assets/icon-128x128.jpg?rev=2050214",
        "2x": "https://ps.w.org/cookie-tasting/assets/icon-256x256.jpg?rev=2050214"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": [
        {
            "type": "plugin",
            "slug": "cookie-tasting",
            "language": "ja",
            "version": "1.0.8",
            "updated": "2019-04-12 03:46:45",
            "package": "http://downloads.wordpress.org/translation/plugin/cookie-tasting/1.0.8/ja.zip"
        }
    ]
}