{
    "name": "Ten&amp;Two XSLT Processor",
    "slug": "tenandtwo-xslt-processor",
    "version": "1.0.6",
    "author": "<a href=\"https://plugins.tenandtwo.com/\">Ten & Two Systems</a>",
    "author_profile": "https://profiles.wordpress.org/tenandtwo/",
    "contributors": {
        "tenandtwo": {
            "profile": "https://profiles.wordpress.org/tenandtwo/",
            "avatar": "https://secure.gravatar.com/avatar/1e932c777da2f8b617067d3a1735c4cc?s=96&d=monsterid&r=g",
            "display_name": "Ken McCabe"
        }
    },
    "requires": "5.2",
    "tested": "6.5.5",
    "requires_php": "7.4",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/tenandtwo-xslt-processor/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 699,
    "last_updated": "2024-06-05 21:42:00",
    "added": "2024-03-06",
    "homepage": "https://wordpress.org/plugins/tenandtwo-xslt-processor/",
    "sections": {
        "description": "<p>The Ten&amp;Two XSLT Processor plugin brings the power of PHP&#8217;s XSL extension to WordPress.  Once enabled, the plugin creates three (3) shortcodes &#8211; <code>[xslt_transform_xml/]</code>, <code>[xslt_select_xml/]</code>, and <code>[xslt_select_csv/]</code> &#8211; which can be used separately or in tandem to enrich your site with content from XML and CSV sources.  The plugin also enables two (2) custom post types &#8211; <code>XSL Stylesheets</code> and <code>XML Documents</code> &#8211; for managing and validating sources within WP Admin.</p>\n<p>Detailed documentation and sample code can be found at https://plugins.tenandtwo.com/</p>\n<h3>Custom Post Types</h3>\n<p>The XSLT Processor plugin provides two (2) custom post types for managing sources within WordPress &#8211; <code>XSL Stylesheets</code> and <code>XML Documents</code>.  Both types include basic syntax validation.  XML Documents can be validated further using DTD, XSD, or RNG.  Both types are enabled in Settings &gt; XSLT Processor &gt; Activate Content Types.</p>\n<h3>Shortcode : [xslt_transform_xml/]</h3>\n<p>[xslt_transform_xml/] is the plugin&#8217;s primary function.  This shortcode processes XML data using an XSL stylesheet, and then outputs the result as HTML, more XML, or as simple TEXT.</p>\n<ul>\n<li><code>[xslt_transform_xml xsl=\"{file|url|id|slug}\" xml=\"{file|url|id|slug}\" /]</code></li>\n<li><code>[xslt_transform_xml xsl=\"{file|url|id|slug}\"]&lt;DATA&gt;...&lt;/DATA&gt;[/xslt_transform_xml]</code></li>\n</ul>\n<p>If either the <code>xsl</code> or <code>xml</code> parameter is left unspecified, defaults are used.  The default XML value is <code>&lt;NODATA/&gt;</code>.  The default XSL stylesheet prints all of the incoming data as HTML.  If extra attributes are specified in the shortcode &#8211; eg, <code>mykey=\"myval\"</code> &#8211; those keys/values are passed along as parameters to the stylesheet &#8211; <code>&lt;xsl:param name=\"mykey\"/&gt;</code>.</p>\n<h3>Shortcode : [xslt_select_xml/]</h3>\n<p>[xslt_select_xml/] is a helper function.  It reads XML and returns a selection of the data, based on a supplied XPath expression.  There are two (2) options for specifying the XPath.  First, using the <code>select</code> attribute or, second, using the body of the shortcode.  Complex select statements with quotes, square brackets or other special syntax, should use the second pattern :</p>\n<ul>\n<li><code>[xslt_select_xml xml=\"{file|url|id|slug}\" select=\"{XPath}\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file|url|id|slug}\"]{XPath}[/xslt_select_xml]</code></li>\n</ul>\n<p>If the XPath select parameter is left unspecified, the default <code>/</code> is used, which returns the entire document.  The default output is <code>format=\"xml\"</code>.  If <code>format=\"json\"</code> is specified, the result is encoded as a JSON string.</p>\n<h3>Shortcode : [xslt_select_csv/]</h3>\n<p>[xslt_select_csv/] is a helper function for converting CSV file data to XML.  The result can be output directly as an HTML <code>&lt;table&gt;</code>, or the result can be passed to <code>[xslt_transform_xml/]</code> for further processing.</p>\n<ul>\n<li><code>[xslt_select_csv csv=\"{file|url}\" /]</code></li>\n<li><code>[xslt_select_csv]{csv,data}[/xslt_select_csv]</code></li>\n</ul>\n<p>Three (3) parameters &#8211; <code>separator</code>, <code>enclosure</code>, <code>escape</code> &#8211; control reading the input.  See PHP&#8217;s <code>fgetcsv()</code> function for details.</p>\n<ul>\n<li><code>[xslt_select_csv separator=\",\" enclosure=\"\\\"\" escape=\"\\\\\" /]</code></li>\n</ul>\n<p>Two (2) parameters &#8211; <code>key_row</code>, <code>col</code> &#8211; control writing columns to the output.  The <code>key_row</code> attribute is optional, but allows labels from that row to be used in <code>col</code> and <code>key_col</code>.</p>\n<ul>\n<li><code>[xslt_select_csv key_row=\"{num}\" col=\"{num|letter|label}+\" /]</code></li>\n</ul>\n<p>Three (3) parameters &#8211; <code>row</code>, <code>key_col</code>, <code>key</code> &#8211; control writing rows to the output.</p>\n<ul>\n<li><code>[xslt_select_csv row=\"{num}+\" /]</code></li>\n<li><code>[xslt_select_csv key_col=\"{num|letter|label}\" key=\"{val}+\" /]</code></li>\n</ul>\n<h3>Nested Shortcodes</h3>\n<p>Combine <code>[xslt_transform_xml]</code> with <code>[xslt_select_xml]</code> :</p>\n<ul>\n<li><code>[xslt_transform_xml][xslt_select_xml/][/xslt_transform_xml]</code></li>\n</ul>\n<p>Combine <code>[xslt_transform_xml]</code> with <code>[xslt_select_csv]</code> :</p>\n<ul>\n<li><code>[xslt_transform_xml][xslt_select_csv/][/xslt_transform_xml]</code></li>\n</ul>\n<p>Combine <code>[xslt_transform_xml]</code> with itself using <code>[/xslt_transform_alias]</code> (WP does not support nested shortcodes with identical names) :</p>\n<ul>\n<li><code>[xslt_transform_alias][xslt_transform_xml/][/xslt_transform_alias]</code></li>\n</ul>\n<p>Combine multiple shortcodes/sources to create a single <code>XML Document</code> (see Custom Post Types above) :</p>\n<ul>\n<li><code>&lt;DATA&gt;&lt;PART1&gt;[xslt_select_xml xml=\"f1.xml\" /]&lt;/PART1&gt;&lt;PART2&gt;[xslt_select_xml xml=\"f2.xml\" /]&lt;/PART2&gt;&lt;/DATA&gt;</code></li>\n</ul>\n<h3>Cache Parameters</h3>\n<p>When a shortcode specifies a remote file &#8211; <code>xml=\"{url}\"</code> or <code>csv=\"{url}\"</code> &#8211; that source is cached locally using WP Transients. The default cache duration is set in the XSLT Processor Settings.  To override the default, add <code>cache=\"{minutes}\"</code> to the shortcode.</p>\n<ul>\n<li><code>[xslt_transform_xml xml=\"{url}\" cache=\"{minutes}\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{url}\" cache=\"{minutes}\" /]</code></li>\n<li><code>[xslt_select_csv csv=\"{url}\" cache=\"{minutes}\" /]</code></li>\n</ul>\n<h3>Namespace Parameters</h3>\n<p>Within <code>[xslt_select_xml/]</code> the plugin provides two (2) methods for handling XML containing namespaces.  The first is to add <code>strip-namespaces</code> to the shortcode.  The second method is to add the needed prefixes and namespace URIs using <code>xslns</code>.</p>\n<ul>\n<li><code>[xslt_select_xml xml=\"{file}\" strip-namespaces=\"yes\" select=\"//node\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file}\" xmlns=\"ns1\" ns1=\"{namespace-uri-1}\" select=\"//ns1:node\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file}\" xmlns=\"ns1 ns2\" ns1=\"{namespace-uri-1}\" ns2=\"{namespace-uri-2}\" select=\"//ns1:node/ns2:node\" /]</code></li>\n</ul>\n<h3>WP-CLI</h3>\n<p>All three (3) shortcodes have command-line equivalents. They can be used, for instance, to run quick tests. Or they can be used, by piping the outputs into files, to pre-generate results.</p>\n<ul>\n<li>\n<pre><code>wp xslt transform_xml\n    --xsl='{file|url|id|slug}'\n    --xml='{file|url|id|slug}'\n    --cache='{minutes, if xsl|xml={url}}'\n    --tidy='{yes|html}' or tidy or --tidy='xml'\n    --{myparam}='{myvalue}'\n    --outfile='{filepath}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n<li>\n<pre><code>wp xslt select_xml\n    --xml='{file|url|id|slug}'\n    --cache='{minutes, if xml={url}}'\n    --select='{xpath}'\n    --root='{nodename|empty}'\n    --tidy='{yes|html}' or tidy or --tidy='xml'\n    --strip-namespaces='yes' or strip-namespaces\n    --strip-declaration='no'\n    --format='{xml|json}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n<li>\n<pre><code>wp xslt select_csv\n    --csv='{file|url}'\n    --cache='{minutes, if csv={url}}'\n    --separator=','\n    --enclosure='\\\"'\n    --escape='\\\\'\n    --key_row='{row number for column labels}'\n    --col='{return column number(s), letter(s), or label(s)}'\n    --key_col='{col number, letter, or label for key matching}'\n    --key='{value(s) for key_col matching}'\n    --row='{return row number(s)}'\n    --class='{css classname(s) for result table}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n</ul>\n<h3>XSL Stylesheets</h3>\n<p>The XSLT Processor plugin includes a number of useful XSL templates that you can include and use in your own projects. They are grouped into five files.</p>\n<ul>\n<li>date.xsl : <code>date-format</code>, <code>date-microtime</code></li>\n<li>file.xsl : <code>file-exists-local</code>, <code>file-exists-remote</code></li>\n<li>string.xsl : <code>string-replace</code>, <code>string-upper</code>, <code>string-lower</code>, <code>string-title-case</code>, <code>string-trim</code>, <code>string-rtrim</code>, <code>string-ltrim</code>, <code>string-maxlength</code>, <code>string-maxwords</code>, <code>string-add-slashes</code>, <code>string-urlencode</code>, <code>string-strip-tags</code>, <code>string-nl2br</code>, <code>string-entity-decode</code>, <code>string-to-nodeset</code></li>\n<li>util.xsl : <code>util-bytsize</code>, <code>util-hash-data</code>, <code>util-print-nodes</code>, <code>util-print-node-names</code>, <code>util-super-global</code></li>\n<li>wp.xsl : <code>wp-select-xml</code>, <code>wp-select-csv</code>, <code>wp-post-item</code>, <code>wp-post-meta</code>, <code>wp-sanitize-title</code>, <code>wp-size-format</code></li>\n</ul>\n<h3>Requirements</h3>\n<p>The Ten&amp;Two XSLT Processor plugin relies upon PHP&#8217;s XSL extension.  If the extension is installed, the XSLT Processor Settings screen will display a message similar to the first message below.  If <code>LIBXSLT_VERSION</code> is undefined, all plugin options are disabled automatically and the second message is displayed.</p>\n<ul>\n<li><code>PHP's XSL extension is available : XSLT v1.1.32, EXSLT v1.1.32, LIBXML v2.9.4</code></li>\n<li><code>PHP's XSL extension is NOT available</code></li>\n</ul>\n<p>The XSL extension&#8217;s requirements are detailed at php.net &#8211; https://www.php.net/manual/en/book.xsl.php</p>\n<blockquote>\n<p>&#8220;This extension requires the libxml PHP extension. This means passing the &#8211;with-libxml,<br />\n  or prior to PHP 7.4 the &#8211;enable-libxml, configuration flag, although this is implicitly<br />\n  accomplished because libxml is enabled by default.</p>\n<p>This extension uses libxslt which can be found at » http://xmlsoft.org/XSLT/. libxslt<br />\n  version 1.1.0 or greater is required.&#8221;</p>\n</blockquote>\n",
        "installation": "<h3>WordPress installation</h3>\n<ol>\n<li>Go to Plugins &gt; Add New &gt; Search for &#8220;tenandtwo-xslt-processor&#8221;</li>\n<li>Press &#8220;Install Now&#8221; for the &#8220;Ten&amp;Two XSLT Processor&#8221; plugin</li>\n<li>Press &#8220;Activate Plugin&#8221;</li>\n</ol>\n<h3>WP-CLI installation</h3>\n<ol>\n<li><code>wp plugin install tenandtwo-xslt-processor --activate</code></li>\n</ol>\n<h3>Manual installation</h3>\n<ol>\n<li>Download the latest archive from the Plugin Homepage : https://wordpress.org/plugins/tenandtwo-xslt-processor</li>\n<li>Upload the <code>tenandtwo-xslt-processor</code> directory to your <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8220;Plugins&#8221; menu in WordPress</li>\n</ol>\n<p>For more details on installation options, see Manage Plugins at wordpress.org &#8211; https://wordpress.org/documentation/article/manage-plugins/</p>\n",
        "faq": "\n<dt id='where%20are%20the%20plugin%20options%3F'>\nWhere are the plugin options?\n</h4>\n<p>\n<p>In WordPress, go to Settings &gt; XSLT Processor.  There are four (4) sections :</p>\n<ul>\n<li>Activate Content Types</li>\n<li>Activate Shortcodes</li>\n<li>Cache Lifetime</li>\n<li>Local File Search Paths</li>\n</ul>\n</p>\n<dt id='where%20is%20the%20documentation%3F'>\nWhere is the documentation?\n</h4>\n<p>\n<p>For a quick reference to the shortcodes and their main parameters, go to Settings &gt; XSLT Processor.  The samples for each shortcode show common usage.</p>\n<p>Full documentation and working examples are available at https://plugins.tenandtwo.com/.  There are four (4) main sections :</p>\n<ul>\n<li>Getting Started : https://plugins.tenandtwo.com/xslt-processor/getting-started</li>\n<li>Shortcodes      : https://plugins.tenandtwo.com/xslt-processor/shortcodes</li>\n<li>Stylesheets     : https://plugins.tenandtwo.com/xslt-processor/stylsheets</li>\n<li>How To          : https://plugins.tenandtwo.com/xslt-processor/how-to</li>\n</ul>\n</p>\n\n",
        "changelog": "<h4>1.0.x</h4>\n<ul>\n<li>Initial Release</li>\n<li>Add WP-CLI commands</li>\n<li>Test with WP 6.5</li>\n</ul>\n"
    },
    "short_description": "Transform and display XML from local and remote sources using PHP&#039;s XSL extension.",
    "description": "<p>The Ten&amp;Two XSLT Processor plugin brings the power of PHP&#8217;s XSL extension to WordPress.  Once enabled, the plugin creates three (3) shortcodes &#8211; <code>[xslt_transform_xml/]</code>, <code>[xslt_select_xml/]</code>, and <code>[xslt_select_csv/]</code> &#8211; which can be used separately or in tandem to enrich your site with content from XML and CSV sources.  The plugin also enables two (2) custom post types &#8211; <code>XSL Stylesheets</code> and <code>XML Documents</code> &#8211; for managing and validating sources within WP Admin.</p>\n<p>Detailed documentation and sample code can be found at https://plugins.tenandtwo.com/</p>\n<h3>Custom Post Types</h3>\n<p>The XSLT Processor plugin provides two (2) custom post types for managing sources within WordPress &#8211; <code>XSL Stylesheets</code> and <code>XML Documents</code>.  Both types include basic syntax validation.  XML Documents can be validated further using DTD, XSD, or RNG.  Both types are enabled in Settings &gt; XSLT Processor &gt; Activate Content Types.</p>\n<h3>Shortcode : [xslt_transform_xml/]</h3>\n<p>[xslt_transform_xml/] is the plugin&#8217;s primary function.  This shortcode processes XML data using an XSL stylesheet, and then outputs the result as HTML, more XML, or as simple TEXT.</p>\n<ul>\n<li><code>[xslt_transform_xml xsl=\"{file|url|id|slug}\" xml=\"{file|url|id|slug}\" /]</code></li>\n<li><code>[xslt_transform_xml xsl=\"{file|url|id|slug}\"]&lt;DATA&gt;...&lt;/DATA&gt;[/xslt_transform_xml]</code></li>\n</ul>\n<p>If either the <code>xsl</code> or <code>xml</code> parameter is left unspecified, defaults are used.  The default XML value is <code>&lt;NODATA/&gt;</code>.  The default XSL stylesheet prints all of the incoming data as HTML.  If extra attributes are specified in the shortcode &#8211; eg, <code>mykey=\"myval\"</code> &#8211; those keys/values are passed along as parameters to the stylesheet &#8211; <code>&lt;xsl:param name=\"mykey\"/&gt;</code>.</p>\n<h3>Shortcode : [xslt_select_xml/]</h3>\n<p>[xslt_select_xml/] is a helper function.  It reads XML and returns a selection of the data, based on a supplied XPath expression.  There are two (2) options for specifying the XPath.  First, using the <code>select</code> attribute or, second, using the body of the shortcode.  Complex select statements with quotes, square brackets or other special syntax, should use the second pattern :</p>\n<ul>\n<li><code>[xslt_select_xml xml=\"{file|url|id|slug}\" select=\"{XPath}\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file|url|id|slug}\"]{XPath}[/xslt_select_xml]</code></li>\n</ul>\n<p>If the XPath select parameter is left unspecified, the default <code>/</code> is used, which returns the entire document.  The default output is <code>format=\"xml\"</code>.  If <code>format=\"json\"</code> is specified, the result is encoded as a JSON string.</p>\n<h3>Shortcode : [xslt_select_csv/]</h3>\n<p>[xslt_select_csv/] is a helper function for converting CSV file data to XML.  The result can be output directly as an HTML <code>&lt;table&gt;</code>, or the result can be passed to <code>[xslt_transform_xml/]</code> for further processing.</p>\n<ul>\n<li><code>[xslt_select_csv csv=\"{file|url}\" /]</code></li>\n<li><code>[xslt_select_csv]{csv,data}[/xslt_select_csv]</code></li>\n</ul>\n<p>Three (3) parameters &#8211; <code>separator</code>, <code>enclosure</code>, <code>escape</code> &#8211; control reading the input.  See PHP&#8217;s <code>fgetcsv()</code> function for details.</p>\n<ul>\n<li><code>[xslt_select_csv separator=\",\" enclosure=\"\\\"\" escape=\"\\\\\" /]</code></li>\n</ul>\n<p>Two (2) parameters &#8211; <code>key_row</code>, <code>col</code> &#8211; control writing columns to the output.  The <code>key_row</code> attribute is optional, but allows labels from that row to be used in <code>col</code> and <code>key_col</code>.</p>\n<ul>\n<li><code>[xslt_select_csv key_row=\"{num}\" col=\"{num|letter|label}+\" /]</code></li>\n</ul>\n<p>Three (3) parameters &#8211; <code>row</code>, <code>key_col</code>, <code>key</code> &#8211; control writing rows to the output.</p>\n<ul>\n<li><code>[xslt_select_csv row=\"{num}+\" /]</code></li>\n<li><code>[xslt_select_csv key_col=\"{num|letter|label}\" key=\"{val}+\" /]</code></li>\n</ul>\n<h3>Nested Shortcodes</h3>\n<p>Combine <code>[xslt_transform_xml]</code> with <code>[xslt_select_xml]</code> :</p>\n<ul>\n<li><code>[xslt_transform_xml][xslt_select_xml/][/xslt_transform_xml]</code></li>\n</ul>\n<p>Combine <code>[xslt_transform_xml]</code> with <code>[xslt_select_csv]</code> :</p>\n<ul>\n<li><code>[xslt_transform_xml][xslt_select_csv/][/xslt_transform_xml]</code></li>\n</ul>\n<p>Combine <code>[xslt_transform_xml]</code> with itself using <code>[/xslt_transform_alias]</code> (WP does not support nested shortcodes with identical names) :</p>\n<ul>\n<li><code>[xslt_transform_alias][xslt_transform_xml/][/xslt_transform_alias]</code></li>\n</ul>\n<p>Combine multiple shortcodes/sources to create a single <code>XML Document</code> (see Custom Post Types above) :</p>\n<ul>\n<li><code>&lt;DATA&gt;&lt;PART1&gt;[xslt_select_xml xml=\"f1.xml\" /]&lt;/PART1&gt;&lt;PART2&gt;[xslt_select_xml xml=\"f2.xml\" /]&lt;/PART2&gt;&lt;/DATA&gt;</code></li>\n</ul>\n<h3>Cache Parameters</h3>\n<p>When a shortcode specifies a remote file &#8211; <code>xml=\"{url}\"</code> or <code>csv=\"{url}\"</code> &#8211; that source is cached locally using WP Transients. The default cache duration is set in the XSLT Processor Settings.  To override the default, add <code>cache=\"{minutes}\"</code> to the shortcode.</p>\n<ul>\n<li><code>[xslt_transform_xml xml=\"{url}\" cache=\"{minutes}\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{url}\" cache=\"{minutes}\" /]</code></li>\n<li><code>[xslt_select_csv csv=\"{url}\" cache=\"{minutes}\" /]</code></li>\n</ul>\n<h3>Namespace Parameters</h3>\n<p>Within <code>[xslt_select_xml/]</code> the plugin provides two (2) methods for handling XML containing namespaces.  The first is to add <code>strip-namespaces</code> to the shortcode.  The second method is to add the needed prefixes and namespace URIs using <code>xslns</code>.</p>\n<ul>\n<li><code>[xslt_select_xml xml=\"{file}\" strip-namespaces=\"yes\" select=\"//node\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file}\" xmlns=\"ns1\" ns1=\"{namespace-uri-1}\" select=\"//ns1:node\" /]</code></li>\n<li><code>[xslt_select_xml xml=\"{file}\" xmlns=\"ns1 ns2\" ns1=\"{namespace-uri-1}\" ns2=\"{namespace-uri-2}\" select=\"//ns1:node/ns2:node\" /]</code></li>\n</ul>\n<h3>WP-CLI</h3>\n<p>All three (3) shortcodes have command-line equivalents. They can be used, for instance, to run quick tests. Or they can be used, by piping the outputs into files, to pre-generate results.</p>\n<ul>\n<li>\n<pre><code>wp xslt transform_xml\n    --xsl='{file|url|id|slug}'\n    --xml='{file|url|id|slug}'\n    --cache='{minutes, if xsl|xml={url}}'\n    --tidy='{yes|html}' or tidy or --tidy='xml'\n    --{myparam}='{myvalue}'\n    --outfile='{filepath}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n<li>\n<pre><code>wp xslt select_xml\n    --xml='{file|url|id|slug}'\n    --cache='{minutes, if xml={url}}'\n    --select='{xpath}'\n    --root='{nodename|empty}'\n    --tidy='{yes|html}' or tidy or --tidy='xml'\n    --strip-namespaces='yes' or strip-namespaces\n    --strip-declaration='no'\n    --format='{xml|json}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n<li>\n<pre><code>wp xslt select_csv\n    --csv='{file|url}'\n    --cache='{minutes, if csv={url}}'\n    --separator=','\n    --enclosure='\\\"'\n    --escape='\\\\'\n    --key_row='{row number for column labels}'\n    --col='{return column number(s), letter(s), or label(s)}'\n    --key_col='{col number, letter, or label for key matching}'\n    --key='{value(s) for key_col matching}'\n    --row='{return row number(s)}'\n    --class='{css classname(s) for result table}'\n    --htmlentities or --htmlentities='yes'\n</code></pre>\n</li>\n</ul>\n<h3>XSL Stylesheets</h3>\n<p>The XSLT Processor plugin includes a number of useful XSL templates that you can include and use in your own projects. They are grouped into five files.</p>\n<ul>\n<li>date.xsl : <code>date-format</code>, <code>date-microtime</code></li>\n<li>file.xsl : <code>file-exists-local</code>, <code>file-exists-remote</code></li>\n<li>string.xsl : <code>string-replace</code>, <code>string-upper</code>, <code>string-lower</code>, <code>string-title-case</code>, <code>string-trim</code>, <code>string-rtrim</code>, <code>string-ltrim</code>, <code>string-maxlength</code>, <code>string-maxwords</code>, <code>string-add-slashes</code>, <code>string-urlencode</code>, <code>string-strip-tags</code>, <code>string-nl2br</code>, <code>string-entity-decode</code>, <code>string-to-nodeset</code></li>\n<li>util.xsl : <code>util-bytsize</code>, <code>util-hash-data</code>, <code>util-print-nodes</code>, <code>util-print-node-names</code>, <code>util-super-global</code></li>\n<li>wp.xsl : <code>wp-select-xml</code>, <code>wp-select-csv</code>, <code>wp-post-item</code>, <code>wp-post-meta</code>, <code>wp-sanitize-title</code>, <code>wp-size-format</code></li>\n</ul>\n<h3>Requirements</h3>\n<p>The Ten&amp;Two XSLT Processor plugin relies upon PHP&#8217;s XSL extension.  If the extension is installed, the XSLT Processor Settings screen will display a message similar to the first message below.  If <code>LIBXSLT_VERSION</code> is undefined, all plugin options are disabled automatically and the second message is displayed.</p>\n<ul>\n<li><code>PHP's XSL extension is available : XSLT v1.1.32, EXSLT v1.1.32, LIBXML v2.9.4</code></li>\n<li><code>PHP's XSL extension is NOT available</code></li>\n</ul>\n<p>The XSL extension&#8217;s requirements are detailed at php.net &#8211; https://www.php.net/manual/en/book.xsl.php</p>\n<blockquote>\n<p>&#8220;This extension requires the libxml PHP extension. This means passing the &#8211;with-libxml,<br />\n  or prior to PHP 7.4 the &#8211;enable-libxml, configuration flag, although this is implicitly<br />\n  accomplished because libxml is enabled by default.</p>\n<p>This extension uses libxslt which can be found at » http://xmlsoft.org/XSLT/. libxslt<br />\n  version 1.1.0 or greater is required.&#8221;</p>\n</blockquote>\n",
    "download_link": "https://downloads.wordpress.org/plugin/tenandtwo-xslt-processor.1.0.6.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/tenandtwo-xslt-processor/assets/screenshot-1.png?rev=3046004",
            "caption": "XSLT Processor Settings"
        }
    ],
    "tags": {
        "csv": "csv",
        "shortcode": "shortcode",
        "xml": "xml",
        "xsl": "xsl",
        "xslt": "xslt"
    },
    "stable_tag": "1.0.6",
    "versions": {
        "1.0.5": "https://downloads.wordpress.org/plugin/tenandtwo-xslt-processor.1.0.5.zip",
        "1.0.6": "https://downloads.wordpress.org/plugin/tenandtwo-xslt-processor.1.0.6.zip",
        "trunk": "https://downloads.wordpress.org/plugin/tenandtwo-xslt-processor.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/tenandtwo-xslt-processor.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [
        {
            "filename": "blueprint.json",
            "url": "https://wordpress.org/plugins/wp-json/plugins/v1/plugin/tenandtwo-xslt-processor/blueprint.json?rev=3098218"
        }
    ],
    "preview_link": "",
    "language_packs": []
}