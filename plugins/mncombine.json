{
    "name": "MnCombine",
    "slug": "mncombine",
    "version": "1.1.6",
    "author": "<a href=\"http://mneilsworld.com/\">Michael Neil</a>",
    "author_profile": "https://profiles.wordpress.org/mneil/",
    "contributors": {
        "mneil": {
            "profile": "https://profiles.wordpress.org/mneil/",
            "avatar": "https://secure.gravatar.com/avatar/32e32b44b9f7e7f5ae7b83897d794e47?s=96&d=monsterid&r=g",
            "display_name": "mneil"
        }
    },
    "requires": "3.3.1",
    "tested": "4.4.33",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 86,
    "ratings": {
        "5": 15,
        "4": 0,
        "3": 1,
        "2": 0,
        "1": 3
    },
    "num_ratings": 19,
    "support_url": "https://wordpress.org/support/plugin/mncombine/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 80,
    "downloaded": 17459,
    "last_updated": "2016-03-31 03:02:00",
    "added": "2013-05-27",
    "homepage": "http://mneilsworld.com/php-2/mncombine-wp-plugin-release",
    "sections": {
        "description": "<p>Finds all possible .js and .css files from a WP install available and allows you to combine and/or compress the files to reduce<br />\nload time. The plugin can monitor file changes in &#8220;development&#8221; mode (by hashing file mtime) which allows the plugin to<br />\nrecompile the files when a file changes. Or, it can cache the files in &#8220;production&#8221; mode so that files are only recompiled<br />\nif they are not found or are deleted manually from the cache folder. Additionally, this plugin will allow you to force the<br />\ninclusion of javascript files into either the head or the foot of the page.</p>\n<p>There are two modes, development and production, the ability to force the files to print in the header or footer*, the use of<br />\nGoogle Closure as a JS compiler, and finally the ability to pick and choose which files, including dependencies, should be combined.</p>\n<p>*forcing head compiles can fail on JS files queued after the call to wp_head(). The plugin will, in this case, render the late<br />\nqueued files in the footer as originally intended.</p>\n",
        "installation": "<ol>\n<li>Upload <code>mncombine</code> folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Visit the admin panel and choose your options</li>\n</ol>\n",
        "faq": "\n<h4>Why does the first compile take so long with Google Closure OR why is development mode so slow to recache with Google Closure?</h4>\n<p>\n<p>Google Closure is a 3rd party JS compiler that the plugin must make requests to in order to receive compressed markup. And, because<br />\nwe allow you to choose whether or not to combine some files we have to make multiple requests to the service to maintain dependency<br />\ninclusion. This results in a bit of latency when caching your files. However, in production mode, once the files are generated they<br />\ndo not have to be regenerated again and load times are improved significantly. Using JSMin is much faster and recommended for use in<br />\nconjunction with development mode.</p>\n</p>\n<h4>Can I exclude certain pages from using the plugin</h4>\n<p>\n<p>As of version 1.1.0 you can exclude pages from compiling/compressing css or js files using a regular expression in the general<br />\nsettings tab.</p>\n</p>\n\n",
        "changelog": "<h4>1.1.6</h4>\n<ul>\n<li>Admin page requires edit_posts capability</li>\n</ul>\n<h4>1.1.5</h4>\n<ul>\n<li>Skip checking when script handle is empty</li>\n</ul>\n<h4>1.1.4</h4>\n<ul>\n<li>Suppress errors on strstr($js, $use) when use is empty</li>\n</ul>\n<h4>1.1.3</h4>\n<ul>\n<li>Verified working on WP version 3.8.1</li>\n</ul>\n<h4>1.1.2</h4>\n<ul>\n<li>Verified against WP version 3.6.1</li>\n<li>Removed warning on login page where wp_scripts is not set</li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Fixed Fatal Error on &#8220;Cache&#8221; admin page before cache folder had been generated</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Added ability to not combine css files based on REQUEST_URI</li>\n<li>Added ability to not combine js files based on REQUEST_URI</li>\n</ul>\n<h4>1.0.4</h4>\n<ul>\n<li>Fixed bug where plugin combined all css if no css files were selected</li>\n</ul>\n<h4>1.0.3</h4>\n<ul>\n<li>Option to compress css or not</li>\n<li>Dependency bug fixed when opting not to combine js files that share dependencies with compressed files</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>The very first version in all it&#8217;s glory</li>\n</ul>\n"
    },
    "short_description": "Easily manage the merging and compression of js and css files from plugins and themes",
    "description": "<p>Finds all possible .js and .css files from a WP install available and allows you to combine and/or compress the files to reduce<br />\nload time. The plugin can monitor file changes in &#8220;development&#8221; mode (by hashing file mtime) which allows the plugin to<br />\nrecompile the files when a file changes. Or, it can cache the files in &#8220;production&#8221; mode so that files are only recompiled<br />\nif they are not found or are deleted manually from the cache folder. Additionally, this plugin will allow you to force the<br />\ninclusion of javascript files into either the head or the foot of the page.</p>\n<p>There are two modes, development and production, the ability to force the files to print in the header or footer*, the use of<br />\nGoogle Closure as a JS compiler, and finally the ability to pick and choose which files, including dependencies, should be combined.</p>\n<p>*forcing head compiles can fail on JS files queued after the call to wp_head(). The plugin will, in this case, render the late<br />\nqueued files in the footer as originally intended.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/mncombine.1.1.6.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/mncombine/trunk/screenshot-1.png?rev=1538910",
            "caption": "Choose the compression settings and mode"
        },
        {
            "src": "https://ps.w.org/mncombine/trunk/screenshot-2.png?rev=1538910",
            "caption": "Select which files to combine from a list of files available in your WP install, active plugins, and active theme"
        },
        {
            "src": "https://ps.w.org/mncombine/trunk/screenshot-3.png?rev=1538910",
            "caption": "Total request of 17 uncompressed/combined files : 5136ms. 79.254kb of transfered data. Page load time 1.19s"
        },
        {
            "src": "https://ps.w.org/mncombine/trunk/screenshot-4.png?rev=1538910",
            "caption": "Total request of 3 compressed/combined files : 578ms. 66kb of transfered data. Page load time 1.13s. Significantly more \ntime is saved when comparing the browser cached results of the two requests."
        }
    ],
    "tags": {
        "cascade": "cascade",
        "css": "css",
        "javascript": "javascript",
        "js": "JS",
        "style": "style"
    },
    "stable_tag": "1.1.6",
    "versions": {
        "1.0.3": "https://downloads.wordpress.org/plugin/mncombine.1.0.3.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/mncombine.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/mncombine.1.1.1.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/mncombine.1.1.2.zip",
        "1.1.3": "https://downloads.wordpress.org/plugin/mncombine.1.1.3.zip",
        "1.1.5": "https://downloads.wordpress.org/plugin/mncombine.1.1.5.zip",
        "1.1.6": "https://downloads.wordpress.org/plugin/mncombine.1.1.6.zip",
        "trunk": "https://downloads.wordpress.org/plugin/mncombine.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://mneilsworld.com/donate",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/mncombine.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 86,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}