{
    "name": "Snippy",
    "slug": "snippy",
    "version": "1.4.1",
    "author": "<a href=\"https://pqina.nl\">PQINA</a>",
    "author_profile": "https://profiles.wordpress.org/pqina/",
    "contributors": {
        "pqina": {
            "profile": "https://profiles.wordpress.org/pqina/",
            "avatar": "https://secure.gravatar.com/avatar/ceb55c9cb8f9f7c7946a9ed9ceac5b87?s=96&d=monsterid&r=g",
            "display_name": "Rik Schennink"
        }
    },
    "requires": "4.5",
    "tested": "5.3.0",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 5,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 5,
    "support_url": "https://wordpress.org/support/plugin/snippy/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 700,
    "downloaded": 5687,
    "last_updated": "2020-01-14 9:24am GMT",
    "added": "2017-07-21",
    "homepage": "https://pqina.nl/snippy",
    "sections": {
        "description": "<p>Use Snippy to quickly create your own custom shortcodes.</p>\n<p>A Snippy shortcode is built by combining bits. A bit can be a file, like a <strong>Stylesheet</strong> or a <strong>Script</strong>, or a piece of code, like <strong>HTML</strong>, <strong>CSS</strong> or <strong>JavaScript</strong>.</p>\n<p>The &#8220;code&#8221; bits can contain placeholders, which are automatically made accessible as shortcode attributes.</p>\n<p><em>Time for a quick example.</em></p>\n<p>Let&#8217;s create a shortcode to embed YouTube videos. We&#8217;ll add an HTML bit and set the it&#8217;s value to the YouTube embed iframe.</p>\n<pre><code>&lt;iframe src=\"https://youtube/embed/JZYYJY4yoK4\"/&gt;\n</code></pre>\n<p>Now to make this bit a bit more flexible we will replace the YouTube video id with a placeholder value <code>{{id}}</code>.</p>\n<pre><code>&lt;iframe src=\"https://youtube/embed/{{id}}\"/&gt;\n</code></pre>\n<p><em>Yay! We&#8217;ve finished our first bit!</em></p>\n<p>Now we can create a new Snippy shortcode and add the YouTube iFrame HTML bit. After saving the shortcode we can use our new and shiny YouTube shortcode in the text editor.</p>\n<pre><code>[youtube id=JZYYJY4yoK4]\n</code></pre>\n<p><em>Ready for more?</em></p>\n<p>The below 3 minute YouTube video shows how you can use Snippy to turn a jQuery plugin into a WordPress plugin.</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/JZYYJY4yoK4?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n",
        "installation": "<ol>\n<li>Download the zip file.</li>\n<li>Log into WordPress, hover over <em>Plugins</em> and click <em>Add new</em></li>\n<li>Click on the <em>Upload Plugin</em> button.</li>\n<li>Select the zip file you downloaded.</li>\n<li>Click <em>Install Plugin</em>.</li>\n<li>Click <em>Activate</em>.</li>\n<li>Navigate to the &#8216;Snippy&#8217; menu on the left and setup your first shortcode.</li>\n</ol>\n",
        "faq": "\n<h4>Can I use JavaScript or CSS files instead of HTML</h4>\n<p>\n<p>Yes, you can select JS and CSS files to be added to a bit, Snippy will automatically load the files when the shortcode is used on a page.</p>\n<p>Please note that your server might prevent uploading files with a .js or .css extension. If that&#8217;s the case you have to alter the server security settings to allow uploading of these files.</p>\n</p>\n<h4>How do I define placeholders</h4>\n<p>\n<p>You can define placeholders in bits by wrapping text in brackets like this: <code>{{placeholder}}</code>.</p>\n<p>Suppose you want to create a placeholder for a YouTube video. You&#8217;d replace the YouTube video id with <code>{{id}}</code>.</p>\n<pre><code>&lt;iframe src=\"https://youtube/embed/{{id}}\"/&gt;\n</code></pre>\n<p>Now the attribute id is available in any shortcode that uses the YouTube HTML bit.</p>\n<pre><code>[youtube id=JZYYJY4yoK4]\n</code></pre>\n</p>\n<h4>How do I set a placeholder default value</h4>\n<p>\n<p>Placeholder default values can be set by following the placeholder name with a semicolon and then the default value.</p>\n<pre><code>{{name:John Doe}}\n</code></pre>\n</p>\n<h4>Which default placeholders can I use</h4>\n<p>\n<p>The following list of placeholders have a special function:</p>\n<ul>\n<li><code>{{content}}</code> is always replaced with the content wrapped by your shortcode.</li>\n<li><code>{{date_today}}</code> is replaced with an ISO8601 representation of today&#8217;s date.</li>\n<li><code>{{date_tomorrow}}</code> is replaced with an ISO8601 representation of today&#8217;s date.</li>\n<li><code>{{unique_id}}</code> is replaced with a uniquely generated id.</li>\n<li><code>{{shortcode_id}}</code> is replaced with the id of the current shortcode.</li>\n<li><code>{{bit_id}}</code> is replaced with the id of the current bit.</li>\n<li><code>{{page_id}}</code> is replaced with the current page id.</li>\n<li><code>{{page_relative_url}}</code> relative url to the current page.</li>\n<li><code>{{page_absolute_url}}</code> absolute url to the current page (includes the domain).</li>\n<li><code>{{theme}}</code> current theme name.</li>\n<li><code>{{theme_root_uri}}</code> theme directory URI.</li>\n<li><code>{{template_directory_uri}}</code> current theme directory URI.</li>\n<li><code>{{admin_url}}</code> current admin url.</li>\n<li><code>{{nonce_field:action,name}}</code> generate a nonce field.</li>\n</ul>\n</p>\n\n",
        "changelog": "<h4>1.4.1</h4>\n<ul>\n<li>Test with WordPress 5.3</li>\n</ul>\n<h4>1.4.0</h4>\n<ul>\n<li>Add <code>{{admin_url}}</code> and <code>{{nonce_field}}</code> placeholders.</li>\n</ul>\n<h4>1.3.5</h4>\n<ul>\n<li>Fixed problem where snippy shortcode menu was rendered before doctype</li>\n</ul>\n<h4>1.3.4</h4>\n<ul>\n<li>Fixed problem where paging would not work</li>\n</ul>\n<h4>1.3.3</h4>\n<ul>\n<li>Tested with WordPress 5.0.0</li>\n</ul>\n<h4>1.3.0</h4>\n<ul>\n<li>When using multiple placeholders with the same name, they will only show up once</li>\n<li>Add <code>bit_id</code> and <code>shortcode_id</code> placeholders</li>\n</ul>\n<h4>1.2.0</h4>\n<ul>\n<li>HTML bits can now contain shortcodes</li>\n<li>Add more placeholders</li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Fix problem where shortcode and bits tables would not show paging control</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Add &#8220;local&#8221; or &#8220;remote&#8221; resource bit which makes possible the option to include CDN resources.</li>\n<li>Add a starter set of dynamic placeholders</li>\n<li>Only admin can now edit Snippy shortcodes</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n"
    },
    "short_description": "Makes it easy to create your own custom shortcodes.",
    "description": "<p>Use Snippy to quickly create your own custom shortcodes.</p>\n<p>A Snippy shortcode is built by combining bits. A bit can be a file, like a <strong>Stylesheet</strong> or a <strong>Script</strong>, or a piece of code, like <strong>HTML</strong>, <strong>CSS</strong> or <strong>JavaScript</strong>.</p>\n<p>The &#8220;code&#8221; bits can contain placeholders, which are automatically made accessible as shortcode attributes.</p>\n<p><em>Time for a quick example.</em></p>\n<p>Let&#8217;s create a shortcode to embed YouTube videos. We&#8217;ll add an HTML bit and set the it&#8217;s value to the YouTube embed iframe.</p>\n<pre><code>&lt;iframe src=\"https://youtube/embed/JZYYJY4yoK4\"/&gt;\n</code></pre>\n<p>Now to make this bit a bit more flexible we will replace the YouTube video id with a placeholder value <code>{{id}}</code>.</p>\n<pre><code>&lt;iframe src=\"https://youtube/embed/{{id}}\"/&gt;\n</code></pre>\n<p><em>Yay! We&#8217;ve finished our first bit!</em></p>\n<p>Now we can create a new Snippy shortcode and add the YouTube iFrame HTML bit. After saving the shortcode we can use our new and shiny YouTube shortcode in the text editor.</p>\n<pre><code>[youtube id=JZYYJY4yoK4]\n</code></pre>\n<p><em>Ready for more?</em></p>\n<p>The below 3 minute YouTube video shows how you can use Snippy to turn a jQuery plugin into a WordPress plugin.</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/JZYYJY4yoK4?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n",
    "download_link": "https://downloads.wordpress.org/plugin/snippy.1.4.1.zip",
    "upgrade_notice": {
        "": "<p>Improved parsing of bits, HTML bits can now contain shortcodes. Three additional default placeholders were added.</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/snippy/assets/screenshot-1.png?rev=1700351",
            "caption": "Creating an HTML bit containing a YouTube iframe snippet and setting the <code>{{id}}</code> placeholder."
        },
        {
            "src": "https://ps.w.org/snippy/assets/screenshot-2.png?rev=1700351",
            "caption": "Creating a <code>[youtube]</code> shortcode that makes use of the YouTube iframe snippet."
        },
        {
            "src": "https://ps.w.org/snippy/assets/screenshot-3.png?rev=1700304",
            "caption": "Adding the shortcode to the page and setting a YouTube video id."
        }
    ],
    "tags": {
        "build": "build",
        "create": "create",
        "javascript": "javascript",
        "short-code": "short code",
        "shortcode": "shortcode"
    },
    "stable_tag": "1.4.1",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/snippy.1.0.0.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/snippy.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/snippy.1.1.1.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/snippy.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/snippy.1.2.1.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/snippy.1.3.0.zip",
        "1.3.1": "https://downloads.wordpress.org/plugin/snippy.1.3.1.zip",
        "1.3.2": "https://downloads.wordpress.org/plugin/snippy.1.3.2.zip",
        "1.3.3": "https://downloads.wordpress.org/plugin/snippy.1.3.3.zip",
        "1.3.4": "https://downloads.wordpress.org/plugin/snippy.1.3.4.zip",
        "1.3.5": "https://downloads.wordpress.org/plugin/snippy.1.3.5.zip",
        "1.4.0": "https://downloads.wordpress.org/plugin/snippy.1.4.0.zip",
        "1.4.1": "https://downloads.wordpress.org/plugin/snippy.1.4.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/snippy.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://codecanyon.net/user/pqina/portfolio?ref=pqina",
    "banners": {
        "low": "https://ps.w.org/snippy/assets/banner-772x250.png?rev=1700333",
        "high": "https://ps.w.org/snippy/assets/banner-1544x500.png?rev=1700333"
    },
    "icons": {
        "1x": "https://ps.w.org/snippy/assets/icon-128x128.png?rev=1700304",
        "2x": "https://ps.w.org/snippy/assets/icon-256x256.png?rev=1700304"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}