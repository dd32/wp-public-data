{
    "name": "Churro",
    "slug": "churro",
    "version": "0.421",
    "author": "<a href=\"http://ericeaglstun.com\">Eric Eaglstun</a>",
    "author_profile": "https://profiles.wordpress.org/postpostmodern/",
    "contributors": {
        "postpostmodern": {
            "profile": "https://profiles.wordpress.org/postpostmodern/",
            "avatar": "https://secure.gravatar.com/avatar/0e8f47933997a6486be9cd91fed4a7ef?s=96&d=monsterid&r=g",
            "display_name": "postpostmodern"
        }
    },
    "requires": "2.8.0",
    "tested": "3.0.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/churro/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 2273,
    "last_updated": "2012-08-02 11:03pm GMT",
    "added": "2009-09-02",
    "homepage": "http://wordpress.org/extend/plugins/churro/",
    "sections": {
        "description": "<p>Churro is a plugin that allows developers to easily create pages and functionality, in a style similar to CodeIgniter.  By itself, Churro will not add any functionality to your WordPress site.</p>\n<p>Tested with WordPress and WordPress MU 2.8.0 ~ 3.0.5<br />\nRequires PHP 5.  PHP 4 is like 10 years old, you know?</p>\n<h3>Churro Basics</h3>\n<p>= URLs =<br />\nChurro requires friendly urls rather than query strings.  Your url will usually be mapped as following: <code>yoursite.com/class/method/variables</code></p>\n<h4>Controllers</h4>\n<p>The controller will be directly mapped to a file and class with the same name.  For example,<br />\n        yoursite.com/contact<br />\nwill look for a file named contact.php in the /churro/ directory.  This file should have a class contact that extends Churro.  Without a defined method, it will default to index.  All methods accessible through URLs will have &#8216;Action&#8217; appended to it.  The following code will provide scaffolding for <code>yoursite.com/contact</code> and <code>yoursite.com/contact/submit</code></p>\n<pre><code>&lt;?php\nclass contact extends Churro {\n    public function indexAction(){\n\n    }\n\n    public function submitAction(){\n\n    }\n}\n</code></pre>\n<h4>Models</h4>\n<p>Churro gives you access to several important WordPress Models through the <code>$this</code> keyword.  The <code>$wp</code>, <code>$wpdb</code>, and <code>$wp_query</code> classes, as well as <code>$blog_id</code> in MU are all availble without using the global keyword, eg <code>$this-&gt;wpdb</code>.</p>\n<h4>Views</h4>\n<p>Your views belong in your normal theme directory.  If you are using multiple themes, you can override the direcotry using <code>$this-&gt;Theme( 'directory-name' )</code> any place in the controller.  To specify a view to use, <code>$this-&gt;View( 'file-name' )</code>.  Seperating logic from  views is the most important thing to remember in Churro.  To set varaibles in your view, use <code>$this-&gt;vars-&gt;var_name</code> in the controller, and <code>$var_name</code> in your view.</p>\n<h4>Ajax / Javascript</h4>\n<p>If you use the excellent jQuery javascript library, Churro will detect ajax requests and automatically return JSON.  Churro defines a constant <code>ISAJAX</code> on each request.  With a little planning, it is very easy to create a dynamic application in a way that is totally accessible without javascript.</p>\n<h3>Learning Churro</h3>\n<p>There is much more functionality in Churro than outlined here.  As of September 2, 2009, there is no complete, formal, documentation for writing code with Churro.  Stay tuned to <a href=\"http://labs.findsubstance.com/\" title=\"The passionate voice for interactive brand strategy and creative experiences\" rel=\"nofollow ugc\">Substance Labs</a> for tutorials.</p>\n",
        "installation": "<ol>\n<li>Place entire /churro/ directory to the /wp-content/plugins/ directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Write some code</li>\n</ol>\n",
        "faq": "\n<h4>This doesn&#8217;t do anything!</h4>\n<p>\n<p>Churro does not add any functionality to WordPress by itself.  Instead, it allows developers a structure to integrate well organized, easily maintainable, object oriented MVC code into their applications.</p>\n</p>\n<h4>Why did you create Churro?</h4>\n<p>\n<p>Churro was originally developed as a stand-alone framework, sort of a hobby project after I had learned Zend framework and wanted to use the same concepts in my own projects, with simpler syntax and lighter footprint.  After Churro reached a fairly stable state, I realized it&#8217;s similarities to CodeIgniter.  After wrestling with WordPress, I decided to refactor the Churro code as a plugin, to allow easy, rapid development.</p>\n</p>\n\n",
        "changelog": "<h4>0.3</h4>\n<ul>\n<li>Fairly major refactoring of code, moved virtually all functions into class methods.</li>\n</ul>\n<h4>0.2</h4>\n<ul>\n<li>Cleaning things up, more testing. No new functionality.</li>\n</ul>\n<h4>0.14</h4>\n<ul>\n<li>Experimental support for HTML Tidy.</li>\n</ul>\n<h4>0.13</h4>\n<ul>\n<li>Minor bug fix in jquery queue in admin.</li>\n</ul>\n<h4>0.12</h4>\n<ul>\n<li>Bug fixes, slightly more documentation.</li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial public release. No documentation.</li>\n</ul>\n"
    },
    "short_description": "Sweet and simple MVC for Wordpress.",
    "description": "<p>Churro is a plugin that allows developers to easily create pages and functionality, in a style similar to CodeIgniter.  By itself, Churro will not add any functionality to your WordPress site.</p>\n<p>Tested with WordPress and WordPress MU 2.8.0 ~ 3.0.5<br />\nRequires PHP 5.  PHP 4 is like 10 years old, you know?</p>\n<h3>Churro Basics</h3>\n<p>= URLs =<br />\nChurro requires friendly urls rather than query strings.  Your url will usually be mapped as following: <code>yoursite.com/class/method/variables</code></p>\n<h4>Controllers</h4>\n<p>The controller will be directly mapped to a file and class with the same name.  For example,<br />\n        yoursite.com/contact<br />\nwill look for a file named contact.php in the /churro/ directory.  This file should have a class contact that extends Churro.  Without a defined method, it will default to index.  All methods accessible through URLs will have &#8216;Action&#8217; appended to it.  The following code will provide scaffolding for <code>yoursite.com/contact</code> and <code>yoursite.com/contact/submit</code></p>\n<pre><code>&lt;?php\nclass contact extends Churro {\n    public function indexAction(){\n\n    }\n\n    public function submitAction(){\n\n    }\n}\n</code></pre>\n<h4>Models</h4>\n<p>Churro gives you access to several important WordPress Models through the <code>$this</code> keyword.  The <code>$wp</code>, <code>$wpdb</code>, and <code>$wp_query</code> classes, as well as <code>$blog_id</code> in MU are all availble without using the global keyword, eg <code>$this-&gt;wpdb</code>.</p>\n<h4>Views</h4>\n<p>Your views belong in your normal theme directory.  If you are using multiple themes, you can override the direcotry using <code>$this-&gt;Theme( 'directory-name' )</code> any place in the controller.  To specify a view to use, <code>$this-&gt;View( 'file-name' )</code>.  Seperating logic from  views is the most important thing to remember in Churro.  To set varaibles in your view, use <code>$this-&gt;vars-&gt;var_name</code> in the controller, and <code>$var_name</code> in your view.</p>\n<h4>Ajax / Javascript</h4>\n<p>If you use the excellent jQuery javascript library, Churro will detect ajax requests and automatically return JSON.  Churro defines a constant <code>ISAJAX</code> on each request.  With a little planning, it is very easy to create a dynamic application in a way that is totally accessible without javascript.</p>\n<h3>Learning Churro</h3>\n<p>There is much more functionality in Churro than outlined here.  As of September 2, 2009, there is no complete, formal, documentation for writing code with Churro.  Stay tuned to <a href=\"http://labs.findsubstance.com/\" title=\"The passionate voice for interactive brand strategy and creative experiences\" rel=\"nofollow ugc\">Substance Labs</a> for tutorials.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/churro.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/churro/trunk/screenshot-1.png?rev=1566907",
            "caption": "Churros are delicious <code>/trunk/screenshot-1.png</code>"
        }
    ],
    "tags": {
        "framework": "framework",
        "mvc": "mvc"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://www.heifer.org/",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/churro.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}