{
    "name": "WP PGP Encrypted Emails",
    "slug": "wp-pgp-encrypted-emails",
    "version": "0.8.0",
    "author": "Meitar",
    "author_profile": "https://profiles.wordpress.org/meitar/",
    "contributors": {
        "maymay": {
            "profile": "https://profiles.wordpress.org/maymay/",
            "avatar": "https://secure.gravatar.com/avatar/325d8f197774ad6bb997c964eb0ca048?s=96&d=monsterid&r=g",
            "display_name": "maymay"
        }
    },
    "requires": "4.4",
    "tested": "5.7.12",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 92,
    "ratings": {
        "5": 13,
        "4": 2,
        "3": 0,
        "2": 0,
        "1": 1
    },
    "num_ratings": 16,
    "support_url": "https://wordpress.org/support/plugin/wp-pgp-encrypted-emails/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 500,
    "downloaded": 22480,
    "last_updated": "2021-05-25 19:04:00",
    "added": "2016-01-22",
    "homepage": "https://github.com/fabacab/wp-pgp-encrypted-emails",
    "sections": {
        "description": "<p>WP PGP Encrypted Emails can automatically sign and encrypt any email that WordPress sends to your site&#8217;s admin email address or your users&#8217;s email addresses. You give it a copy of the recipient&#8217;s OpenPGP public key and/or their S/MIME certificate, and it does the rest. You can even automatically generate an OpenPGP signing keypair for your site to use.</p>\n<p>Encrypting outgoing emails protects your user&#8217;s privacy by ensuring that emails intended for them can be read only by them, and them alone. Moreover, signing those emails helps your users verify that email they receive purporting to be from your site was <em>actually</em> sent by your server, and not some imposter. If you&#8217;re a plugin or theme developer, you can encrypt and/or sign <em>arbitrary data</em> using this plugin&#8217;s OpenPGP and S/MIME APIs, which are both built with familiar, standard WordPress filter hooks. This enables you to develop highly secure communication and publishing tools fully integrated with your WordPress install. See the <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/#readme\" rel=\"nofollow ugc\"><code>README.markdown</code></a> file for details on cryptographic implementation and API usage.</p>\n<p><em>Donations for this and my other free software plugins make up a chunk of my income. If you continue to enjoy this plugin, please consider <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">making a donation</a>. ðŸ™‚ Thank you for your support!</em></p>\n<p>Plugin features:</p>\n<ul>\n<li>Processes <em>all</em> email your site generates, automatically and transparently.</li>\n<li>Configure outbound signing: sign email sent to <em>all</em> recipients, or just savvy ones.</li>\n<li>Per-user encryption keys and certificates; user manages their own OpenPGP keys and S/MIME certificates.</li>\n<li>Compatible with thousands (yes, thousands) of third-party contact form plugins.</li>\n<li>Full interoperability with all standards-compliant OpenPGP and S/MIME implementations.</li>\n<li>Options to enforce further privacy best practices (e.g., removing <code>Subject</code> lines).</li>\n<li>Fully multisite compatible, out of the box. No additional configuration for large networks!</li>\n<li>No binaries to install or configure; everything you need is in the plugin itself.</li>\n<li>Bells and whistles included! For instance, visitors can encrypt comments on posts so only the author can read them.</li>\n<li>Built-in, customizable integration with popular third-party plugins, such as <a href=\"https://wordpress.org/plugins/woocommerce/\" rel=\"ugc\">WooCommerce</a>.</li>\n<li>Always <strong>FREE</strong>. Replaces paid email encryption &#8220;upgrades,&#8221; and gets rid of yearly subscription fees. (<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">Donations</a> appreciated!)</li>\n<li>And <em>more</em>, of course. ðŸ˜‰</li>\n</ul>\n<p>The plugin works transparently for <em>all email</em> your site generates, and will also sign and encrypt outgoing email generated by other plugins (such as contact form plugins) or the built-in WordPress notification emails. All you have to do is add one or more OpenPGP keys or an S/MIME certificate to the Email Encryption screen (WordPress Admin Dashboard &rarr; Settings &rarr; Email Encryption). Each user can opt to also remove envelope information such as email subject lines, which encryption schemes cannot protect. With this plugin, there&#8217;s no longer any need to pay for the &#8220;pro&#8221; version of your favorite contact form plugin to get the benefit of email privacy.</p>\n<p>Each of your site&#8217;s users can supply their own, personal OpenPGP public key and/or X.509 S/MIME certificate for their own email address to have WordPress automatically encrypt any email destined for them. (They merely need to update their user profile.) They can choose which encryption method to use. Once set up, all future emails WordPress sends to that user will be encrypted using the standards-based OpenPGP or S/MIME technologies.</p>\n<p>The OpenPGP-encrypted emails can be decrypted by any OpenPGP-compatible mail client, such as <a href=\"https://gpgtools.org/\" rel=\"nofollow ugc\">MacGPG</a> (macOS), <a href=\"https://www.gpg4win.org/\" rel=\"nofollow ugc\">GPG4Win</a> (Windows), <a href=\"https://www.enigmail.net/\" rel=\"nofollow ugc\">Enigmail</a> (cross-platform), <a href=\"https://openkeychain.org/\" rel=\"nofollow ugc\">OpenKeychain</a> (Android), or <a href=\"https://ipgmail.com/\" rel=\"nofollow ugc\">iPGMail</a> (iPhone/iOS). For more information on reading encrypted emails, generating keys, and other uses for OpenPGP-compatible encryption, consult any (or all!) of the following guides:</p>\n<ul>\n<li><a href=\"https://ssd.eff.org/en/module/introduction-public-key-cryptography-and-pgp\" rel=\"nofollow ugc\">The Electronic Frontier Foundation&#8217;s Surveillance Self-Defense guide to PGP</a></li>\n<li><a href=\"https://help.riseup.net/en/gpg-best-practices\" rel=\"nofollow ugc\">RiseUp.net&#8217;s OpenPGP best practices guide</a></li>\n<li><a href=\"https://www.openpgp.org/\" rel=\"nofollow ugc\">OpenPGP.org</a></li>\n</ul>\n<p>The S/MIME-encrypted emails can be decrypted by any S/MIME-compatible mail client. These include <a href=\"http://siber-sonic.com/mac/MailSMIME/\" rel=\"nofollow ugc\">Apple&#8217;s Mail on macOS</a> and <a href=\"https://support.apple.com/en-au/HT202345\" rel=\"nofollow ugc\">iOS for iPhone and iPad</a>, <a href=\"https://support.office.com/en-us/article/Encrypt-messages-by-using-S-MIME-in-Outlook-Web-App-2E57E4BD-4CC2-4531-9A39-426E7C873E26\" rel=\"nofollow ugc\">Microsoft Outlook</a>, <a href=\"http://www.claws-mail.org/faq/index.php/S/MIME_howto\" rel=\"nofollow ugc\">Claws Mail for GNU/Linux</a>, and more.</p>\n<p>For developers, WP PGP Encrypted Emails provides <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/blob/develop/README.markdown#openpgp-api\" rel=\"nofollow ugc\">an easy to use API to both OpenPGP</a> and <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/blob/develop/README.markdown#smime-api\" rel=\"nofollow ugc\">S/MIME</a> encryption, decryption, and integrity validation operations through the familiar <a href=\"https://codex.wordpress.org/Plugin_API\" rel=\"nofollow ugc\">WordPress plugin API</a> so you can use this plugin&#8217;s simple filter hooks to build custom OpenPGP- or S/MIME-based encryption functionality into your own plugins and themes.</p>\n<p><strong>Security Disclaimer</strong></p>\n<p>Security is a process, not a product. Using WP PGP Encrypted Emails does not guarantee that your site&#8217;s outgoing messages are invulnerable to every attacker, in every possible scenario, at all times. No single security measure, in isolation, can do that.</p>\n<p>Do not rely solely on this plugin for the security or privacy of your webserver. See the <a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/faq/\" rel=\"ugc\">Frequently Asked Questions</a> for more security advice and for more information about the rationale for this plugin.<br />\nIf you like this plugin, <strong>please consider <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">making a donation</a> for your use of the plugin</strong> or, better yet, contributing directly to <a href=\"http://Cyberbusking.org/\" rel=\"nofollow ugc\">my Cyberbusking fund</a>. Your support is appreciated!</p>\n<h4>Themeing</h4>\n<p>Theme authors can use the following code snippets to integrate a WordPress theme with this plugin.</p>\n<ul>\n<li>To link to a site&#8217;s OpenPGP signing public key: <code>&lt;?php print admin_url( 'admin-ajax.php?action=download_pgp_signing_public_key' ); ?&gt;</code></li>\n</ul>\n<h4>Plugin hooks</h4>\n<p>This plugin offers additional functionality intended for other plugin developers or theme authors to make use of. This functionality is documented here.</p>\n<h3>Filters</h3>\n<h4>`wp_user_encryption_method`</h4>\n<p>Gets the user&#8217;s preferred encryption method (either <code>pgp</code> or <code>smime</code>), if they have provided both an OpenPGP public key and an S/MIME certificate.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`wp_openpgp_user_key`</h4>\n<p>Gets the user&#8217;s saved OpenPGP public key from their WordPress profile data, immediately usable in other <code>openpgp_*</code> filters.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`openpgp_enarmor`</h4>\n<p>Gets an ASCII-armored representation of an OpenPGP data structure (like a key, or an encrypted message).</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to be armored.</li>\n</ul>\n</li>\n<li>Optional parameters:\n<ul>\n<li><code>string</code> <code>$marker</code> &#8211; The marker of the block (the text that follows <code>-----BEGIN</code>). Defaults to <code>MESSAGE</code>, but you should set this to a more appropriate value. If you are armoring a PGP public key, for instance, set this to <code>PGP PUBLIC KEY BLOCK</code>.</li>\n<li><code>string[]</code> <code>$headers</code> &#8211; An array of strings to apply as headers to the ASCII-armored block, usually used to insert comments or identify the OpenPGP client used. Defaults to <code>array()</code> (no headers).</li>\n</ul>\n</li>\n</ul>\n<p>Example: ASCII-armor a binary public key.</p>\n<pre><code>$ascii_key = apply_filters('openpgp_enarmor', $public_key, 'PGP PUBLIC KEY BLOCK');\n</code></pre>\n<h4>`openpgp_key`</h4>\n<p>Gets a binary OpenPGP public key for use in later PGP operations from an ASCII-armored representation of that key.</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$key</code> &#8211; The ASCII-armored PGP public key block.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Get a key saved as an ASCII string in the WordPress database option <code>my_plugin_pgp_public_key</code>.</p>\n<pre><code>$key = apply_filters('openpgp_key', get_option('my_plugin_pgp_public_key'));\n</code></pre>\n<h4>`openpgp_sign`</h4>\n<p><a href=\"https://www.gnupg.org/gph/en/manual/x135.html#AEN152\" rel=\"nofollow ugc\">Clearsigns</a> a message using a given private key.</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The message data to sign.</li>\n<li><code>OpenPGP_SecretKeyPacket</code> <code>$signing_key</code> &#8211; The signing key to use, obtained by passing the ASCII-armored private key through the <code>openpgp_key</code> filter.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Sign a short string.</p>\n<pre><code>$message = 'This is a message to sign.';\n$signing_key = apply_filters('openpgp_key', $ascii_key);\n$signed_message = apply_filters('openpgp_sign', $message, $signing_key);\n// $signed_message is now a clearsigned message\n</code></pre>\n<h4>`openpgp_encrypt`</h4>\n<p>Encrypts data to one or more PGP public keys or passphrases.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; Data to encrypt.</li>\n<li><code>array|string</code> <code>$keys</code> &#8211; Passphrases or keys to use to encrypt the data.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Encrypt the content of a blog post.</p>\n<pre><code>// First, get the PGP public key(s) of the recipient(s)\n$ascii_key = '-----BEGIN PGP PUBLIC KEY BLOCK-----\n[...snipped for length...]\n-----END PGP PUBLIC KEY BLOCK-----';\n$encryption_key = apply_filters('openpgp_key', $ascii_key);\n$encrypted_post = apply_filters('openpgp_encrypt', $post-&gt;post_content, $encryption_key);\n// Now you can safely send or display $encrypted_post anywhere you like and only\n// those who control the corresponding private key(s) can decrypt it.\n</code></pre>\n<h4>`openpgp_sign`</h4>\n<p>Signs a message (arbitrary data) with the given private key.</p>\n<p>Note that if your plugin uses the built-in WordPress core <code>wp_mail()</code> function and this plugin is active, your plugin&#8217;s outgoing emails are already automatically signed so you do not need to do anything. This filter is intended for use by plugin developers who want to create custom, trusted communiques between WordPress and some other system.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to sign.</li>\n</ul>\n</li>\n<li>Optional arguments:\n<ul>\n<li><code>OpenPGP_SecretKeyPacket</code> <code>$privatekey</code> &#8211; The private key used for signing the message. The default is to use the private key automatically generated during plugin activation. The automatically generated keypair is intended to be a low-trust, single-purpose keypair for your website itself, so you probably do not need or want to use this argument yourself.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Send a signed, encrypted JSON payload to a remote, insecure server.</p>\n<pre><code>$comment_data = get_comment(2); // get a WP_Comment object with comment ID 2\n// Create JSON payload\n$json = array('success' =&gt; true, 'action' =&gt; 'new_comment', 'data' =&gt; $comment_data);\n$url = 'http://insecure.example.com/';\n$response = wp_safe_remote_post($url, array(\n));\n</code></pre>\n<h4>`openpgp_sign_and_encrypt`</h4>\n<p>A convenience filter that applies <code>openpgp_sign</code> and then <code>openpgp_encrypt</code> to the result.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to sign and encrypt.</li>\n<li><code>string</code> <code>$signing_key</code> &#8211; The signing key to use.</li>\n<li><code>array|string</code> <code>$recipient_keys_and_passphrases</code> &#8211; Public key(s) of the recipient(s), or passphrases to encrypt to.</li>\n</ul>\n</li>\n</ul>\n<h4>`wp_openpgp_user_key`</h4>\n<p>Gets the user&#8217;s saved S/MIME public certificate from their WordPress profile data, immediately usable in other <code>smime_*</code> filters.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`smime_certificate`</h4>\n<p>Gets a PHP resource handle to an X.509 Certificate.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>mixed</code> <code>$cert</code> &#8211; The certificate, either as a string to a file, or raw PEM-encoded certificate data.</li>\n</ul>\n</li>\n</ul>\n<h4>`smime_certificate_pem_encode`</h4>\n<p>Encodes (&#8220;exports&#8221;) a given X.509 certificate as PEM format.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>resource</code> <code>$cert</code></li>\n</ul>\n</li>\n</ul>\n<h4>`smime_encrypt`</h4>\n<p>Encrypts a message as an S/MIME email given a public certificate.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$message</code> &#8211; The message contents to encrypt.</li>\n<li><code>string|string[]</code> <code>$headers</code> &#8211; The message headers for the encrypted part.</li>\n<li><code>resource|array</code> <code>$certificates</code> &#8211; The recipient&#8217;s certificate, or an array of recipient certificates.</li>\n</ul>\n</li>\n</ul>\n<p>This filter returns an array with two keys, <code>headers</code> and <code>message</code>, wherein the message is encrypted.</p>\n<p>Example: send an encrypted email via <code>wp_mail()</code>. (You do not need to do this if the recipient is registered as your site&#8217;s user, because this plugin does that automatically. Only do this if you need to send S/MIME encrypted email to an address not stored in WordPress&#8217;s own database.)</p>\n<pre><code>$cert = apply_filters( 'smime_certificate', get_option( 'my_plugin_smime_certificate' ) );\n$body = 'This is a test email message body.';\n$head = array(\n    'From' =&gt; get_option( 'admin_email' ),\n);\n$smime_data = apply_filters( 'smime_encrypt', $body, $head, $cert );\nif ( $smime_data ) {\n    wp_mail(\n        'recipient@example.com',\n        'Test message.',\n        $smime_data['message'], // message is sent encrypted\n        $smime_data['headers']\n    );\n}\n</code></pre>\n",
        "installation": "<p>WP PGP Encrypted Emails can be installed automatically from the WordPress plugin repository by searching for &#8220;PGP Encrypted Emails&#8221; in the &#8220;Add new plugin&#8221; screen of your WordPress admin site and clicking the &#8220;Install now&#8221; button.</p>\n<p>Minimum requirements:</p>\n<ul>\n<li>PHP version 5.4 or later.</li>\n<li>S/MIME support requires the <a href=\"https://secure.php.net/manual/book.openssl.php\" rel=\"nofollow ugc\">OpenSSL PHP extension</a>. (This is almost certainly already installed for you.)</li>\n</ul>\n<p>The plugin will automatically de-activate itself, or automatically disable certain features, if these requirements are not met. If you do not see a given feature in the user interface, ensure your server (and your web hosting provider) meet the above requirements!</p>\n<p>WP PGP Encrypted Emails can also be installed manually by following these instructions:</p>\n<ol>\n<li><a href=\"https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.zip\" rel=\"nofollow ugc\">Download the latest plugin code</a> from the WordPress plugin repository.</li>\n<li>Upload the unzipped <code>wp-pgp-encrypted-emails</code> folder to the <code>/wp-content/plugins/</code> directory of your WordPress installation.</li>\n<li>Activate the plugin through the &#8220;Plugins&#8221; menu in WordPress.</li>\n</ol>\n<p>Once activated, each user who wants to receive encrypted emails must add their OpenPGP public key or S/MIME public certificate to their profile, and optionally choose the type of encryption they prefer messages addressed to them will use.</p>\n<p>See the <a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/screenshots/\" rel=\"ugc\">screenshots</a> for a brief walkthrough of how to configure WP PGP Encrypted Emails after it is installed.</p>\n<p>If a user does not have an OpenPGP public key already, they need to use an OpenPGP-compatible client to generate one themselves. (<a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/faq/\" rel=\"ugc\">Learn more about OpenPGP-compatible clients</a>.) Users will need to have the private key corresponding to the public key saved in their WordPress profile in order to be able to decrypt the email they receive. To learn more about generating keys and decrypting email, consult one (or more) of the following guides:</p>\n<ul>\n<li><a href=\"https://ssd.eff.org/en/module/introduction-public-key-cryptography-and-pgp\" rel=\"nofollow ugc\">The Electronic Frontier Foundation&#8217;s Surveillance Self-Defense guide to PGP</a></li>\n<li><a href=\"https://help.riseup.net/en/gpg-best-practices\" rel=\"nofollow ugc\">RiseUp.net&#8217;s OpenPGP best practices guide</a></li>\n</ul>\n<p>I have also found the following articles useful, but can not personally vouch for their accuracy:</p>\n<ul>\n<li><a href=\"http://notes.jerzygangi.com/the-best-pgp-tutorial-for-mac-os-x-ever/\" rel=\"nofollow ugc\">Jerzy Gangi&#8217;s &#8220;Best PGP Tutorial for Mac OS X, ever&#8221;</a></li>\n<li><a href=\"https://web.archive.org/web/20190503073351/https://www.deepdotweb.com/2015/02/17/basic-guide-pgp-linux/\" rel=\"nofollow ugc\">DeepDotWeb&#8217;s Basic Guide to PGP on Linux</a></li>\n<li><a href=\"http://www.bitcoinnotbombs.com/beginners-guide-to-pgp/\" rel=\"nofollow ugc\">BitCoin Not Bombs: Beginner&#8217;s Guide to PGP</a></li>\n</ul>\n<p>If you found a good guide to using PGP/GPG that I haven&#8217;t listed here, please share it in <a href=\"https://wordpress.org/support/plugin/wp-pgp-encrypted-emails#postform\" rel=\"ugc\">the WP PGP Encrypted Emails plugin support forum</a>.</p>\n<p>Similarly, if a user doesn&#8217;t already have one, they will need to obtain an S/MIME certificate from a Certificate Authority (such as a public CA or their employer), or generate a self-signed one themselves. <a href=\"http://kb.mozillazine.org/Getting_an_SMIME_certificate\" rel=\"nofollow ugc\">Learn more about getting an S/MIME certificate</a>.</p>\n<p>To view a list of known issues with this plugin or to report a bug, please use <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/\" rel=\"nofollow ugc\">the project&#8217;s issue tracker</a>.</p>\n",
        "faq": "\n<dt id='what%20is%20an%20openpgp-compatible%20client%20and%20where%20can%20i%20get%20one%3F'>\nWhat is an OpenPGP-compatible client and where can I get one?\n</h4>\n<p>\n<p>An OpenPGP-compatible client is simply an app that can read, write, and verify messages encrypted or signed using PGP technology. There are great, free apps for every major platform, including Windows, Mac, Linux, Android, iPhones, iPads, and more. Which app you choose depends largely on which device you already have, and then a bit about your personal tastes.</p>\n<p>Since there are so many OpenPGP-compatible apps to choose from, I recommend sticking to the <a href=\"https://prism-break.org/en/protocols/gpg/\" rel=\"nofollow ugc\">ones listed on the PRISM-Break.org website</a>. (Note that PRISM-Break calls it &#8220;GPG&#8221; instead of &#8220;PGP,&#8221; but the two terms are generally synonymous.) Once you choose an OpenPGP-compatible app for your platform, consider seeking out its help and support documentation to get started using it, or check out some of the generic PGP/GPG guides listed at the end of <a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/installation/\" rel=\"ugc\">this plugin&#8217;s Installation page</a>.</p>\n</p>\n<dt id='i%20can%27t%20decrypt%20messages%20addressed%20to%20my%20admin%20email%20address%21'>\nI can&#8217;t decrypt messages addressed to my admin email address!\n</h4>\n<p>\n<p>If you have registered a WordPress user account with the same email address as your site&#8217;s admin email address (in the Settings &rarr; General screen), then WP PGP Encrypted Emails will first check for a public key or certificate in the administrative Email Encryption settings (Settings &rarr; Email Encryption) before looking at your user&#8217;s profile settings. If an encryption key or certificate exists in the administrative settings, that key will be used instead of the key or certificate in the user&#8217;s profile. To resolve this issue, either ensure that you enter encryption keys in only one location (the administrative screen or the user&#8217;s profile), or ensure these keys are the same.</p>\n<p>If you still cannot decrypt messages, make absolutely certain you have the matching private key or certificate corresponding to the public key or certificate that was used to encrypt the message. Unfortunately, it is highly infeasible that anyone on Earth will be able to decrypt messages encrypted to a public key or certificate that you do not have the associated private key for. That is, of course, the whole point of this software.</p>\n</p>\n<dt id='how%20do%20i%20read%20an%20encrypted%20comment%3F'>\nHow do I read an encrypted comment?\n</h4>\n<p>\n<p>If you have received a &#8220;Private&#8221; comment, you will need to use an OpenPGP-compatible PGP client to decrypt and read it. There are many free apps that do this. Which one you choose depends on what kind of computer you are already using. If you use Windows, I suggest installing and using <a href=\"https://www.gpg4win.org/\" rel=\"nofollow ugc\">GPG4Win</a> since it provides the most features. For Mac OS X users, I suggest <a href=\"http://gpgtools.org/\" rel=\"nofollow ugc\">MacGPG</a> for the same reason, and Linux users should check their distro&#8217;s package repository for compatible options. (For Ubuntu users, the <a href=\"http://packages.ubuntu.com/precise/gnome/seahorse-nautilus\" rel=\"nofollow ugc\">Seahorse-Nautilus</a> plugin is popular.)</p>\n<p>I might also add support for an in-browser client based on <a href=\"http://openpgpjs.org/\" rel=\"nofollow ugc\">OpenPGP.js</a> at some point, but for now you will still need an external program to read encrypted comments. Please consider <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">donating</a> to help resource me work on this if that is a feature you&#8217;d like to see.</p>\n</p>\n<dt id='why%20are%20emails%20from%20%5Bother-plugin-here%5D%20not%20being%20encrypted%3F'>\nWhy are emails from [other-plugin-here] not being encrypted?\n</h4>\n<p>\n<p>Make sure the emails the other plugin sends are being addressed to an email account that WordPress knows about and that WordPress knows which OpenPGP public key or S/MIME certificate to use when encrypting email destined for that address.</p>\n<p>More specifically, this means the <code>TO:</code> field of the outgoing email needs to match either your WordPress&#8217;s &#8220;admin email&#8221; address or the email address of one of your WordPress user accounts, and you need to provide the OpenPGP public key or S/MIME public certificate you want WordPress to use when encrypting the message and sending email to that address. In many contact form plugins, you can supply an arbitrary email address to send those emails to, but if that email address is not the address of a user on your site, WP PGP Encrypted Emails won&#8217;t know which OpenPGP public key or S/MIME public certificate to use for encryption.</p>\n<p>As a workaround, simply create an unprivileged (&#8220;Subscriber&#8221; <a href=\"https://codex.wordpress.org/Roles_and_Capabilities\" rel=\"nofollow ugc\">role</a>) new WordPress user account with that email address and enter the OpenPGP public key or S/MIME certificate in that user&#8217;s profile. (Either accept the automatically generated password, or supply a new very strong passphrase, since you will not need to remember it because you will never need to log in with that user account.)</p>\n</p>\n<dt id='why%20are%20my%20emails%20appearing%20strangely%20in%20my%20email%20client%3F'>\nWhy are my emails appearing strangely in my email client?\n</h4>\n<p>\n<p>Issues with character sets, accented characters, different human languages, or content types not appearing correctly are almost always the result of a misconfiguration in the email-sending plugin you are using. Many contact form plugins, for example, allow you to supply custom email headers. WP PGP Encrypted Emails takes great care not to corrupt the email message sent by the underlying plugin that generated the email in the first place. However, this also means that if you do not set up your contact form or email-sending plugin correctly, this plugin won&#8217;t fix the error.</p>\n<p>Most often, this is simply a matter of setting the correct Content-Type header in your contact form or email-sending plugin&#8217;s settings.</p>\n</p>\n<dt id='is%20this%20plugin%20%2Areally%2A%20secure%3F'>\nIs this plugin *really* secure?\n</h4>\n<p>\n<p>Against the NSA? No, probably not. Against a nosy co-worker? Yes, probably.</p>\n<p>The &#8220;realness&#8221; of security cannot &#8220;really&#8221; be measured in abstract, imprecise terms, but rather only based on what real threats you are likely to face and what risks you are vulnerable to if those threats materialize in reality. You have a much better sense of the answers to these things than I do for your situation, because I am not you. Security professionals call this process &#8220;threat modeling,&#8221; and if you are &#8220;really&#8221; concerned for your security (I encourage you to be!) then learning how to conduct a threat assessment for yourself is a good idea. <a href=\"https://ssd.eff.org/en/module/introduction-threat-modeling\" rel=\"nofollow ugc\">Learn more about threat modeling from the EFF&#8217;s Surveillance Self-Defense Guide</a>.</p>\n</p>\n<dt id='if%20this%20plugin%20isn%27t%20secure%20against%20the%20nsa%2C%20what%20good%20is%20it%3F'>\nIf this plugin isn&#8217;t secure against the NSA, what good is it?\n</h4>\n<p>\n<p>TL;DR: Don&#8217;t let perfect be the enemy of good.</p>\n<p>First of all, not everyone&#8217;s security needs are the same. (See &#8220;threat modeling,&#8221; discussed in the previous question.)</p>\n<ul>\n<li>Against an opportunistic attacker, your security measures merely need to be better than your neighbor&#8217;s in order to be sufficient to deter attacks. This is &#8220;good enough&#8221; security for most users of WordPress, especially on shared hosting accounts (which are generally closer to the unsafe side of the security spectrum no matter what plugins you install anyway).</li>\n<li>Against a well-resourced, determined adversary who has specifically singled you out, however, what matters is that your ability to secure yourself exceeds your adversary&#8217;s ability to compromise the specific security precautions you&#8217;ve put in place. Your relative security as compared with your neighbor&#8217;s doesn&#8217;t matter. In this case, it is better to do anything and everything you reasonably can do for your protection, even if no specific security measure will be enough on its own. This is known as &#8220;<a href=\"https://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29\" rel=\"nofollow ugc\">defense in depth</a>&#8221; and is analogous to the way a medival castle had a moat that surrounded an outer wall which itself surrounded an inner wall protecting a keep. These concentric rings of security provide redundancy and serve to slow an attacker&#8217;s intrusion. This plugin can be considered <em>one</em> small part of a larger defense-in-depth security approach for your website.</li>\n</ul>\n<p>Read <a href=\"https://www.schneier.com/blog/archives/2014/12/lessons_from_th_4.html\" rel=\"nofollow ugc\">Bruce Schneier&#8217;s &#8220;Lessons from the Sony Hack&#8221;</a> for a brief, real-life case study in understanding this important nuance between opportunistic and focused attackers.</p>\n<p>Further, security is largely a matter of operational practice, not theoretics. If you never use PGP/GPG because the only tools you have access to are not perfect, then you will not have the experience you need to know how to use PGP/GPG when you actually get access to it, because you never even practiced using it. By way of analogy, if you want to learn swordfighting but all you have is sticks you picked up in the forest, you are better off picking up those sticks and practicing with them than waiting and not practicing at all until you get your hands on steel swords.</p>\n</p>\n<dt id='can%20i%20use%20a%20%22strong%22%20key%20for%20my%20user%20account%3F'>\nCan I use a &#8220;strong&#8221; key for my user account?\n</h4>\n<p>\n<p>Yes. You can use any OpenPGP public key you generate from any OpenPGP-compatible client.</p>\n</p>\n<dt id='how%20strong%20is%20the%20signing%20key%20the%20plugin%20generates%3F'>\nHow strong is the signing key the plugin generates?\n</h4>\n<p>\n<p>When generating an OpenPGP signing keypair for your WordPress site, this plugin will create a 2,048-bit RSA OpenPGP keypair. This is considered &#8220;okay&#8221; (but not &#8220;great&#8221;) by 2018 standards. Unfortunately, many hosts will not allow the plugin to create a stronger keypair because of the computation required. Then again, this key is used only for signing, not encryption. Your own OpenPGP public key is always used for encryption, and you are of course encouraged to make that key as strong as you want.</p>\n<p>If you want to use a stronger signing keypair, you can generate one yourself (offline), though you will need to load the key into your WordPress database yourself to use it with this plugin. I consider this extra step &#8220;paranoid,&#8221; but you are of course welcome to be as careful as you feel is appropriate. ðŸ™‚</p>\n</p>\n\n",
        "changelog": "<h4>0.8.0</h4>\n<ul>\n<li>Maintenance: Drop support for PHP versions earlier than 7.4, add experimental support for PHP 8.x.</li>\n</ul>\n<h4>0.7.6</h4>\n<ul>\n<li>Maintenance: Update dependencies.\n<ul>\n<li><code>phpseclib</code> is updated to version 2.0.31 and addresses a moderate severity security vulnerability.</li>\n</ul>\n</li>\n</ul>\n<h4>0.7.5</h4>\n<ul>\n<li>Maintenance: Update dependencies. Note also that this version officially drops support for PHP versions earlier than the <a href=\"https://wordpress.org/about/requirements/\" rel=\"ugc\">current WordPress recommendations</a>, which at the time of this writing is PHP v7.4. If you are still running WordPress in a &#8220;legacy&#8221; environment (using PHP 5.x), you must update or push your hosting provider to update your version of PHP to 7.4 or greater to continue using this plugin.</li>\n</ul>\n<h4>0.7.4</h4>\n<ul>\n<li>Security: Always use the AES-256 cipher in CBC mode when encrypting S/MIME emails. This change drops support for PHP versions less than 5.4.</li>\n<li>Security: Improved shredding of temporary files needed for S/MIME encryption with 3-pass overwrite and explicit filesystem write buffer flushing.</li>\n<li>Enhancement: Improve S/MIME compatibility with some email clients, notably Roundcube. Props @githubuserx.</li>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/18\" rel=\"nofollow ugc\">Bugfix</a>: Conflict where admin email without encryption keys matching user email no longer results in unencrypted email being sent.</li>\n<li>Minor code cleanup and documentation improvements.</li>\n</ul>\n<h4>0.7.3</h4>\n<ul>\n<li>Bugfix: Messages with <code>Content-Type: text/html</code> headers that were also S/MIME encrypted now render properly. Props @githubuserx.</li>\n<li>Bugfix: Ensure MIME subtypes in <code>Content-Type</code> mail headers are retained.</li>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/33\" rel=\"nofollow ugc\">Bugfix</a>: Do not enqueue admin-area stylesheet on site front-end.</li>\n</ul>\n<h4>0.7.2</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/pull/29\" rel=\"nofollow ugc\">Bugfix</a>: Fixes a problem where S/MIME email sending fails due to a web hoster restriction.</li>\n</ul>\n<h4>0.7.1</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/28\" rel=\"nofollow ugc\">Enhancement</a>: Offer a simple &#8220;Send me a test email&#8221; button to let inexperienced users easily test their encryption setup.</li>\n</ul>\n<h4>0.7</h4>\n<ul>\n<li>Feature: WooCommerce integration. Customers can add their own OpenPGP keys or S/MIME certificates on their &#8220;My Account&#8221; front-end supplied by WooCommerce. By default, emails sent to Customers are <em>not</em> signed with the site&#8217;s PGP signing key, though individual customers can opt-in to receive either encrypted and signed or just signed emails as they wish.</li>\n<li>Developer: Theme authors can override the plugin&#8217;s default WooCommerce integration file by adding a <code>woocommerce-functions.php</code> file to their theme. Please only do this if you know what you are doing.</li>\n<li>Update OpenPGP-PHP libraries to current released version.</li>\n</ul>\n<h4>0.6.3</h4>\n<ul>\n<li><a href=\"https://wordpress.org/support/topic/accept-also-smime-keys/#post-9171196\" rel=\"ugc\">Bugfix</a>: Fix compatiblity with third-party contact form plugins (namely Contact Form 7).</li>\n<li><a href=\"https://wordpress.org/support/topic/delete-plugin-not-working/\" rel=\"ugc\">Bugfix</a>: Fix issue with uninstallation.</li>\n</ul>\n<h4>0.6.2</h4>\n<ul>\n<li>Feature: New S/MIME API filter, <code>smime_pem_to_der</code>.\n<ul>\n<li>This supports certain applications that need certificate data in DER format.</li>\n</ul>\n</li>\n</ul>\n<h4>0.6.1</h4>\n<ul>\n<li>Bugfix: Fix comment filter call.</li>\n</ul>\n<h4>0.6.0</h4>\n<ul>\n<li><a href=\"https://wordpress.org/support/topic/accept-also-smime-keys/\" rel=\"ugc\">Feature</a>: S/MIME support! ðŸ™‚\n<ul>\n<li>Three new API filter hooks are provided to offer S/MIME encryption. These are <code>smime_certificate</code>, <code>smime_certificate_pem_encode</code> and <code>smime_encrypt</code>. See <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/#smime-api\" rel=\"nofollow ugc\">S/MIME API</a> for details.</li>\n</ul>\n</li>\n</ul>\n<h4>0.5.0</h4>\n<ul>\n<li><a href=\"https://wordpress.org/support/topic/can-i-disable-signing-of-messages-to-unknown-users/\" rel=\"ugc\">Feature</a>: Configure whether email destined for addresses that are not associated with user accounts are automatically PGP-signed.</li>\n<li>Feature: A &#8220;delete PGP signing keypair on uninstall&#8221; option has been added. When enabled and the plugin is uninstalled, the site&#8217;s PGP signing keypair is deleted from the WordPress database.</li>\n<li>Minor bugfixes.</li>\n</ul>\n<h4>0.4.4</h4>\n<ul>\n<li><a href=\"https://wordpress.org/support/topic/how-to-revoke-keys-generated-with-this-plugin?replies=4\" rel=\"ugc\">Bugfix</a>: Generate signing key that can be used to create a revocation certificate.</li>\n</ul>\n<h4>0.4.3</h4>\n<ul>\n<li>Site signing key is generated with correct <a href=\"https://tools.ietf.org/html/rfc4880#section-5.2.3.21\" rel=\"nofollow ugc\">OpenPGP key flags</a> (shown as <code>S</code> for signing and <code>C</code> for certification in <a href=\"https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html#GPG-Configuration-Options\" rel=\"nofollow ugc\">GnuPG</a>).</li>\n<li>Update <code>openpgp-php</code> library and dependencies.</li>\n</ul>\n<h4>0.4.2</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/10\" rel=\"nofollow ugc\">Bugfix</a>: Improve compatibility with some third-party plugins.</li>\n</ul>\n<h4>0.4.1</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/8\" rel=\"nofollow ugc\">Bugfix</a>: Plugins that call <code>wp_mail()</code> with an array no longer cause PHP warnings.</li>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/7\" rel=\"nofollow ugc\">Bugfix</a>: Fix syntax error when running on PHP 5.3 or earlier.</li>\n</ul>\n<h4>0.4.0</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/1\" rel=\"nofollow ugc\">Feature</a>: Admins can now generate a PGP signing keypair for the blog itself. If a signing keypair exists, outgoing emails will be automatically signed.\n<ul>\n<li>This keypair is intended <em>only</em> for signing outgoing emails from WordPress itself. It is <em>not</em> intended to be used for any other purpose. <em>Do not</em> use this keypair for emails you send from your own mail client. <em>Do not</em> use this keypair as your personal PGP key. <em>Do not</em> export this key for use in any other system. This keypair should be treated as a low-trust, single-purpose keypair reserved exclusively for your website itself.</li>\n<li>After adding a PGP signing keypair, users can download the site&#8217;s public key part from their profile pages.</li>\n<li>Theme authors can always link to a site&#8217;s PGP signing public key with the following code: <code>print admin_url('admin-ajax.php?action=download_pgp_signing_public_key')</code></li>\n</ul>\n</li>\n<li>Developer: New filter hooks. These are documented on the <a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/other_notes/\" rel=\"ugc\">Other Notes</a> page.\n<ul>\n<li><code>openpgp_enarmor</code> filter for ASCII-armoring arbitrary OpenPGP data.</li>\n<li><code>openpgp_sign</code> filter for (clear)signing an arbitrary message.</li>\n</ul>\n</li>\n</ul>\n<h4>0.3.0</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/6\" rel=\"nofollow ugc\">Feature</a>: Authors with a PGP public key set in their profile can now receive &#8220;private&#8221; comments. Readers write their comment as normal, and can then enable the &#8220;Private&#8221; checkbox next to the comment submit button. This will automatically encrypt the comment to the post author&#8217;s PGP public key and saves the comment in the WordPress database as an ASCII-armored string.\n<ul>\n<li>This feature is <em>not</em> secure against eavesdropping, other network attackers, or malicious web host. It does <em>not</em> prevent server administrators from reading the contents of your comment. Rather, it prevents <em>other readers</em> or unprivileged users of the blog from reading your comment after it has been sent to the author. This is useful if, for instance, you want to communicate semi-privately with the author in an otherwise public forum (the comment thread) but do not know the author&#8217;s email address, perhaps because the author themselves wish to remain pseudonymous (and thus do not provide a valid email address associated with their PGP key).</li>\n</ul>\n</li>\n</ul>\n<h4>0.2.0</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/5\" rel=\"nofollow ugc\">Developer</a>: Added two new filters, <code>openpgp_key</code> and <code>openpgp_encrypt</code> so plugin developers and theme authors can encrypt arbitrary data, too.</li>\n</ul>\n<h4>0.1.2</h4>\n<ul>\n<li><a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/issues/3\" rel=\"nofollow ugc\">Security</a>: Switch PGP library to <a href=\"https://github.com/singpolyma/openpgp-php\" rel=\"nofollow ugc\">OpenPGP-PGP</a>.</li>\n</ul>\n<h4>0.1.1</h4>\n<ul>\n<li>Bugfix: Fix <code>Fatal error</code> in cases where the public key is set to <code>false</code>.</li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "Signs and encrypts emails using PGP/GPG keys or X.509 certificates. Provides OpenPGP and S/MIME functions via WordPress plugin API.",
    "description": "<p>WP PGP Encrypted Emails can automatically sign and encrypt any email that WordPress sends to your site&#8217;s admin email address or your users&#8217;s email addresses. You give it a copy of the recipient&#8217;s OpenPGP public key and/or their S/MIME certificate, and it does the rest. You can even automatically generate an OpenPGP signing keypair for your site to use.</p>\n<p>Encrypting outgoing emails protects your user&#8217;s privacy by ensuring that emails intended for them can be read only by them, and them alone. Moreover, signing those emails helps your users verify that email they receive purporting to be from your site was <em>actually</em> sent by your server, and not some imposter. If you&#8217;re a plugin or theme developer, you can encrypt and/or sign <em>arbitrary data</em> using this plugin&#8217;s OpenPGP and S/MIME APIs, which are both built with familiar, standard WordPress filter hooks. This enables you to develop highly secure communication and publishing tools fully integrated with your WordPress install. See the <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/#readme\" rel=\"nofollow ugc\"><code>README.markdown</code></a> file for details on cryptographic implementation and API usage.</p>\n<p><em>Donations for this and my other free software plugins make up a chunk of my income. If you continue to enjoy this plugin, please consider <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">making a donation</a>. ðŸ™‚ Thank you for your support!</em></p>\n<p>Plugin features:</p>\n<ul>\n<li>Processes <em>all</em> email your site generates, automatically and transparently.</li>\n<li>Configure outbound signing: sign email sent to <em>all</em> recipients, or just savvy ones.</li>\n<li>Per-user encryption keys and certificates; user manages their own OpenPGP keys and S/MIME certificates.</li>\n<li>Compatible with thousands (yes, thousands) of third-party contact form plugins.</li>\n<li>Full interoperability with all standards-compliant OpenPGP and S/MIME implementations.</li>\n<li>Options to enforce further privacy best practices (e.g., removing <code>Subject</code> lines).</li>\n<li>Fully multisite compatible, out of the box. No additional configuration for large networks!</li>\n<li>No binaries to install or configure; everything you need is in the plugin itself.</li>\n<li>Bells and whistles included! For instance, visitors can encrypt comments on posts so only the author can read them.</li>\n<li>Built-in, customizable integration with popular third-party plugins, such as <a href=\"https://wordpress.org/plugins/woocommerce/\" rel=\"ugc\">WooCommerce</a>.</li>\n<li>Always <strong>FREE</strong>. Replaces paid email encryption &#8220;upgrades,&#8221; and gets rid of yearly subscription fees. (<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">Donations</a> appreciated!)</li>\n<li>And <em>more</em>, of course. ðŸ˜‰</li>\n</ul>\n<p>The plugin works transparently for <em>all email</em> your site generates, and will also sign and encrypt outgoing email generated by other plugins (such as contact form plugins) or the built-in WordPress notification emails. All you have to do is add one or more OpenPGP keys or an S/MIME certificate to the Email Encryption screen (WordPress Admin Dashboard &rarr; Settings &rarr; Email Encryption). Each user can opt to also remove envelope information such as email subject lines, which encryption schemes cannot protect. With this plugin, there&#8217;s no longer any need to pay for the &#8220;pro&#8221; version of your favorite contact form plugin to get the benefit of email privacy.</p>\n<p>Each of your site&#8217;s users can supply their own, personal OpenPGP public key and/or X.509 S/MIME certificate for their own email address to have WordPress automatically encrypt any email destined for them. (They merely need to update their user profile.) They can choose which encryption method to use. Once set up, all future emails WordPress sends to that user will be encrypted using the standards-based OpenPGP or S/MIME technologies.</p>\n<p>The OpenPGP-encrypted emails can be decrypted by any OpenPGP-compatible mail client, such as <a href=\"https://gpgtools.org/\" rel=\"nofollow ugc\">MacGPG</a> (macOS), <a href=\"https://www.gpg4win.org/\" rel=\"nofollow ugc\">GPG4Win</a> (Windows), <a href=\"https://www.enigmail.net/\" rel=\"nofollow ugc\">Enigmail</a> (cross-platform), <a href=\"https://openkeychain.org/\" rel=\"nofollow ugc\">OpenKeychain</a> (Android), or <a href=\"https://ipgmail.com/\" rel=\"nofollow ugc\">iPGMail</a> (iPhone/iOS). For more information on reading encrypted emails, generating keys, and other uses for OpenPGP-compatible encryption, consult any (or all!) of the following guides:</p>\n<ul>\n<li><a href=\"https://ssd.eff.org/en/module/introduction-public-key-cryptography-and-pgp\" rel=\"nofollow ugc\">The Electronic Frontier Foundation&#8217;s Surveillance Self-Defense guide to PGP</a></li>\n<li><a href=\"https://help.riseup.net/en/gpg-best-practices\" rel=\"nofollow ugc\">RiseUp.net&#8217;s OpenPGP best practices guide</a></li>\n<li><a href=\"https://www.openpgp.org/\" rel=\"nofollow ugc\">OpenPGP.org</a></li>\n</ul>\n<p>The S/MIME-encrypted emails can be decrypted by any S/MIME-compatible mail client. These include <a href=\"http://siber-sonic.com/mac/MailSMIME/\" rel=\"nofollow ugc\">Apple&#8217;s Mail on macOS</a> and <a href=\"https://support.apple.com/en-au/HT202345\" rel=\"nofollow ugc\">iOS for iPhone and iPad</a>, <a href=\"https://support.office.com/en-us/article/Encrypt-messages-by-using-S-MIME-in-Outlook-Web-App-2E57E4BD-4CC2-4531-9A39-426E7C873E26\" rel=\"nofollow ugc\">Microsoft Outlook</a>, <a href=\"http://www.claws-mail.org/faq/index.php/S/MIME_howto\" rel=\"nofollow ugc\">Claws Mail for GNU/Linux</a>, and more.</p>\n<p>For developers, WP PGP Encrypted Emails provides <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/blob/develop/README.markdown#openpgp-api\" rel=\"nofollow ugc\">an easy to use API to both OpenPGP</a> and <a href=\"https://github.com/fabacab/wp-pgp-encrypted-emails/blob/develop/README.markdown#smime-api\" rel=\"nofollow ugc\">S/MIME</a> encryption, decryption, and integrity validation operations through the familiar <a href=\"https://codex.wordpress.org/Plugin_API\" rel=\"nofollow ugc\">WordPress plugin API</a> so you can use this plugin&#8217;s simple filter hooks to build custom OpenPGP- or S/MIME-based encryption functionality into your own plugins and themes.</p>\n<p><strong>Security Disclaimer</strong></p>\n<p>Security is a process, not a product. Using WP PGP Encrypted Emails does not guarantee that your site&#8217;s outgoing messages are invulnerable to every attacker, in every possible scenario, at all times. No single security measure, in isolation, can do that.</p>\n<p>Do not rely solely on this plugin for the security or privacy of your webserver. See the <a href=\"https://wordpress.org/plugins/wp-pgp-encrypted-emails/faq/\" rel=\"ugc\">Frequently Asked Questions</a> for more security advice and for more information about the rationale for this plugin.<br />\nIf you like this plugin, <strong>please consider <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\" rel=\"nofollow ugc\">making a donation</a> for your use of the plugin</strong> or, better yet, contributing directly to <a href=\"http://Cyberbusking.org/\" rel=\"nofollow ugc\">my Cyberbusking fund</a>. Your support is appreciated!</p>\n<h4>Themeing</h4>\n<p>Theme authors can use the following code snippets to integrate a WordPress theme with this plugin.</p>\n<ul>\n<li>To link to a site&#8217;s OpenPGP signing public key: <code>&lt;?php print admin_url( 'admin-ajax.php?action=download_pgp_signing_public_key' ); ?&gt;</code></li>\n</ul>\n<h4>Plugin hooks</h4>\n<p>This plugin offers additional functionality intended for other plugin developers or theme authors to make use of. This functionality is documented here.</p>\n<h3>Filters</h3>\n<h4>`wp_user_encryption_method`</h4>\n<p>Gets the user&#8217;s preferred encryption method (either <code>pgp</code> or <code>smime</code>), if they have provided both an OpenPGP public key and an S/MIME certificate.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`wp_openpgp_user_key`</h4>\n<p>Gets the user&#8217;s saved OpenPGP public key from their WordPress profile data, immediately usable in other <code>openpgp_*</code> filters.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`openpgp_enarmor`</h4>\n<p>Gets an ASCII-armored representation of an OpenPGP data structure (like a key, or an encrypted message).</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to be armored.</li>\n</ul>\n</li>\n<li>Optional parameters:\n<ul>\n<li><code>string</code> <code>$marker</code> &#8211; The marker of the block (the text that follows <code>-----BEGIN</code>). Defaults to <code>MESSAGE</code>, but you should set this to a more appropriate value. If you are armoring a PGP public key, for instance, set this to <code>PGP PUBLIC KEY BLOCK</code>.</li>\n<li><code>string[]</code> <code>$headers</code> &#8211; An array of strings to apply as headers to the ASCII-armored block, usually used to insert comments or identify the OpenPGP client used. Defaults to <code>array()</code> (no headers).</li>\n</ul>\n</li>\n</ul>\n<p>Example: ASCII-armor a binary public key.</p>\n<pre><code>$ascii_key = apply_filters('openpgp_enarmor', $public_key, 'PGP PUBLIC KEY BLOCK');\n</code></pre>\n<h4>`openpgp_key`</h4>\n<p>Gets a binary OpenPGP public key for use in later PGP operations from an ASCII-armored representation of that key.</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$key</code> &#8211; The ASCII-armored PGP public key block.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Get a key saved as an ASCII string in the WordPress database option <code>my_plugin_pgp_public_key</code>.</p>\n<pre><code>$key = apply_filters('openpgp_key', get_option('my_plugin_pgp_public_key'));\n</code></pre>\n<h4>`openpgp_sign`</h4>\n<p><a href=\"https://www.gnupg.org/gph/en/manual/x135.html#AEN152\" rel=\"nofollow ugc\">Clearsigns</a> a message using a given private key.</p>\n<ul>\n<li>Required parameters:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The message data to sign.</li>\n<li><code>OpenPGP_SecretKeyPacket</code> <code>$signing_key</code> &#8211; The signing key to use, obtained by passing the ASCII-armored private key through the <code>openpgp_key</code> filter.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Sign a short string.</p>\n<pre><code>$message = 'This is a message to sign.';\n$signing_key = apply_filters('openpgp_key', $ascii_key);\n$signed_message = apply_filters('openpgp_sign', $message, $signing_key);\n// $signed_message is now a clearsigned message\n</code></pre>\n<h4>`openpgp_encrypt`</h4>\n<p>Encrypts data to one or more PGP public keys or passphrases.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; Data to encrypt.</li>\n<li><code>array|string</code> <code>$keys</code> &#8211; Passphrases or keys to use to encrypt the data.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Encrypt the content of a blog post.</p>\n<pre><code>// First, get the PGP public key(s) of the recipient(s)\n$ascii_key = '-----BEGIN PGP PUBLIC KEY BLOCK-----\n[...snipped for length...]\n-----END PGP PUBLIC KEY BLOCK-----';\n$encryption_key = apply_filters('openpgp_key', $ascii_key);\n$encrypted_post = apply_filters('openpgp_encrypt', $post-&gt;post_content, $encryption_key);\n// Now you can safely send or display $encrypted_post anywhere you like and only\n// those who control the corresponding private key(s) can decrypt it.\n</code></pre>\n<h4>`openpgp_sign`</h4>\n<p>Signs a message (arbitrary data) with the given private key.</p>\n<p>Note that if your plugin uses the built-in WordPress core <code>wp_mail()</code> function and this plugin is active, your plugin&#8217;s outgoing emails are already automatically signed so you do not need to do anything. This filter is intended for use by plugin developers who want to create custom, trusted communiques between WordPress and some other system.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to sign.</li>\n</ul>\n</li>\n<li>Optional arguments:\n<ul>\n<li><code>OpenPGP_SecretKeyPacket</code> <code>$privatekey</code> &#8211; The private key used for signing the message. The default is to use the private key automatically generated during plugin activation. The automatically generated keypair is intended to be a low-trust, single-purpose keypair for your website itself, so you probably do not need or want to use this argument yourself.</li>\n</ul>\n</li>\n</ul>\n<p>Example: Send a signed, encrypted JSON payload to a remote, insecure server.</p>\n<pre><code>$comment_data = get_comment(2); // get a WP_Comment object with comment ID 2\n// Create JSON payload\n$json = array('success' =&gt; true, 'action' =&gt; 'new_comment', 'data' =&gt; $comment_data);\n$url = 'http://insecure.example.com/';\n$response = wp_safe_remote_post($url, array(\n));\n</code></pre>\n<h4>`openpgp_sign_and_encrypt`</h4>\n<p>A convenience filter that applies <code>openpgp_sign</code> and then <code>openpgp_encrypt</code> to the result.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$data</code> &#8211; The data to sign and encrypt.</li>\n<li><code>string</code> <code>$signing_key</code> &#8211; The signing key to use.</li>\n<li><code>array|string</code> <code>$recipient_keys_and_passphrases</code> &#8211; Public key(s) of the recipient(s), or passphrases to encrypt to.</li>\n</ul>\n</li>\n</ul>\n<h4>`wp_openpgp_user_key`</h4>\n<p>Gets the user&#8217;s saved S/MIME public certificate from their WordPress profile data, immediately usable in other <code>smime_*</code> filters.</p>\n<ul>\n<li>Optional arguments:\n<ul>\n<li><code>WP_User</code> <code>$user</code> &#8211; The WordPress user object. Defaults to the current user.</li>\n</ul>\n</li>\n</ul>\n<h4>`smime_certificate`</h4>\n<p>Gets a PHP resource handle to an X.509 Certificate.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>mixed</code> <code>$cert</code> &#8211; The certificate, either as a string to a file, or raw PEM-encoded certificate data.</li>\n</ul>\n</li>\n</ul>\n<h4>`smime_certificate_pem_encode`</h4>\n<p>Encodes (&#8220;exports&#8221;) a given X.509 certificate as PEM format.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>resource</code> <code>$cert</code></li>\n</ul>\n</li>\n</ul>\n<h4>`smime_encrypt`</h4>\n<p>Encrypts a message as an S/MIME email given a public certificate.</p>\n<ul>\n<li>Required arguments:\n<ul>\n<li><code>string</code> <code>$message</code> &#8211; The message contents to encrypt.</li>\n<li><code>string|string[]</code> <code>$headers</code> &#8211; The message headers for the encrypted part.</li>\n<li><code>resource|array</code> <code>$certificates</code> &#8211; The recipient&#8217;s certificate, or an array of recipient certificates.</li>\n</ul>\n</li>\n</ul>\n<p>This filter returns an array with two keys, <code>headers</code> and <code>message</code>, wherein the message is encrypted.</p>\n<p>Example: send an encrypted email via <code>wp_mail()</code>. (You do not need to do this if the recipient is registered as your site&#8217;s user, because this plugin does that automatically. Only do this if you need to send S/MIME encrypted email to an address not stored in WordPress&#8217;s own database.)</p>\n<pre><code>$cert = apply_filters( 'smime_certificate', get_option( 'my_plugin_smime_certificate' ) );\n$body = 'This is a test email message body.';\n$head = array(\n    'From' =&gt; get_option( 'admin_email' ),\n);\n$smime_data = apply_filters( 'smime_encrypt', $body, $head, $cert );\nif ( $smime_data ) {\n    wp_mail(\n        'recipient@example.com',\n        'Test message.',\n        $smime_data['message'], // message is sent encrypted\n        $smime_data['headers']\n    );\n}\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.8.0.zip",
    "upgrade_notice": {
        "0.7.4": "<p>This version requires PHP 5.4 or later, improves the security of S/MIME email, and fixes a minor bug affecting some admin users.</p>",
        "0.7.3": "<p>Fixes numerous issues with <code>Content-Type</code> mail header handling, notably fixing S/MIME-encrypted HTML email sending.</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/wp-pgp-encrypted-emails/assets/screenshot-1.png?rev=1333439",
            "caption": "<p>Paste the plain text version of your OpenPGP public key into the \"PGP Public Key\" field in your profile, then click \"Save changes\" at the bottom of the page. (There is a similar field for the WordPress admin email in the General Settings screen accessible to Administrator users.)</p>"
        },
        {
            "src": "https://ps.w.org/wp-pgp-encrypted-emails/assets/screenshot-2.png?rev=1333439",
            "caption": "<p>If the plugin detects a problem with your OpenPGP public key, you will get a notice like the one shown here.</p>"
        },
        {
            "src": "https://ps.w.org/wp-pgp-encrypted-emails/assets/screenshot-3.png?rev=1356230",
            "caption": "<p>Authors who add an OpenPGP public key to their profile also let readers leave semi-private comments on their posts. These are comments that are automatically encrypted to the author's public key upon submission. Commenters who want to send a \"Private\" comment simply write their comment normally and ensure the encryption checkbox is enabled when they submit their comment.</p>"
        },
        {
            "src": "https://ps.w.org/wp-pgp-encrypted-emails/assets/screenshot-4.png?rev=1357522",
            "caption": "<p>Administrators can generate an OpenPGP signing keypair with which to automatically sign outgoing emails. This helps recipients verify that email they receive actually came from your website. Admins can regenerate the keypair automatically by clicking the \"Regenerate keypair\" button, or they can manually paste an ASCII-armored keypair for the site to use. For security, the private key part of the site's signing key will only be transmitted over a secure (HTTPS) connection, so you will see a prompt to switch to a secure connection if you try to view it insecurely. You can still (re)generate a keypair, including the private key part, over an insecure connection because the key is generated on the server itself.</p>"
        }
    ],
    "tags": {
        "email": "email",
        "encryption": "encryption",
        "pgp": "pgp",
        "privacy": "privacy",
        "security": "security"
    },
    "stable_tag": "0.8.0",
    "versions": {
        "0.1.1": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.1.1.zip",
        "0.1.2": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.1.2.zip",
        "0.2.0": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.2.0.zip",
        "0.3.0": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.3.0.zip",
        "0.4.0": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.4.0.zip",
        "0.4.1": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.4.1.zip",
        "0.4.2": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.4.2.zip",
        "0.4.3": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.4.3.zip",
        "0.4.4": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.4.4.zip",
        "0.6.0": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.6.0.zip",
        "0.6.1": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.6.1.zip",
        "0.6.2": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.6.2.zip",
        "0.6.3": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.6.3.zip",
        "0.7": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.7.zip",
        "0.7.1": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.7.1.zip",
        "0.7.3": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.7.3.zip",
        "0.7.4": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.7.4.zip",
        "0.7.5": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.7.5.zip",
        "0.8.0": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.0.8.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/wp-pgp-encrypted-emails.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=TJLPJYXHSRBEE&amp;lc=US&amp;item_name=WP%20PGP%20Encrypted%20Emails&amp;item_number=wp-pgp-encrypted-emails&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/wp-pgp-encrypted-emails.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 92,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}