{
    "name": "Forms: 3rd-Party Inject Results",
    "slug": "forms-3rd-party-inject-results",
    "version": "0.3",
    "author": "<a href=\"http://drzaus.com\">zaus</a>",
    "author_profile": "https://profiles.wordpress.org/zaus/",
    "contributors": {
        "zaus": {
            "profile": "https://profiles.wordpress.org/zaus/",
            "avatar": "https://secure.gravatar.com/avatar/d940dd93751cea6229c4b9b2098b7f39?s=96&d=monsterid&r=g",
            "display_name": "zaus"
        }
    },
    "requires": "3.0",
    "tested": "5.2.21",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/forms-3rd-party-inject-results/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 874,
    "last_updated": "2019-09-06 9:50am GMT",
    "added": "2017-05-19",
    "homepage": "https://github.com/zaus/forms-3rdparty-inject-results",
    "sections": {
        "description": "<p>Allows you to include results from a <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms 3rdparty Integration</a> submission by flattening the response and inserting it within the original contact form submission.</p>\n",
        "installation": "<ol>\n<li>Unzip, upload plugin folder to your plugins directory (<code>/wp-content/plugins/</code>)</li>\n<li>Make sure <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms 3rdparty Integration</a> is installed and settings have been saved at least once.</li>\n<li>Activate plugin</li>\n<li>In the newly available section &#8220;Inject Results&#8221; in the &#8216;3rdparty services&#8217; admin, enter the flattened service response keys like <code>Response/Body/SomeKey</code>, one per line.<br />\na. If the response is JSON or XML it will scan the elements/keys according to the segments you&#8217;ve entered; in the above example it will look for <code>{ Response: { Body: { SomeKey: \"foobar\" } } }</code> and include &#8220;foobar&#8221; with the submission.</li>\n<li>Some contact form plugins only allow injecting/overwriting an existing field (e.g. Gravity Forms).  In these cases you can provide an &#8220;alias&#8221; to overwrite with <code>Response/Body/SomeKey=the_alias</code>, where <em>the_alias</em> is the contact form field to override.<br />\na. With Gravity Forms, fields should be overwritten using aliases like <code>input_X</code> where &#8216;X&#8217; is the field&#8217;s id.</li>\n</ol>\n",
        "faq": "\n<h4>How does it add the response values?</h4>\n<p>\n<p>If you have an endpoint <a href=\"http://yoursite.com/plugins/forms-3rdparty-inject-results/test-response.php\" rel=\"nofollow ugc\">test-response.php</a> that will &#8220;echo&#8221; back your 3rdparty submission with keys altered to be prefixed with &#8216;req-&#8216;, then if your submission was</p>\n<pre><code>{ name: { first: \"FirstName\", last: \"LastName\" }, email: \"myemail@email.com\", etc: \"foobar\" }\n</code></pre>\n<p>The response would be flattened and prefixed to</p>\n<pre><code>{ \"req-name/first\": \"FirstName\", \"req-name/last\": \"LastName\", \"req-email\": \"myemail@email.com\", \"req-etc\": \"foobar\" }\n</code></pre>\n<p>You would then inject <code>req-name/first</code> or <code>req-etc</code>.</p>\n</p>\n<h4>What are some XML/JSON examples?</h4>\n<p>\n<p><em>XML</em></p>\n<pre><code>[env:Envelope/env:Body/ns1:Response/ns1:Resultstatus] =&gt; foo\n[env:Envelope/env:Body/ns1:Response/ns1:Result] =&gt; bar\n[env:Envelope/env:Body/ns1:Response/ns1:Description] =&gt; baz\n</code></pre>\n<p><em>JSON</em></p>\n<pre><code>[Body/Response/ResultStatus] =&gt; foo\n[Body/Response/Result] =&gt; bar\n[Body/Response/Description] =&gt; baz\n</code></pre>\n<p>Note that XML responses will include the namespace prefixes.  You may then reference them by the entire key shown above.</p>\n</p>\n<h4>It doesn&#8217;t work right&#8230;</h4>\n<p>\n<p>Drop an issue at https://github.com/zaus/forms-3rdparty-inject-results</p>\n</p>\n\n",
        "changelog": "<h4>0.3</h4>\n<ul>\n<li>fix: inconsistent nested key delimiters, now expecting &#8216;/&#8217;</li>\n<li>removed testing endpoint per WP Security request (see archives for example)</li>\n</ul>\n<h4>0.2</h4>\n<ul>\n<li>confirmed with GF at least</li>\n</ul>\n<h4>0.1</h4>\n<p>IT HAS BEGUN</p>\n"
    },
    "short_description": "Injects the response from a Forms: 3rdparty submission into the original contact form.",
    "description": "<p>Allows you to include results from a <a href=\"https://wordpress.org/plugins/forms-3rdparty-integration/\" rel=\"ugc\">Forms 3rdparty Integration</a> submission by flattening the response and inserting it within the original contact form submission.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/forms-3rd-party-inject-results.zip",
    "upgrade_notice": {
        "0.3": "<p>Delimiter format handling has changed.  May be a breaking change if you were using it &quot;wrong&quot; (according to how it was previously described).</p>"
    },
    "screenshots": [],
    "tags": {
        "3rd-party-service": "3rd-party service",
        "contact-form": "contact form",
        "crm": "crm",
        "form": "form",
        "mapping": "mapping"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://drzaus.com/donate",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/forms-3rd-party-inject-results.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}