{
    "name": "Native Image Lazy Loading",
    "slug": "native-image-lazy-loading",
    "version": "1.1",
    "author": "<a href=\"https://jdmdigital.co\">JDM Digital</a>",
    "author_profile": "https://profiles.wordpress.org/jdm-labs/",
    "contributors": {
        "jdm-labs": {
            "profile": "https://profiles.wordpress.org/jdm-labs/",
            "avatar": "https://secure.gravatar.com/avatar/1bd29e1c3343d730678fc09061ab1980?s=96&d=monsterid&r=g",
            "display_name": "Justin Downey"
        }
    },
    "requires": "4.5",
    "tested": "5.2.21",
    "requires_php": "5.1",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 80,
    "ratings": {
        "5": 0,
        "4": 1,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/native-image-lazy-loading/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 20,
    "downloaded": 1063,
    "last_updated": "2019-05-21 02:28:00",
    "added": "2019-05-21",
    "homepage": "https://github.com/jdmdigital/JDM-Native-Lazy-Loading",
    "sections": {
        "description": "<p>This plugin adds the <code>loading</code> attribute to IMG tags found when filtering <code>the_content()</code> to support native image lazy loading.</p>\n<p>For more information about lazy loading images using this new native browser image attribute, check out this article: <a href=\"https://addyosmani.com/blog/lazy-loading/\" rel=\"nofollow ugc\">https://addyosmani.com/blog/lazy-loading/</a> and for a little more depth into what we&#8217;re doing here, check out our <a href=\"https://jdmdig.it/30nXp7h\" rel=\"nofollow ugc\">explainer post</a>.</p>\n<p>Historically, to limit the impact offscreen images have on page load times, developers have needed to use a JavaScript library (like <a href=\"https://github.com/aFarkas/lazysizes\" rel=\"nofollow ugc\">LazySizes</a> or <a href=\"https://www.andreaverlicchi.eu/lazyload/\" rel=\"nofollow ugc\">Vanilla-LazyLoad</a>) in order to defer fetching these images until a user scrolls near them.  What if the browser could avoid loading these offscreen images for you?</p>\n<p>The <code>loading</code> attribute instructs a browser to defer loading offscreen images until users scroll near them. It comes in three flavors: <strong>eager</strong>, <strong>auto</strong>, and <strong>lazy</strong>.  Install this plugin and you can set the first image&#8217;s loading attribute and the loading attribute for all the subsequent images sent through <code>the_content()</code> in the plugin&#8217;s settings page.</p>\n<p><strong>Simple is Beautiful</strong></p>\n<p>There is no JavaScript or CSS included in the plugin.  It just works in browsers that support the new <code>loading</code> image attribute.</p>\n<p>For browsers that don&#8217;t support this new image loading attribute, that&#8217;s ok.  You can still use whatever JavaScript-based image lazy loader you want as a fallback until browser support becomes a little more mainstream.</p>\n",
        "installation": "<ol>\n<li>Install <strong>Native Image Lazy Loading</strong> from the WordPress repo</li>\n<li>Activate the plugin through the <strong>Plugins</strong> menu</li>\n<li>Configure in <strong>Settings</strong> &gt;&gt; <strong>Native Lazy Loading</strong></li>\n<li><strong>Marvel</strong> at its simplicity</li>\n</ol>\n",
        "faq": "\n<h4>Does this add any JS?</h4>\n<p>\n<p>Nope.  If you&#8217;re using another JS-based lazy loader, that&#8217;ll just keep working as it did.  If the browser doesn\\&#8217;t support the <code>loading</code> attribute, it&#8217;ll just ignore it and process per usual.</p>\n</p>\n<h4>Where is the Settings Page?</h4>\n<p>\n<p>In version 1.0 there wan&#8217;t one, but thanks to a suggestion by <a href=\"https://github.com/verlok\" rel=\"nofollow ugc\">@verlok</a>, there IS one in v1.1.  You&#8217;ll find it at <strong>Settings</strong> &gt;&gt; <strong>Native Lazy Loading</strong>.</p>\n</p>\n\n",
        "changelog": "<h4>1.1</h4>\n<ul>\n<li>Added Settings Page</li>\n<li>Added Option to select the <code>loading=\"\"</code> attribute</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>First release.</li>\n</ul>\n"
    },
    "short_description": "Automatically add the new loading attribute to images within your content to support native image lazy loading.",
    "description": "<p>This plugin adds the <code>loading</code> attribute to IMG tags found when filtering <code>the_content()</code> to support native image lazy loading.</p>\n<p>For more information about lazy loading images using this new native browser image attribute, check out this article: <a href=\"https://addyosmani.com/blog/lazy-loading/\" rel=\"nofollow ugc\">https://addyosmani.com/blog/lazy-loading/</a> and for a little more depth into what we&#8217;re doing here, check out our <a href=\"https://jdmdig.it/30nXp7h\" rel=\"nofollow ugc\">explainer post</a>.</p>\n<p>Historically, to limit the impact offscreen images have on page load times, developers have needed to use a JavaScript library (like <a href=\"https://github.com/aFarkas/lazysizes\" rel=\"nofollow ugc\">LazySizes</a> or <a href=\"https://www.andreaverlicchi.eu/lazyload/\" rel=\"nofollow ugc\">Vanilla-LazyLoad</a>) in order to defer fetching these images until a user scrolls near them.  What if the browser could avoid loading these offscreen images for you?</p>\n<p>The <code>loading</code> attribute instructs a browser to defer loading offscreen images until users scroll near them. It comes in three flavors: <strong>eager</strong>, <strong>auto</strong>, and <strong>lazy</strong>.  Install this plugin and you can set the first image&#8217;s loading attribute and the loading attribute for all the subsequent images sent through <code>the_content()</code> in the plugin&#8217;s settings page.</p>\n<p><strong>Simple is Beautiful</strong></p>\n<p>There is no JavaScript or CSS included in the plugin.  It just works in browsers that support the new <code>loading</code> image attribute.</p>\n<p>For browsers that don&#8217;t support this new image loading attribute, that&#8217;s ok.  You can still use whatever JavaScript-based image lazy loader you want as a fallback until browser support becomes a little more mainstream.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/native-image-lazy-loading.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/native-image-lazy-loading/assets/screenshot-1.JPG?rev=2091890",
            "caption": "The Settings Page"
        }
    ],
    "tags": {
        "images": "images",
        "lazy-load": "lazy load",
        "lazyload": "lazyload",
        "loading": "loading",
        "performance": "performance"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/native-image-lazy-loading/assets/banner-772x250.jpg?rev=2091890",
        "high": "https://ps.w.org/native-image-lazy-loading/assets/banner-1544x500.jpg?rev=2091890"
    },
    "icons": {
        "1x": "https://ps.w.org/native-image-lazy-loading/assets/icon-128x128.jpg?rev=2091890",
        "2x": "https://ps.w.org/native-image-lazy-loading/assets/icon-256x256.jpg?rev=2091890"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 80,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}