{
    "name": "RainbowPayPress",
    "slug": "rainbowpaypress",
    "version": "3.1.0",
    "author": "<a href=\"http://www.maratbn.com\">Marat Nepomnyashy</a>",
    "author_profile": "https://profiles.wordpress.org/maratbn/",
    "contributors": {
        "maratbn": {
            "profile": "https://profiles.wordpress.org/maratbn/",
            "avatar": "https://secure.gravatar.com/avatar/d3823d270ef7b3cd07fe3b8501cab7d4?s=96&d=monsterid&r=g",
            "display_name": "Marat Nepomnyashy"
        }
    },
    "requires": "3.8.1",
    "tested": "4.7.29",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/rainbowpaypress/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 947,
    "last_updated": "2017-03-06 06:52:00",
    "added": "2016-02-18",
    "homepage": "",
    "sections": {
        "description": "<p>Overview:</p>\n<p>This plugin facilitates selling of products and services on any public page<br />\n  of a WordPress website, and accepting credit card payments for these<br />\n  products and services via the Stripe payment processor.</p>\n<p>Because this plugin facilitates credit card payment processing specifically<br />\n  via Stripe, it is able to leverage the main security feature of that service,<br />\n  in that the credit card numbers are sent to the Stripe servers directly via<br />\n  their Checkout API, and never to the server running the website.  Because<br />\n  the credit card numbers are physically absent from the website server, the<br />\n  operators of the website server are not subject to various government<br />\n  regulations that might have otherwise come into effect had their server<br />\n  indeed stored credit card numbers.  And obviously, even if the website<br />\n  server or its storage get compromised by criminals, there simply would not<br />\n  be any credit card numbers for them to steal.</p>\n<p>The way this plugin is used, is that first, the administrators specify which<br />\n  products and services are being sold, their descriptions, prices, etc. by<br />\n  inserting special shortcodes with that information directly into the pages<br />\n  and posts on which they want to render the user payment buttons for these<br />\n  sales.  When site visitors load these pages, they see the associated payment<br />\n  buttons, clicking on which opens payment entry forms.  Submitting a payment<br />\n  creates a &#8220;pending transaction&#8221;, details of which can be automatically<br />\n  emailed to the site operator(s).  For each pending transaction, site<br />\n  administrators can click a special &#8220;Charge&#8221; button on the plugin&#8217;s admin<br />\n  page to charge that transaction via Stripe.  This creates a record for the<br />\n  customer and the charge on the Stripe servers, from which point the<br />\n  transaction can be administered via the Stripe website as any other Stripe<br />\n  transaction.</p>\n<p>Stripe test transactions are also supported.  These are transactions in<br />\n  which no actual real credit card gets charged.</p>\n<p>Currently only USD are supported.</p>\n<p>Demo at: http://maratbn.com/projects/rainbow-pay-press/#demo</p>\n<p>Technical summary and special considerations:</p>\n<p>Initially, buyer identity, stored partially on the website server, is tied<br />\n  to their credit card number stored entirely on Stripe servers, via a special<br />\n  &#8220;Stripe Token&#8221;, which is obtained directly from Stripe, via the plugin&#8217;s<br />\n  JavaScript logic, running in the buyer&#8217;s browser.  For this reason,<br />\n  JavaScript needs to be enabled in the buyer&#8217;s browser.</p>\n<p>Plugin relies on special server-side PHP library stripe-php to communicate<br />\n  with the Stripe servers to direct them to charge credit cards.  This PHP<br />\n  library in turn relies on PHP cURL support enabled on the server.  The<br />\n  plugin will check if this support is enabled, and will issue admin dashboard<br />\n  notification if it is not, which will also give advise on how to enable it.</p>\n<p>If website administrators wish to enable automatic email notifications, they<br />\n  would need to insure that a Mail Transfer Agent (MTA) is properly configured<br />\n  on their website server.  Even when the MTA is properly configured, the<br />\n  email notifications are still likely to get filtered by SPAM filters, so<br />\n  adjustment of SPAM filters might also be needed.</p>\n<p>Requires:</p>\n<ul>\n<li>PHP version &gt;= 5.4</li>\n<li>PHP cURL support enabled (Install module &#8216;php-curl&#8217; on Debian / Ubuntu)</li>\n<li>PHP multibyte string support enabled (Install module &#8216;mb-string&#8217; on Debian / Ubuntu)</li>\n<li>Proper Mail Transfer Agent (MTA) configuration for notification emails.</li>\n</ul>\n<p>Official project URLs:</p>\n<p>https://wordpress.org/plugins/rainbowpaypress<br />\n  https://github.com/maratbn/RainbowPayPress<br />\n  http://maratbn.com/projects/rainbow-pay-press</p>\n",
        "installation": "<ol>\n<li>Unzip contents of <code>rainbowpaypress.zip</code> into the directory <code>/wp-content/plugins/rainbowpaypress/</code>.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress.</li>\n</ol>\n",
        "faq": "\n<h4>What do I do if I get this error &#8220;Plugin could not be activated because it triggered a fatal error.&#8221; when trying to activate?</h4>\n<p>\n<p>Upgrade to PHP &gt;= 5.4  See<br />\nhttps://wordpress.org/support/topic/crashes-on-activate</p>\n<p>Make sure to check your PHP version with<br />\nhttps://wordpress.org/plugins/display-php-version/</p>\n</p>\n<h4>Where can I ask a question about RainbowPayPress?</h4>\n<p>\n<p>Ask your questions at: https://wordpress.org/support/plugin/rainbowpaypress</p>\n</p>\n<h4>Where can I post issues / bugs / feature requests?</h4>\n<p>\n<p>Post issues / bugs / feature requests at:<br />\nhttps://github.com/maratbn/RainbowPayPress/issues</p>\n</p>\n<h4>Where can I post pull requests?</h4>\n<p>\n<p>Post pull requests at: https://github.com/maratbn/RainbowPayPress/pulls</p>\n</p>\n<h4>Plugin is missing feature X that I really want, what do I do?</h4>\n<p>\n<p>Post a bug / feature request, or implement the feature at your leisure, and<br />\nsubmit a pull request.</p>\n</p>\n<h4>Where do I get the publish and secret keys needed for plugin&#8217;s configuration?</h4>\n<p>\n<p>From your Stripe account.</p>\n</p>\n<h4>Why are notification emails not sending?</h4>\n<p>\n<p>Check if you have a mail transfer agent (MTA) installed and properly<br />\nconfigured on your server.  Also check your SPAM folder.</p>\n</p>\n\n",
        "changelog": "<h4>3.1.0</h4>\n<ul>\n<li>Tested up to WordPress version 4.7.2.</li>\n<li>Synched with the latest Stripe Checkout JavaScript API.</li>\n<li>Limited the loading of plugin&#8217;s static resources only to pages that use the plugin.</li>\n<li>Implemented detection of when a transaction could not be submitted due to an untrusted HTTPS/SSL<br />\ncertificate.</li>\n<li>Implemented notification to the paying user when a payment transaction could not be submitted due<br />\nto a communication error with the server.</li>\n<li>Added additional tags to make the plugin easier to find in the WordPress plugins directory.</li>\n<li>Added detection of missing PHP multibyte string support, which is necessary to communicate with<br />\nStripe.</li>\n</ul>\n<h4>3.0.1</h4>\n<ul>\n<li>Fixed bug with allowed items being treated as disallowed.</li>\n</ul>\n<h4>3.0.0</h4>\n<ul>\n<li>Fixed another date parsing bug that effected Firefox.</li>\n<li>Database schema has been modified.  Table &#8216;plugin_rainbow_pay_press_transactions&#8217; fields<br />\n&#8216;customer_name&#8217; and &#8216;customer_phone&#8217; are now allowed to be NULL.  If upgrading, user should<br />\nexamine the table schema to verify that these fields are now allowed to be NULL, and if not,<br />\nalter the table manually to allow these fields to be NULL.  User can use the Adminer plugin to<br />\naccomplish this.  Alternatively, user can disable the plugin, backup the data in the table,<br />\ndelete the table, and re-enable the plugin to create the table anew.</li>\n<li>Entity name is now specified in the global RainbowPayPress configuration rather than in each<br />\nshortcode.</li>\n<li>Fixed bug with resetting configuration settings to empty strings.</li>\n<li>Shortcode syntax has changed.  Instead of specifying the cost amount and description of each item<br />\nin the shortcode, now only a pre-configured item handle is specified.  Upon upgrading, users will<br />\nneed to manually create the appropriate item records in the Items configuration, and to update<br />\ntheir shortcodes to include handles to their items.</li>\n<li>Shortcode syntax has changed.  The previous shortcode parameter &#8216;fields&#8217; has been renamed to<br />\n&#8216;override_fields&#8217;.  Upon upgrading, users will need to manually modify their shortcodes to comply<br />\nwith this latest parameter name.</li>\n</ul>\n<h4>2.3.0</h4>\n<ul>\n<li>For better reliability and better server-side performance, loading the plugin&#8217;s JavaScript logic<br />\non every page.  Client-side performance should not be effected that much due to local caching.<br />\nStripe Checkout JavaScript dialog logic is still loading only when the user opens the payment UI.</li>\n<li>Fixed bug with the seller name not getting propagated into the Stripe Checkout dialog.</li>\n<li>Fixed bug with date parsing algorithm so that it works on Firefox.</li>\n<li>Fixed bug with the shipping address not being displayed in the admin transactions table.</li>\n</ul>\n<h4>2.2.0</h4>\n<ul>\n<li>Added ability to ask buyer for shipping address.</li>\n<li>Split-out the plugin&#8217;s admin page into 3 separate pages, for Help, Transactions, and Settings.</li>\n<li>Included configuration settings page URL in test emails.</li>\n<li>Included site URL in test and notification emails.</li>\n<li>Added admin UI warning notification for when server-side cURL support is unavailable.</li>\n<li>Displaying the transaction creation and charging times in the timezone local to the client.</li>\n<li>Added plugin icon.</li>\n<li>No longer explicitly requesting to communicate with Stripe via any specific Stripe API version,<br />\nas Stripe servers are expected to automatically communicate via the most appropriate version for<br />\nthe client library bindings version.</li>\n</ul>\n<h4>2.1.0</h4>\n<ul>\n<li>Indicating to the user when Stripe Checkout dialog may be blocked by an ad or a popup blocker,<br />\nby a JavaScript security policy, or by a broken network connection.</li>\n<li>To bypass browser popup blockers, loading Stripe checkout when the user opens the payment UI<br />\nrather than when the user clicks to open the Stripe Checkout dialog, as that will keep the<br />\npopup-loading logic in the same user-initiated UI callback.</li>\n</ul>\n<h4>2.0.0</h4>\n<ul>\n<li>Having stripe-php 3.4.0 explicitly request the Stripe servers to communicate via Stripe API<br />\nversion 2016-03-07.</li>\n<li>For better privacy, loading Stripe checkout.js only when the user clicks to open the Stripe<br />\nCheckout dialog.</li>\n<li>Indicating to the user when the Stripe Checkout dialog is initializing and opening.</li>\n<li>Renamed MySQL database table &#8216;plugin_stripe_payment_press_transactions&#8217; to<br />\n&#8216;plugin_rainbow_pay_press_transactions&#8217;.  Users of version 1.0.0 upgrading to 2.0.0 who already<br />\nhave data in the old table will have to manually export it from the old table and import it into<br />\nthe new table using Adminer or a similar plugin that can export / import database tables.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial public release.</li>\n</ul>\n"
    },
    "short_description": "Easy way to accept credit card payments via Stripe by embedding Stripe checkouts via shortcodes.",
    "description": "<p>Overview:</p>\n<p>This plugin facilitates selling of products and services on any public page<br />\n  of a WordPress website, and accepting credit card payments for these<br />\n  products and services via the Stripe payment processor.</p>\n<p>Because this plugin facilitates credit card payment processing specifically<br />\n  via Stripe, it is able to leverage the main security feature of that service,<br />\n  in that the credit card numbers are sent to the Stripe servers directly via<br />\n  their Checkout API, and never to the server running the website.  Because<br />\n  the credit card numbers are physically absent from the website server, the<br />\n  operators of the website server are not subject to various government<br />\n  regulations that might have otherwise come into effect had their server<br />\n  indeed stored credit card numbers.  And obviously, even if the website<br />\n  server or its storage get compromised by criminals, there simply would not<br />\n  be any credit card numbers for them to steal.</p>\n<p>The way this plugin is used, is that first, the administrators specify which<br />\n  products and services are being sold, their descriptions, prices, etc. by<br />\n  inserting special shortcodes with that information directly into the pages<br />\n  and posts on which they want to render the user payment buttons for these<br />\n  sales.  When site visitors load these pages, they see the associated payment<br />\n  buttons, clicking on which opens payment entry forms.  Submitting a payment<br />\n  creates a &#8220;pending transaction&#8221;, details of which can be automatically<br />\n  emailed to the site operator(s).  For each pending transaction, site<br />\n  administrators can click a special &#8220;Charge&#8221; button on the plugin&#8217;s admin<br />\n  page to charge that transaction via Stripe.  This creates a record for the<br />\n  customer and the charge on the Stripe servers, from which point the<br />\n  transaction can be administered via the Stripe website as any other Stripe<br />\n  transaction.</p>\n<p>Stripe test transactions are also supported.  These are transactions in<br />\n  which no actual real credit card gets charged.</p>\n<p>Currently only USD are supported.</p>\n<p>Demo at: http://maratbn.com/projects/rainbow-pay-press/#demo</p>\n<p>Technical summary and special considerations:</p>\n<p>Initially, buyer identity, stored partially on the website server, is tied<br />\n  to their credit card number stored entirely on Stripe servers, via a special<br />\n  &#8220;Stripe Token&#8221;, which is obtained directly from Stripe, via the plugin&#8217;s<br />\n  JavaScript logic, running in the buyer&#8217;s browser.  For this reason,<br />\n  JavaScript needs to be enabled in the buyer&#8217;s browser.</p>\n<p>Plugin relies on special server-side PHP library stripe-php to communicate<br />\n  with the Stripe servers to direct them to charge credit cards.  This PHP<br />\n  library in turn relies on PHP cURL support enabled on the server.  The<br />\n  plugin will check if this support is enabled, and will issue admin dashboard<br />\n  notification if it is not, which will also give advise on how to enable it.</p>\n<p>If website administrators wish to enable automatic email notifications, they<br />\n  would need to insure that a Mail Transfer Agent (MTA) is properly configured<br />\n  on their website server.  Even when the MTA is properly configured, the<br />\n  email notifications are still likely to get filtered by SPAM filters, so<br />\n  adjustment of SPAM filters might also be needed.</p>\n<p>Requires:</p>\n<ul>\n<li>PHP version &gt;= 5.4</li>\n<li>PHP cURL support enabled (Install module &#8216;php-curl&#8217; on Debian / Ubuntu)</li>\n<li>PHP multibyte string support enabled (Install module &#8216;mb-string&#8217; on Debian / Ubuntu)</li>\n<li>Proper Mail Transfer Agent (MTA) configuration for notification emails.</li>\n</ul>\n<p>Official project URLs:</p>\n<p>https://wordpress.org/plugins/rainbowpaypress<br />\n  https://github.com/maratbn/RainbowPayPress<br />\n  http://maratbn.com/projects/rainbow-pay-press</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/rainbowpaypress.3.1.0.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-1.png?rev=1392731",
            "caption": "<p>Examples of shortcode syntax, and display of all the transaction details entry fields that can\nbe made available to the buyer on any page of the website.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-2.png?rev=1392731",
            "caption": "<p>The official Stripe Checkout Dialog that appears when the buyer clicks to enter the Stripe\ntoken id or Stripe card email fields.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-3.png?rev=1392731",
            "caption": "<p>RainbowPayPress admin menu.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-4.png?rev=1392731",
            "caption": "<p>Example of transaction details entry fields filled out by the buyer just before transaction\nsubmission.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-5.png?rev=1392731",
            "caption": "<p>Transaction submission confirmation message displayed to the buyer after transaction\nsubmission.  The confirmation message includes the timestamp of the submission and the Stripe\ntoken that can be used by the website administrator(s) to charge the buyer's credit card.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-6.png?rev=1392731",
            "caption": "<p>The 'Pending Transactions' and 'Charged Transactions' tables as they appear to the website\nadministrator(s) on the 'Transactions' admin page, containing the data for example\ntransactions.  New transactions are initially inserted as new rows to the top of the 'Pending'\ntable,  Clicking the 'Charge' button charges the transaction, and moves the associated record\nto the top of the 'Charged' table.  The 'Charged' table contains additional columns 'Customer\nID' and 'Charge ID'.  These data tokens are created by the Stripe business logic when the\ntransaction is charged, and they are rendered as web links, clicking on which takes the user to\nthe associated records on their Stripe account on the Stripe website.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-7.png?rev=1392731",
            "caption": "<p>The 'Items' table as it appears to the website administrator(s), containing an example list of\nitems that can be specified for sale via RainbowPayPress shortcodes.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-8.png?rev=1392731",
            "caption": "<p>The RainbowPayPress 'Settings' page as it appears to the website administrator(s) with some\nexample settings.</p>"
        },
        {
            "src": "https://ps.w.org/rainbowpaypress/assets/screenshot-9.png?rev=1392731",
            "caption": "<p>A screenshot of a customer record as it appears on the Stripe website.  This record was created\nwhen the associated transaction was charged by clicking on the 'Charge' button on its row on\nthe 'Pending Transaction' table on the 'Transactions' admin page.  Once a transaction is\ncharged, all records associated with that charge can be tracked on the user's Stripe account.</p>"
        }
    ],
    "tags": {
        "accept-credit-card": "accept credit card",
        "accept-credit-card-payments": "accept credit card payments",
        "accept-payments": "accept payments",
        "pay": "pay",
        "stripe": "stripe"
    },
    "stable_tag": "3.1.0",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.1.0.0.zip",
        "2.0.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.2.0.0.zip",
        "2.1.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.2.1.0.zip",
        "2.2.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.2.2.0.zip",
        "2.3.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.2.3.0.zip",
        "3.0.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.3.0.0.zip",
        "3.0.1": "https://downloads.wordpress.org/plugin/rainbowpaypress.3.0.1.zip",
        "3.1.0": "https://downloads.wordpress.org/plugin/rainbowpaypress.3.1.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/rainbowpaypress.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/rainbowpaypress/assets/icon.svg?rev=1608415",
        "svg": "https://ps.w.org/rainbowpaypress/assets/icon.svg?rev=1608415"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}