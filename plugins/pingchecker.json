{
    "name": "Pingchecker",
    "slug": "pingchecker",
    "version": "1.2.0",
    "author": "<a href=\"http://pingbackpro.com/\">Tony Hayes</a>",
    "author_profile": "https://profiles.wordpress.org/majick/",
    "contributors": {
        "majick777": {
            "profile": "https://profiles.wordpress.org/majick777/",
            "avatar": "https://secure.gravatar.com/avatar/223fbb6c4ed61db1a9c8fd3e1cac383f?s=96&d=monsterid&r=g",
            "display_name": "majick777"
        }
    },
    "requires": "2.6",
    "tested": "3.1.4",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/pingchecker/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 3408,
    "last_updated": "2011-07-07 13:56:00",
    "added": "2011-04-27",
    "homepage": "http://pingbackpro.com/pingchecker/",
    "sections": {
        "description": "<p>Pingchecker is a free plugin for WordPress that allows you to scan your post&#8217;s content for<br />\nlinks, check the pingability of those resources you&#8217;ve linked to, and manually ping those<br />\npages. This improves upon the inbuilt fuctionality of WordPress by allowing you to receive<br />\nthe results of your attempted pings whereas WordPress doesn&#8217;t. (With WordPress your ping<br />\neither appears in the trackback list or it doesn&#8217;t, with no explanation or error codes.)</p>\n<p>Also included is a workaround for a bug in the WordPress XML RPC server that prevents many<br />\nof your pingbacks from succeeding without you even knowing about it! When you ping another<br />\nblogs server, it will check the page you linked, BUT because of this bug, sometimes it can&#8217;t<br />\nfind the link at all. This workaround adds a hidden div to your footer with your links so<br />\nthey can be found, greatly improving your chances of a successful ping.</p>\n<h3>Recommended Use</h3>\n<ol>\n<li>Before publishing your post, use Pingchecker to check the pingability of the resources<br />\nyou are linking to. If they aren&#8217;t, you may wish to choose alternative similar resources<br />\nthat are pingable instead.</li>\n<li>Then, publish your post and WordPress will attempt to ping the resources automatically<br />\nas it normally would. Check the trackback list under your content box to see if your ping<br />\nwas successful as usual.</li>\n<li>If the new trackback/pingback does not appear, use Pingchecker to ping the resource<br />\ninstead. The results of your attempted pings will be returned in an alert box.</li>\n</ol>\n<h3>The XML RPC Server Bug Workaround</h3>\n<p>While working on this plugin I noticed a large occurrence of the pingback fault 17:<br />\n&#8220;The source URL does not contain a link to the target URL, and so cannot be used as a source.&#8221;<br />\nA really frustrating message given you are sending a pingback because the source DOES contain<br />\na link to the target, yes? Might I point out that very few WordPress users are aware of this<br />\neven happening because nowhere does WordPress actually return you these fault codes..!</p>\n<p>Well, after a bit of testing I found the bug seems to be in the XML RPC server code for<br />\nWordpress, specifically the strip_tags function in PHP is just not reliable enough for getting<br />\nanchor links on the variety of WordPress templates out there (IMHO). (Line 3422 in WP3.1)</p>\n<p>Unfortunately, since the bug is in the server code itself, you can&#8217;t fix it on someone elses<br />\nblog can you? That&#8217;s why this is a workaround instead. The Pingchecker workaround will scan<br />\nyour post content for links using regex instead, then echo a hidden div element containing<br />\nall the links (with an added nofollow tag so you aren&#8217;t linking twice) in your blogs footer,<br />\nwhich is picked up much more easily by the strip_tags function in use by the server.</p>\n",
        "installation": "<ol>\n<li>Upload &#8216;pingchecker.php&#8217; to the &#8216;/wp-content/plugins/&#8217; directory.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress.</li>\n<li>Use the Pingchecker box on your post writing screen.</li>\n</ol>\n",
        "faq": "\n<h4>What do the pingback error codes mean?</h4>\n<p>\n<p>While some of the pingback error codes are self-explanatory, others can be a little confusing.<br />\nThere is a list of fault codes and some suggestions here:<br />\nhttp://pingbackpro.com/support/#faultcodes</p>\n</p>\n<h4>What if the resource I am linking to isn&#8217;t pingeable?</h4>\n<p>\n<p>Unfortunately there isn&#8217;t a great deal you can do about this, apart from sending an email<br />\nto the owner of the blog you are pinging, you could try to find a similar resource that<br />\nis pingeable.</p>\n</p>\n<h4>Will installing this plugin improve the success of my pings?</h4>\n<p>\n<p>Yes, actually. Pingchecker includes a workaround for a bug in the WordPress XML RPC server that<br />\ncan frequently return pingback fault 17, which basically says your post doesn&#8217;t contain a link<br />\nwhen it really does. A hidden div element is added to page containing the links in your post<br />\nwhich makes them easier to find by the server code, allowing more pings to succeed.</p>\n</p>\n\n",
        "changelog": "<h4>1.2.0</h4>\n<ul>\n<li>Added the ability to check for pingback approvals.</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Fixes a major WordPress XML RPC server bug with a workaround. See Note.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Pingchecker Plugin released. WOOHOO!</li>\n</ul>\n"
    },
    "short_description": "Scans post for links, checks if they are pingeable and sends pingbacks with results returned, improves chances of successful pings!",
    "description": "<p>Pingchecker is a free plugin for WordPress that allows you to scan your post&#8217;s content for<br />\nlinks, check the pingability of those resources you&#8217;ve linked to, and manually ping those<br />\npages. This improves upon the inbuilt fuctionality of WordPress by allowing you to receive<br />\nthe results of your attempted pings whereas WordPress doesn&#8217;t. (With WordPress your ping<br />\neither appears in the trackback list or it doesn&#8217;t, with no explanation or error codes.)</p>\n<p>Also included is a workaround for a bug in the WordPress XML RPC server that prevents many<br />\nof your pingbacks from succeeding without you even knowing about it! When you ping another<br />\nblogs server, it will check the page you linked, BUT because of this bug, sometimes it can&#8217;t<br />\nfind the link at all. This workaround adds a hidden div to your footer with your links so<br />\nthey can be found, greatly improving your chances of a successful ping.</p>\n<h3>Recommended Use</h3>\n<ol>\n<li>Before publishing your post, use Pingchecker to check the pingability of the resources<br />\nyou are linking to. If they aren&#8217;t, you may wish to choose alternative similar resources<br />\nthat are pingable instead.</li>\n<li>Then, publish your post and WordPress will attempt to ping the resources automatically<br />\nas it normally would. Check the trackback list under your content box to see if your ping<br />\nwas successful as usual.</li>\n<li>If the new trackback/pingback does not appear, use Pingchecker to ping the resource<br />\ninstead. The results of your attempted pings will be returned in an alert box.</li>\n</ol>\n<h3>The XML RPC Server Bug Workaround</h3>\n<p>While working on this plugin I noticed a large occurrence of the pingback fault 17:<br />\n&#8220;The source URL does not contain a link to the target URL, and so cannot be used as a source.&#8221;<br />\nA really frustrating message given you are sending a pingback because the source DOES contain<br />\na link to the target, yes? Might I point out that very few WordPress users are aware of this<br />\neven happening because nowhere does WordPress actually return you these fault codes..!</p>\n<p>Well, after a bit of testing I found the bug seems to be in the XML RPC server code for<br />\nWordpress, specifically the strip_tags function in PHP is just not reliable enough for getting<br />\nanchor links on the variety of WordPress templates out there (IMHO). (Line 3422 in WP3.1)</p>\n<p>Unfortunately, since the bug is in the server code itself, you can&#8217;t fix it on someone elses<br />\nblog can you? That&#8217;s why this is a workaround instead. The Pingchecker workaround will scan<br />\nyour post content for links using regex instead, then echo a hidden div element containing<br />\nall the links (with an added nofollow tag so you aren&#8217;t linking twice) in your blogs footer,<br />\nwhich is picked up much more easily by the strip_tags function in use by the server.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/pingchecker.1.2.0.zip",
    "upgrade_notice": {
        "1.1.0": "<p>Major update to include the new workaround for the XML RPC server bug, improving your ping success rate.</p>"
    },
    "screenshots": [],
    "tags": {
        "backlink": "backlink",
        "ping": "ping",
        "pingback": "pingback",
        "pingchecker": "pingchecker",
        "trackback": "trackback"
    },
    "stable_tag": "1.2.0",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/pingchecker.1.0.0.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/pingchecker.1.1.0.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/pingchecker.1.2.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/pingchecker.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://pingbackpro.com/pingchecker/",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/pingchecker.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}