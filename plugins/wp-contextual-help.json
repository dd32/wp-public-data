{
    "name": "WP Contextual Help",
    "slug": "wp-contextual-help",
    "version": "1.0.2",
    "author": "kevinlangleyjr",
    "author_profile": "https://profiles.wordpress.org/kevinlangleyjr/",
    "contributors": {
        "kevinlangleyjr": {
            "profile": "https://profiles.wordpress.org/kevinlangleyjr/",
            "avatar": "https://secure.gravatar.com/avatar/bfcd9416a6ddfb1445a78b5f62627ecc?s=96&d=monsterid&r=g",
            "display_name": "Kevin Langley Jr."
        }
    },
    "requires": "3.3",
    "tested": "4.1.41",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/wp-contextual-help/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 880,
    "last_updated": "2015-01-05 6:47pm GMT",
    "added": "2014-07-22",
    "homepage": "http://voceplatforms.com",
    "sections": {
        "description": "<p>Adds helper functionality to easily add to the WP Contextual Help throughout the admin of a WordPress site.</p>\n<h4>Usage</h4>\n<p>When you register a tab you have a few different options as far as what content is displayed there.</p>\n<p>If you provide a callback argument in the tab args, that will take precedence and the plugin will not look for any HTML files within the help-docs directory.</p>\n<p>If you provide a file argument in the tab args, the plugin will look for that file specifically and if it does not exist will output a warning message in place of the content to notify the developer that the specified help document does not exist.</p>\n<p>If no file or callback argument is passed into the tab args, by default the plugin will look for a file with the same name as the id of the tab. So for <code>post-management</code> it would look for <code>post-management.html</code> within the help docs directory.</p>\n<h4>HTML Help Docs</h4>\n<p>All help docs should either reside within the <code>get_template_directory() . '/includes/help-docs/';</code> directory and all images within the <code>get_template_directory() . '/includes/help-docs/img/';</code></p>\n<p>You can use the <code>wp_contextual_help_docs_dir</code> filter to change the directory for the HTML files and the <code>wp_contextual_help_docs_url</code> filter to change the base URL for the images. Within your help documentation we use the variable <code>{WP_HELP_IMG_URL}</code> as a placeholder for the image URL which is then replaced before rendering with the value provided from the filter or defaults to the default help docs image directory.</p>\n<h4>Registering a tab</h4>\n<p>Help tabs are registered using the <code>WP_Contextual_Help::register_tab()</code> method.</p>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><code>$id</code> (string) &#8211; String to be used as the ID for the help tab</li>\n<li><code>$title</code> (string) &#8211; Title to display to the user within the tab</li>\n<li><code>$args</code> (array) &#8211; An array of options for the help tab\n<ul>\n<li><code>page</code> (string, array) &#8211; Page(s) to enable the help tab</li>\n<li><code>post_type</code> (string, array) &#8211; Limit the tab to only display on these specific post types</li>\n<li><code>file</code> (string) &#8211; HTML file to read and output within the tab</li>\n<li><code>wpautop</code> (boolean) &#8211; Default: False &#8211; Apply wpautop to the loaded HTML file</li>\n<li><code>callback</code> &#8211; If a user would rather a custom callback instead of the autoloading of a HTML file, this is where that would be applied</li>\n</ul>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code>&lt;?php  add_action( 'init', function(){      if( !class_exists( 'WP_Contextual_Help' ) )         return;      // Only display on the pages - post.php and post-new.php, but only on the post post_type     // This would automatically look for a file called post-management.html within get_template_directory() . '/includes/help-docs/';     WP_Contextual_Help::register_tab( 'post-management', 'Post Management', array(         'page' =&gt; array( 'post.php', 'post-new.php' ),         'post_type' =&gt; 'post',         'wpautop' =&gt; true     ) );      // Add to a custom admin page     WP_Contextual_Help::register_tab( 'custom-settings', 'Custom Settings', array(         'page' =&gt; 'settings_page_custom-settings-page',         'wpautop' =&gt; true     ) );      // Add help tab with custom callback     WP_Contextual_Help::register_tab( 'custom-callback', 'Custom Callback Example', array(         'page' =&gt; array( 'post.php', 'post-new.php' ),         'post_type' =&gt; 'post',         'callback' =&gt; function( $screen, $tab ) {             echo '&lt;p&gt;It is super easy to add new help tabs!&lt;/p&gt;';         }     ) ); } ); ?&gt; </code></pre>\n",
        "installation": "<h4>As standard plugin:</h4>\n<blockquote>\n<p>See <a href=\"https://codex.wordpress.org/Managing_Plugins#Installing_Plugins\" rel=\"nofollow ugc\">Installing Plugins</a>.</p>\n</blockquote>\n<h4>As theme or plugin dependency:</h4>\n<blockquote>\n<p>After dropping the plugin into the containing theme or plugin, add the following:</p>\n</blockquote>\n<pre><code>if( ! class_exists( 'WP_Contextual_Help' ) ) {     require_once( $path_to_help . '/wp-contextual-help.php' ); } </code></pre>\n<h4>As a composer dependency</h4>\n<p>Add the following to your composer.json required dependencies</p>\n<pre><code>{     // ...     \"require\": {         \"voceconnect/wp-contextual-help\": \"~0.0.1\"  // Most recent tagged version     },     // ... } </code></pre>\n",
        "changelog": "<p>Please refer to full changelog at https://github.com/voceconnect/wp-contextual-help/releases.</p>\n"
    },
    "short_description": "Allows a developer to easily extend the contextual help dropdown content area in WordPress.",
    "description": "<p>Adds helper functionality to easily add to the WP Contextual Help throughout the admin of a WordPress site.</p>\n<h4>Usage</h4>\n<p>When you register a tab you have a few different options as far as what content is displayed there.</p>\n<p>If you provide a callback argument in the tab args, that will take precedence and the plugin will not look for any HTML files within the help-docs directory.</p>\n<p>If you provide a file argument in the tab args, the plugin will look for that file specifically and if it does not exist will output a warning message in place of the content to notify the developer that the specified help document does not exist.</p>\n<p>If no file or callback argument is passed into the tab args, by default the plugin will look for a file with the same name as the id of the tab. So for <code>post-management</code> it would look for <code>post-management.html</code> within the help docs directory.</p>\n<h4>HTML Help Docs</h4>\n<p>All help docs should either reside within the <code>get_template_directory() . '/includes/help-docs/';</code> directory and all images within the <code>get_template_directory() . '/includes/help-docs/img/';</code></p>\n<p>You can use the <code>wp_contextual_help_docs_dir</code> filter to change the directory for the HTML files and the <code>wp_contextual_help_docs_url</code> filter to change the base URL for the images. Within your help documentation we use the variable <code>{WP_HELP_IMG_URL}</code> as a placeholder for the image URL which is then replaced before rendering with the value provided from the filter or defaults to the default help docs image directory.</p>\n<h4>Registering a tab</h4>\n<p>Help tabs are registered using the <code>WP_Contextual_Help::register_tab()</code> method.</p>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><code>$id</code> (string) &#8211; String to be used as the ID for the help tab</li>\n<li><code>$title</code> (string) &#8211; Title to display to the user within the tab</li>\n<li><code>$args</code> (array) &#8211; An array of options for the help tab\n<ul>\n<li><code>page</code> (string, array) &#8211; Page(s) to enable the help tab</li>\n<li><code>post_type</code> (string, array) &#8211; Limit the tab to only display on these specific post types</li>\n<li><code>file</code> (string) &#8211; HTML file to read and output within the tab</li>\n<li><code>wpautop</code> (boolean) &#8211; Default: False &#8211; Apply wpautop to the loaded HTML file</li>\n<li><code>callback</code> &#8211; If a user would rather a custom callback instead of the autoloading of a HTML file, this is where that would be applied</li>\n</ul>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code>&lt;?php  add_action( 'init', function(){      if( !class_exists( 'WP_Contextual_Help' ) )         return;      // Only display on the pages - post.php and post-new.php, but only on the post post_type     // This would automatically look for a file called post-management.html within get_template_directory() . '/includes/help-docs/';     WP_Contextual_Help::register_tab( 'post-management', 'Post Management', array(         'page' =&gt; array( 'post.php', 'post-new.php' ),         'post_type' =&gt; 'post',         'wpautop' =&gt; true     ) );      // Add to a custom admin page     WP_Contextual_Help::register_tab( 'custom-settings', 'Custom Settings', array(         'page' =&gt; 'settings_page_custom-settings-page',         'wpautop' =&gt; true     ) );      // Add help tab with custom callback     WP_Contextual_Help::register_tab( 'custom-callback', 'Custom Callback Example', array(         'page' =&gt; array( 'post.php', 'post-new.php' ),         'post_type' =&gt; 'post',         'callback' =&gt; function( $screen, $tab ) {             echo '&lt;p&gt;It is super easy to add new help tabs!&lt;/p&gt;';         }     ) ); } ); ?&gt; </code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-contextual-help.1.0.2.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "contextual": "contextual",
        "help": "help"
    },
    "stable_tag": "1.0.2",
    "versions": {
        "0.0.1": "https://downloads.wordpress.org/plugin/wp-contextual-help.0.0.1.zip",
        "0.0.2": "https://downloads.wordpress.org/plugin/wp-contextual-help.0.0.2.zip",
        "0.0.3": "https://downloads.wordpress.org/plugin/wp-contextual-help.0.0.3.zip",
        "1.0.0": "https://downloads.wordpress.org/plugin/wp-contextual-help.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/wp-contextual-help.1.0.1.zip",
        "1.0.2": "https://downloads.wordpress.org/plugin/wp-contextual-help.1.0.2.zip",
        "trunk": "https://downloads.wordpress.org/plugin/wp-contextual-help.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://voceplatforms.com/",
    "banners": {
        "low": "https://ps.w.org/wp-contextual-help/assets/banner-772x250.png?rev=952541",
        "high": false
    },
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/wp-contextual-help_d94965.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}