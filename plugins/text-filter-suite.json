{
    "name": "Text Filter Suite",
    "slug": "text-filter-suite",
    "version": "1.4",
    "author": "<a href=\"http://dougal.gunters.org/\">Dougal Campbell</a>",
    "author_profile": "https://profiles.wordpress.org/dougal/",
    "contributors": {
        "dougal": {
            "profile": "https://profiles.wordpress.org/dougal/",
            "avatar": "https://secure.gravatar.com/avatar/81717a172b6918071fbea1a52483294b?s=96&d=monsterid&r=g",
            "display_name": "Dougal Campbell"
        }
    },
    "requires": "1.5",
    "tested": "4.3.34",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 90,
    "ratings": {
        "5": 1,
        "4": 1,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/text-filter-suite/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 5154,
    "last_updated": "2015-06-03 20:38:00",
    "added": "2004-12-10",
    "homepage": "http://dougal.gunters.org/blog/2004/08/30/text-filter-suite",
    "sections": {
        "description": "<p>The Text Filter Suite (&#8220;TFS&#8221;, hereafter) is a WordPress plugin which<br />\nadds some new text filtering functions. In a sense, the core TFS<br />\nfunctions could be considered a &#8220;meta filter&#8221;, because they actually<br />\nprovide a framework that let you construct new filters fairly easily.<br />\nThey also provide an easy way to apply filters to post content and<br />\ncomments on a per-post basis.</p>\n<h4>Huh? Can you repeat that in English?</h4>\n<p>Okay, let&#8217;s try a real-world example. A common feature on many web<br />\nsites is the automatic handling of acronyms. You&#8217;ll often see an<br />\nacronym such as &#8220;XHTML&#8221; displayed in an alternate style, and when you<br />\nhover your mouse pointer over it, you get a tool-tip which displays the<br />\ndefinition (&#8220;eXtended HyperText Markup Language&#8221;, in this case). You<br />\ndon&#8217;t want to have to type in the markup for this every time you post<br />\nsomething, and automation is what computers are for, right? So, there<br />\nare several plugins available to handle this sort of automated text<br />\nsubsitution.</p>\n<p>TFS comes with the &#8220;TFS Acronymit&#8221; plugin to perform this function.<br />\nIt&#8217;s based on Matt Mullenweg&#8217;s original &#8220;Acronymit&#8221; function, but with<br />\na couple of improvements. In Matt&#8217;s original function, you had to keep<br />\nthe acronym list sorted, longest-to-shortest, and it could get confused<br />\nby recursive acronyms like &#8216;PHP&#8217; (&#8220;PHP Hyptertext Processor&#8221;) or GNU<br />\n(&#8220;GNU&#8217;s Not Unix&#8221;). TFS Acronymit does not have those restrictions.</p>\n<p>For those who think that expansion of technical acronyms is &#8220;teh sux0r&#8221;<br />\n(i.e. &#8220;boring&#8221;), TFS comes with a variety of more entertaining filters.<br />\nThe current set includes &#8220;chef&#8221;, &#8220;fudd&#8221;, &#8220;jive&#8221;, &#8220;kraut&#8221;, &#8220;pirate&#8221;, and<br />\nof course, the aforementioned &#8220;acronymit&#8221;. As a word of caution, the<br />\n&#8220;jive&#8221; and &#8220;kraut&#8221; filters are not what you would call &#8220;politically<br />\ncorrect&#8221;.<br />\nBy default, if the &#8220;TFS Pirate&#8221; filter is active, it will automatically<br />\napply itself to all content on Talk Like a Pirate Day (September 19).<br />\nIf you do not want this filter to automatically activate, set the value<br />\nof the &#8220;$talk_like_a_pirate&#8221; variable at the top of the plugin source<br />\nto &#8220;false&#8221;.</p>\n<p>The &#8220;TFS Acronymit&#8221; filter is automatically applied to all posts<br />\nwhenever it is active. You do not need to set special post custom<br />\nfields in order to use it. Just activate the plugin, and you&#8217;re ready.<br />\nTo modify which acronyms are defined, see the list at the beginning of<br />\nthe plugin, and modify it as you like, following the format you see<br />\nthere.</p>\n<p>It is possible to use the TFS core without activating any additional<br />\nplugins. You can do this with any built-in PHP function accepts a<br />\nsingle string as a parameter and returns a string. For example, you<br />\ncould set a post custom &#8220;content_filter&#8221; with the value &#8220;strrev&#8221;, and<br />\nthe contents of the post would be displayed backwards, or with a value<br />\nof &#8220;strtoupper&#8221; to convert the content to all uppercase text.</p>\n<p>You can only specify a single function in each post custom field.<br />\nHowever, you can chain multiple functions together by using the key<br />\nmore than once. For instance, if you wanted all comments for a post to<br />\ndisplay in uppercase Elmer Fudd text, you would set two post custom<br />\nfields:</p>\n<p>comment_filter = strtoupper<br />\n  comment_filter = fudd</p>\n<p>HOWEVER, note that using PHP built-in functions in this way will bypass<br />\nthe power of the filter_cdata_content() function, which means that it<br />\ncan and will mangle your HTML tags, possibly rendering them useless.<br />\nFor example, applying the strrev function to the string &#8220;</p>\n<p>&lt;</p>\n<p>p&gt;&#8221; will<br />\ntransform it into &#8220;&gt;p&lt;&#8220;, which will confuse your browser in new and<br />\nwonderful ways.</p>\n<p>NOTE: These filters can be very CPU intensive. For one thing, they make<br />\nextensive use of regular expressions, which can be expensive on their own.<br />\nAnd for another, they break your content into many small chunks, in order to<br />\nseparate the filterable text from the HTML code, and the filters run<br />\nseparately on each text chunk found.  This probably won&#8217;t be a problem in<br />\nmost cases.  But if you have long posts being filtered, and you get a lot of<br />\ntraffic, it could start to add up.  A caching plugin (e.g., WP Super Cache,<br />\nor W3 Total Cache) would probably help in that case.</p>\n<h3>The Future</h3>\n<p>I will one day release a version 2.0 of this plugin which will be completely<br />\nrefactored. You can probably expect to see:<br />\n* Consolidate the code so that it is not a collection of separately-enabled<br />\n  mini-plugins.<br />\n* PHP5 OOP architecture to encapsulate everything.<br />\n* An actual admin interface to select which filters are enabled, which<br />\n  bits of content you will allow to be filtered (post titles, post content, comments,<br />\n  blog title, widget titles, etc), whether to auto-activate the Pirate<br />\n  filter on Talk Like a Pirate Day, etc.</p>\n<p>Eventually, there may also be a way to edit the string substitutions so that<br />\nyou can tailor it to your tastes.</p>\n<h3>Credits</h3>\n<p>I created TFS on my own, but I borrowed ideas from several sources. Here are<br />\nsome links you might also want to check out:</p>\n<pre><code>PhotoMatt's original Acronymit code:\n  http://photomatt.net/scripts/acronymit\n\nSimon Willison and I traded some ideas when I started my original hack\nfor Talk Like a Pirate Day, in 2003:\n  http://simon.incutio.com/archive/2003/09/19/aaar\n\nI borrowed, modified, and mangled a ton of stuff from Adam Kalsey's\n\"MovableJive\" plugin for Movable Type. See tfs-jive, tfs-chef, tfs-fudd,\nand tfs-kraut.\n  http://kalsey.com/2003/02/movablejive/\n\nIf all you want to do is stuff like the acronym definitions (or similar\n\"turn this shorthand into a tag\" substitions), then Michel Valdrighi's\n\"Tag, You're It\" plugin is really a better solution:\n  http://zengun.org/weblog/archives/2004/05/tag-you-re-it\n\nThe original inspiration that led to TFS was my desire to apply a\n\"pirate\" filter on my blog for \"Talk Like a Pirate Day\", which is on\nSeptember 19 of each year:\n  http://talklikeapirate.com/\n</code></pre>\n",
        "installation": "<p>Technically, all you need to do is copy the &#8220;text-filter-suite&#8221; folder<br />\ninto your &#8220;wp-content/plugins&#8221; directory, then activate the &#8220;TFS Core&#8221;<br />\nplugin from the WordPress admin interface. But, more generally, you&#8217;ll<br />\nprobably want some of the other filter files, as well. The easiest<br />\nthing to do will be to just copy all of the &#8220;.php&#8221; files to your<br />\nplugins directory, and only activate the ones that interest you. But<br />\nyou can omit any of the &#8220;tfs-whatever.php&#8221; files (other than tfs-core)<br />\nthat don&#8217;t interest you.</p>\n<h4>Using the filters</h4>\n<p>Generally, you&#8217;ll probably want to activate a filter just for specific<br />\nposts. You do this by adding special &#8220;post custom fields&#8221; in the<br />\n&#8220;Write Post&#8221; form.</p>\n<p>Custom fields are composed of two parts: the &#8220;key&#8221; and the &#8220;value&#8221;. The<br />\ntwo special keys that activate TFS are &#8220;post_filter&#8221; and<br />\n&#8220;comment_filter&#8221;. In either case, the value should be the short name of<br />\nthe TFS filter you wish to apply, e.g. &#8220;pirate&#8221; or &#8220;fudd&#8221; (without the<br />\nquotation marks).</p>\n<p>Setting the &#8220;post_filter&#8221; key will apply the filter to the main post<br />\ntext. Setting the &#8220;comment_filter&#8221; key will apply the filter to the<br />\ntext of all comments on the post.</p>\n<h4>Technical mumbo-jumbo</h4>\n<p>There are only two core TFS functions, plus two more to support the<br />\nper-post content and comment filtering based on post custom fields. The<br />\nmain entry point is the &#8220;filter_cdata_content&#8221; function. A TFS filter<br />\nwill call filter_cdata_content, passing the content and the name of a<br />\nsecond function. The magic of filter_cdata_content() is that it will<br />\nonly mangle regular text, leaving HTML tags alone. It will<br />\nautomatically call out to the named function, passing it each chunk of<br />\nnon-HTML-tag text (AKA &#8220;CDATA&#8221;, or &#8220;Character Data&#8221;, in XML parlance)<br />\nin turn.</p>\n<p>The other core function is &#8220;array_apply_regexp&#8221;. This support function<br />\nisn&#8217;t required for every filter, but it is at the core of the included<br />\nTFS filters, such as the &#8220;pirate&#8221; filter. It accepts an associative<br />\narray of regular expressions and replacements, and the content to be<br />\nfiltered. Examine the source of the &#8220;chef&#8221; and &#8220;fudd&#8221; filters for some<br />\nsimple examples.</p>\n<p>The per-post support functions are &#8220;tfs_content_filter&#8221; and<br />\n&#8220;tfs_comment_filter&#8221;. These functions are automatically applied to each<br />\npost and its contents. They look for the &#8220;content_filter&#8221; and<br />\n&#8220;comment_filter&#8221; post custom fields, and apply the appropriate filter<br />\nfunctions if they are found.</p>\n",
        "changelog": "<h4>1.4 &#8211; 2015-06-03</h4>\n<ul>\n<li>Added &#8216;?filter=foo&#8217; URL option back in, with a whitelist of allowed<br />\nfunctions.</li>\n</ul>\n<h4>1.3 &#8211; 2012-09-18</h4>\n<ul>\n<li>Fixed PHP opening shorttag in tfs-acroymit.php</li>\n<li>Eliminated PHP warnings in debug mode</li>\n<li>Removed all closing ?&gt; php tags per WP standards</li>\n<li>Killed generic &#8216;filter&#8217; $_REQUEST variable checking</li>\n</ul>\n<h4>1.2 &#8211; 2010-12-10</h4>\n<ul>\n<li>Added this changelog to the readme</li>\n<li>Moved the is_feed() handling into the init, to avoid breaking in<br />\nWordPress 3.1.</li>\n<li>Added notes about the filters being CPU intensive.</li>\n</ul>\n"
    },
    "short_description": "Advanced filtering functions for WordPress, including the Talk Like a Pirate Day filters.",
    "description": "<p>The Text Filter Suite (&#8220;TFS&#8221;, hereafter) is a WordPress plugin which<br />\nadds some new text filtering functions. In a sense, the core TFS<br />\nfunctions could be considered a &#8220;meta filter&#8221;, because they actually<br />\nprovide a framework that let you construct new filters fairly easily.<br />\nThey also provide an easy way to apply filters to post content and<br />\ncomments on a per-post basis.</p>\n<h4>Huh? Can you repeat that in English?</h4>\n<p>Okay, let&#8217;s try a real-world example. A common feature on many web<br />\nsites is the automatic handling of acronyms. You&#8217;ll often see an<br />\nacronym such as &#8220;XHTML&#8221; displayed in an alternate style, and when you<br />\nhover your mouse pointer over it, you get a tool-tip which displays the<br />\ndefinition (&#8220;eXtended HyperText Markup Language&#8221;, in this case). You<br />\ndon&#8217;t want to have to type in the markup for this every time you post<br />\nsomething, and automation is what computers are for, right? So, there<br />\nare several plugins available to handle this sort of automated text<br />\nsubsitution.</p>\n<p>TFS comes with the &#8220;TFS Acronymit&#8221; plugin to perform this function.<br />\nIt&#8217;s based on Matt Mullenweg&#8217;s original &#8220;Acronymit&#8221; function, but with<br />\na couple of improvements. In Matt&#8217;s original function, you had to keep<br />\nthe acronym list sorted, longest-to-shortest, and it could get confused<br />\nby recursive acronyms like &#8216;PHP&#8217; (&#8220;PHP Hyptertext Processor&#8221;) or GNU<br />\n(&#8220;GNU&#8217;s Not Unix&#8221;). TFS Acronymit does not have those restrictions.</p>\n<p>For those who think that expansion of technical acronyms is &#8220;teh sux0r&#8221;<br />\n(i.e. &#8220;boring&#8221;), TFS comes with a variety of more entertaining filters.<br />\nThe current set includes &#8220;chef&#8221;, &#8220;fudd&#8221;, &#8220;jive&#8221;, &#8220;kraut&#8221;, &#8220;pirate&#8221;, and<br />\nof course, the aforementioned &#8220;acronymit&#8221;. As a word of caution, the<br />\n&#8220;jive&#8221; and &#8220;kraut&#8221; filters are not what you would call &#8220;politically<br />\ncorrect&#8221;.<br />\nBy default, if the &#8220;TFS Pirate&#8221; filter is active, it will automatically<br />\napply itself to all content on Talk Like a Pirate Day (September 19).<br />\nIf you do not want this filter to automatically activate, set the value<br />\nof the &#8220;$talk_like_a_pirate&#8221; variable at the top of the plugin source<br />\nto &#8220;false&#8221;.</p>\n<p>The &#8220;TFS Acronymit&#8221; filter is automatically applied to all posts<br />\nwhenever it is active. You do not need to set special post custom<br />\nfields in order to use it. Just activate the plugin, and you&#8217;re ready.<br />\nTo modify which acronyms are defined, see the list at the beginning of<br />\nthe plugin, and modify it as you like, following the format you see<br />\nthere.</p>\n<p>It is possible to use the TFS core without activating any additional<br />\nplugins. You can do this with any built-in PHP function accepts a<br />\nsingle string as a parameter and returns a string. For example, you<br />\ncould set a post custom &#8220;content_filter&#8221; with the value &#8220;strrev&#8221;, and<br />\nthe contents of the post would be displayed backwards, or with a value<br />\nof &#8220;strtoupper&#8221; to convert the content to all uppercase text.</p>\n<p>You can only specify a single function in each post custom field.<br />\nHowever, you can chain multiple functions together by using the key<br />\nmore than once. For instance, if you wanted all comments for a post to<br />\ndisplay in uppercase Elmer Fudd text, you would set two post custom<br />\nfields:</p>\n<p>comment_filter = strtoupper<br />\n  comment_filter = fudd</p>\n<p>HOWEVER, note that using PHP built-in functions in this way will bypass<br />\nthe power of the filter_cdata_content() function, which means that it<br />\ncan and will mangle your HTML tags, possibly rendering them useless.<br />\nFor example, applying the strrev function to the string &#8220;</p>\n<p>&lt;</p>\n<p>p&gt;&#8221; will<br />\ntransform it into &#8220;&gt;p&lt;&#8220;, which will confuse your browser in new and<br />\nwonderful ways.</p>\n<p>NOTE: These filters can be very CPU intensive. For one thing, they make<br />\nextensive use of regular expressions, which can be expensive on their own.<br />\nAnd for another, they break your content into many small chunks, in order to<br />\nseparate the filterable text from the HTML code, and the filters run<br />\nseparately on each text chunk found.  This probably won&#8217;t be a problem in<br />\nmost cases.  But if you have long posts being filtered, and you get a lot of<br />\ntraffic, it could start to add up.  A caching plugin (e.g., WP Super Cache,<br />\nor W3 Total Cache) would probably help in that case.</p>\n<h3>The Future</h3>\n<p>I will one day release a version 2.0 of this plugin which will be completely<br />\nrefactored. You can probably expect to see:<br />\n* Consolidate the code so that it is not a collection of separately-enabled<br />\n  mini-plugins.<br />\n* PHP5 OOP architecture to encapsulate everything.<br />\n* An actual admin interface to select which filters are enabled, which<br />\n  bits of content you will allow to be filtered (post titles, post content, comments,<br />\n  blog title, widget titles, etc), whether to auto-activate the Pirate<br />\n  filter on Talk Like a Pirate Day, etc.</p>\n<p>Eventually, there may also be a way to edit the string substitutions so that<br />\nyou can tailor it to your tastes.</p>\n<h3>Credits</h3>\n<p>I created TFS on my own, but I borrowed ideas from several sources. Here are<br />\nsome links you might also want to check out:</p>\n<pre><code>PhotoMatt's original Acronymit code:\n  http://photomatt.net/scripts/acronymit\n\nSimon Willison and I traded some ideas when I started my original hack\nfor Talk Like a Pirate Day, in 2003:\n  http://simon.incutio.com/archive/2003/09/19/aaar\n\nI borrowed, modified, and mangled a ton of stuff from Adam Kalsey's\n\"MovableJive\" plugin for Movable Type. See tfs-jive, tfs-chef, tfs-fudd,\nand tfs-kraut.\n  http://kalsey.com/2003/02/movablejive/\n\nIf all you want to do is stuff like the acronym definitions (or similar\n\"turn this shorthand into a tag\" substitions), then Michel Valdrighi's\n\"Tag, You're It\" plugin is really a better solution:\n  http://zengun.org/weblog/archives/2004/05/tag-you-re-it\n\nThe original inspiration that led to TFS was my desire to apply a\n\"pirate\" filter on my blog for \"Talk Like a Pirate Day\", which is on\nSeptember 19 of each year:\n  http://talklikeapirate.com/\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/text-filter-suite.1.4.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "comments": "comments",
        "content": "content",
        "filters": "filters",
        "fun": "fun",
        "funny": "funny"
    },
    "stable_tag": "1.4",
    "versions": {
        "1.0": "https://downloads.wordpress.org/plugin/text-filter-suite.1.0.zip",
        "1.2": "https://downloads.wordpress.org/plugin/text-filter-suite.1.2.zip",
        "1.3": "https://downloads.wordpress.org/plugin/text-filter-suite.1.3.zip",
        "1.4": "https://downloads.wordpress.org/plugin/text-filter-suite.1.4.zip",
        "trunk": "https://downloads.wordpress.org/plugin/text-filter-suite.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://dougal.gunters.org/donate",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/text-filter-suite.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 90,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}