{
    "name": "Simple JWT Login â€“ Allows you to use JWT on REST endpoints.",
    "slug": "simple-jwt-login",
    "version": "3.5.6",
    "author": "<a href=\"https://profiles.wordpress.org/nicu_m/\">Nicu Micle</a>",
    "author_profile": "https://profiles.wordpress.org/nicu_m/",
    "contributors": {
        "nicu_m": {
            "profile": "https://profiles.wordpress.org/nicu_m/",
            "avatar": "https://secure.gravatar.com/avatar/fc3b36211f6375edf1e320ab6cd2464f?s=96&d=monsterid&r=g",
            "display_name": "nicu_m"
        }
    },
    "requires": "4.4.0",
    "tested": "6.6.1",
    "requires_php": "5.5",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 43,
        "4": 1,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 44,
    "support_url": "https://wordpress.org/support/plugin/simple-jwt-login/",
    "support_threads": 2,
    "support_threads_resolved": 0,
    "active_installs": 5000,
    "downloaded": 52177,
    "last_updated": "2024-08-03 5:54am GMT",
    "added": "2019-06-14",
    "homepage": "https://simplejwtlogin.com",
    "sections": {
        "description": "<p>Simple JWT Login is a FREE WordPress plugin that allows you to use a JWT on WordPress REST endpoints.</p>\n<p>This plugin allows you to log in, register, authenticate, delete and change user password to a WordPress website using a JWT.</p>\n<p>It&#8217;s main purpose is to allow you to connect a mobile App or other websites with WordPress.</p>\n<p>Plugin Documentation Site: <a href=\"https://simplejwtlogin.com?utm_source=readme\" rel=\"nofollow ugc\">https://simplejwtlogin.com</a></p>\n<h3>Some awesome features</h3>\n<ul>\n<li>Auto-login using JWT and AUTH_KEY</li>\n<li>Register new users via API</li>\n<li>Delete WordPress users based on a JWT</li>\n<li>Reset user password</li>\n<li>Allow auto-login / register / delete users only from specific IP addresses</li>\n<li>Allow register users only from a specific domain name</li>\n<li>API Route for generating new JWT</li>\n<li>Get JWT from URL, SESSION, COOKIE or HEADER</li>\n<li>Pass request parameters to login URL</li>\n<li>CORS settings for plugin Routes</li>\n<li>Hooks</li>\n<li>JWT Authentication</li>\n<li>Allow access private endpoints with JWT</li>\n<li>Protect endpoints with JWT</li>\n</ul>\n<p>Check the plugin <a href=\"https://simplejwtlogin.com\" rel=\"nofollow ugc\">website</a> for more features.</p>\n<h3>Login User</h3>\n<p>This plugin is customizable and offers you multiple methods to log in to you website, based on multiple scenarios.</p>\n<p>In order to login, users have to send JWT. The plugin, validates the JWT, and if everything is OK, it can extract the WordPress email address or user ID.<br />\nUsers can specify the exact key of the JWT payload where this information can be found.</p>\n<p>Here are the methods how you can send the JWT in order to auto-login:</p>\n<ol>\n<li>URL</li>\n<li>Header</li>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n<p>If the JWT is present in multiple places ( like URL and Header), the JWT will be overwritten.</p>\n<p>This plugin supports multiple JWT Decryption algorithms, like: HS256, HS512, HS384, RS256,RS384 and RS512.</p>\n<p>After the user is logged in you can automatically redirect the user to a page like:</p>\n<ul>\n<li>Dashboard</li>\n<li>Homepage</li>\n<li>or any other custom Page ( this is mainly used for redirecting users to a landing page)</li>\n</ul>\n<p>You can attach to your redirect a URL parameter <code>redirectUrl</code> that will be used for redirect instead of the defined ones.<br />\nIn order to use this, you have to enable it by checking the option <code>Allow redirect to a specific URL</code>.</p>\n<p>Also, redirect after login offers some variables that you can use in the customURL and redirectUrl.<br />\nHere are the variables which you can use in your URL:<br />\n&#8211; {{site_url}} : Site URL<br />\n&#8211; {{user_id}} : Logged in user ID<br />\n&#8211; {{user_email}} : Logged in user email<br />\n&#8211; {{user_login}} : Logged in username<br />\n&#8211; {{user_first_name}} : User first name<br />\n&#8211; {{user_last_name}} : User last name<br />\n&#8211; {{user_nicename}} : User nice name</p>\n<p>You can generate dynamic URLs with these variables, and, before the redirect, the specific value will be replaced.</p>\n<p>Here is an example:</p>\n<pre><code>http://yourdomain.com?param1={{user_id}}&amp;param2={{user_login}}\n</code></pre>\n<p>Also, this plugin allows you to limit the auto-login based on the client IP address.<br />\nIf you are concerned about security, you can limit the auto-login only from some IP addresses.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/autologin/\" rel=\"nofollow ugc\">Read more</a> on our website.</p>\n<h3>Register Users</h3>\n<p>This plugin also allows you to create WordPress users.</p>\n<p>This option is disabled by default, but you can enable it at any time.</p>\n<p>In order to create users, you just have to make a POST request to the route URL, and send an <em>email</em> and a <em>password</em> as parameter and the new user will be created.</p>\n<p>You can select the type for the new users: editor, author, contributor, subscriber, etc.</p>\n<p>Also, you can limit the user creating only for specific IP addresses, or  specific email domains.</p>\n<p>Another cool option is &#8220;Generate a random password when a new user is created&#8221;.<br />\nIf this option is selected, the password is no more required when a new user is created a random password will be generated.</p>\n<p>Another option that you have for register user is &#8220;Initialize force login after register&#8221;.<br />\nWhen the user registration is completed, the user will continue on the flow configured on login config.</p>\n<p>If auto-login is disabled, this feature will not work and the register user will go on a normal flow and return a json response.</p>\n<p>If you want to add custom user_meta on user creation, just add the parameter <code>user_meta</code> with a json. This will create user_meta for the new user.</p>\n<p>{<br />\n    &#8220;meta_key&#8221;:&#8221;meta_value&#8221;,<br />\n    &#8220;meta_key2&#8243;:&#8221;meta_value&#8221;<br />\n}</p>\n<p>These properties can be passed in the request when the new user is created.</p>\n<ul>\n<li><strong>email</strong> : (required) (string)  The user email address.</li>\n<li><strong>password</strong> :  (required) (string) The plain-text user password.</li>\n<li><strong>user_login</strong> : (string) The user&#8217;s login username.</li>\n<li><strong>user_nicename</strong> : (string) The URL-friendly username.</li>\n<li><strong>user_url</strong> : (string) The user URL.</li>\n<li><strong>display_name</strong> : (string) The user&#8217;s display name. Default is the user&#8217;s username.</li>\n<li><strong>nickname</strong> : (string) The user&#8217;s nickname. Default is the user&#8217;s username.</li>\n<li><strong>first_name</strong> : (string) The user&#8217;s first name. For new users, will be used to build the first part of the user&#8217;s display name if $display_name is not specified.</li>\n<li><strong>last_name</strong> : (string) The user&#8217;s last name. For new users, will be used to build the second part of the user&#8217;s display name if $display_name is not specified.</li>\n<li><strong>description</strong> : (string) The user&#8217;s biographical description.</li>\n<li><strong>rich_editing</strong> : (string) Whether to enable the rich-editor for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>syntax_highlighting</strong> : (string) Whether to enable the rich code editor for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>comment_shortcuts</strong> : (string) Whether to enable comment moderation keyboard shortcuts for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;false&#8217;.</li>\n<li><strong>admin_color</strong> : (string) Admin color scheme for the user. Default &#8216;fresh&#8217;.</li>\n<li><strong>use_ssl</strong> : (bool) Whether the user should always access the admin over https. Default false.</li>\n<li><strong>user_registered</strong> : (string) Date the user registered. Format is <code>Y-m-d H:m:s</code>.</li>\n<li><strong>user_activation_key</strong> : (string) Password reset key. Default empty.</li>\n<li><strong>spam</strong> : (bool) Multisite only. Whether the user is marked as spam. Default false.</li>\n<li><strong>show_admin_bar_front</strong> : (string) Whether to display the Admin Bar for the user on the site&#8217;s front end. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>locale</strong> : (string) User&#8217;s locale. Default empty.</li>\n</ul>\n<p><a href=\"https://simplejwtlogin.com/docs/register-user/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Delete User</h3>\n<p>Delete user it is disabled by default.</p>\n<p>In order to delete a user, you have to configure where to search the details in the JWT.<br />\nYou can delete users by WordPress User ID or by Email address.</p>\n<p>Also, you have to choose the JWT parameter key where email or user ID it is stored in the JWT.</p>\n<p>Also, you can limit the deletion of users to specific IP addresses for security reasons.</p>\n<h3>Reset Password</h3>\n<p>Reset password and change password endpoints are disabled by default.</p>\n<p>This plugin allows you to send the reset password endpoint, just by calling an endpoint. An email with the code will be sent to a specific email address.</p>\n<p>Also, you are able to customize this email, or even not send at email at all.</p>\n<p>The change password endpoint, changes the user password, based on the reset password code.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/delete-user/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Authentication</h3>\n<p>This plugin allows users to generate JWT tokens based from WordPress user email and password.</p>\n<p>In order to Get a new JWT, just make a POST request to <em>/auth</em> route with your WordPress email and password ( or password_hash) and the response will look something like this:</p>\n<pre><code> {\n     \"success\": true,\n     \"data\": {\n         \"jwt\": \"NEW_GENERATED_JWT_HERE\"\n     }\n }\n</code></pre>\n<p>If you want to add extra parameters in the JWT payload, just send the parameter <code>payload</code> on <code>/auth</code> endpoint, and add a json with the values you want to be added in the payload.</p>\n<p>At some point, the JWT will expire.<br />\nSo, if you want to renew it without having to ask again for user and password, you will have to make a POST request to the <em>auth/refresh</em> route.</p>\n<p>This will generate a response with a new JWT, similar to the one that <code>/auth</code> generates.</p>\n<p>If you want to get some details about a JWT, and validate that JWT, you can call <code>/auth/validate</code>. If you have a valid JWT, details about the available WordPress user will be returned, and some JWT details.</p>\n<p>If you want to revoke a JWT, access <code>/auth/revoke</code> and send the <code>jwt</code> as a parameter.</p>\n<p>The plugin auto-generates the example URL you might need to test these scenarios.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/authentication/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Auth codes</h3>\n<p>Auth codes are optional, but you can enable them for Auto-login, Register User and Delete user.</p>\n<p>This feature allows you to add a layer of protection to your API routes.</p>\n<p>The Auth codes contains 3 parts:<br />\n1. Authentication Key: This is the actual code that you have to add in the request.<br />\n2. WordPress new User Role: can be used when you want to create multiple user types with the create user endpoint. If you leave it blank, the value configured in the &#8216;Register Settings&#8217; will be used.<br />\n3. Expiration Date: This allows you to set an expiration date for you auth codes. The format is `Y-M-D H:m:s&#8217;. Example : 2020-12-24 23:00:00. If you leave it blank, it will never expire.</p>\n<p>Expiration date format: year-month-day hours:minutes:seconds</p>\n<p><a href=\"https://simplejwtlogin.com/docs/auth-codes/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Hooks</h3>\n<p>This plugin allows advanced users to link some hooks with the plugin and perform some custom scripts.<br />\nSome available hooks:</p>\n<ul>\n<li>\n<p><strong>simple_jwt_login_login_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user</li>\n<li>description: This hook it is called after the user has been logged in. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_redirect_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: string $url, array $request</li>\n<li>description: This hook it is called before the user it will be redirected to the page he specified in the login section. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_register_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user, string $plain_text_password</li>\n<li>description: This hook it is called after a new user has been created.  </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_delete_user_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user</li>\n<li>description: This hook it is called right after the user has been deleted.</li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_jwt_payload_auth</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: array $payload, array $request</li>\n<li>return: array $payload</li>\n<li>description: This hook is called on /auth endpoint. Here you can modify payload parameters. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_no_redirect_message</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: array $payload, array $request</li>\n<li>return: array $payload</li>\n<li>description: This hook is called on /autologin endpoint when the option <code>No Redirect</code> is selected. You can customize the message and add parameters.</li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_reset_password_custom_email_template</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: string $template, array $request</li>\n<li>return: string $template</li>\n<li>description: This is executed when POST /user/reset_password is called. It will replace the email template that has been added in Reset Password settings  </li>\n</ul>\n</li>\n</ul>\n<p>View full list of hooks on <a href=\"https://simplejwtlogin.com/docs/hooks\" rel=\"nofollow ugc\">https://simplejwtlogin.com/docs/hooks</a>.</p>\n<h3>CORS</h3>\n<p>The CORS standard it is needed because it allows servers to specify who can access its assets and how the assets can be accessed.<br />\nCross-origin requests are made using the standard HTTP request methods like GET, POST, PUT, DELETE, etc.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/cors/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Protect endpoints</h3>\n<p>This option is disabled by default. In order to enable it, you need to set &#8220;Protect endpoints enabled&#8221; to true.</p>\n<p>This feature comes with 2 actions:<br />\n&#8211; Apply on All REST Endpoints<br />\n&#8211; Apply only on specific REST endpoints</p>\n<p>When you choose <code>Apply on All REST Endpoints</code>, you will be able to whitelist some endpoints from your WordPress REST by adding them to the whitelist section.<br />\nFor example, If you only want to allow users to access the <code>wp/v2/posts</code> endpoint without having to provide the JWT, you save in the whitelist section <code>wp/v2/posts</code></p>\n<p>When you choose <code>Apply only on specific endpoints</code>, you will have to add all the endpoints you want to be protected by JWT.</p>\n<p>When an endpoint is protected, and you don&#8217;t provide a JWT, you will get the following response:</p>\n<p>{<br />\n   &#8220;success&#8221;:false,<br />\n   &#8220;data&#8221;:{<br />\n      &#8220;message&#8221;:&#8221;Your are not authorized to access this endpoint.&#8221;,<br />\n      &#8220;errorCode&#8221;:403,<br />\n      &#8220;type&#8221;:&#8221;simple-jwt-login-route-protect&#8221;<br />\n   }<br />\n}</p>\n<p><a href=\"https://simplejwtlogin.com/docs/protect-endpoints/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Integration</h3>\n<p><strong>PHP</strong></p>\n<p>In order to easily integrate your app/site with simple-jwt-login, we have developed a composer package.</p>\n<p>composer require nicumicle/simple-jwt-login-client-php</p>\n<p>You can check the <a href=\"https://packagist.org/packages/nicumicle/simple-jwt-login-client-php\" rel=\"nofollow ugc\">package page</a> for more details and code examples.</p>\n<p><strong>Javascript</strong></p>\n<p>Also, there is a <a href=\"https://github.com/simple-jwt-login/js-sdk\" rel=\"nofollow ugc\">Javascript SDK</a> that you can install with <code>npm</code> or <code>yarn</code>.</p>\n<p>npm install &#8220;simple-jwt-login&#8221;</p>\n<p>or</p>\n<p>yarn add &#8220;simple-jwt-login&#8221;</p>\n",
        "installation": "<p>Here&#8217;s how you install and activate the JWT-login plugin:</p>\n<ol>\n<li>Download the Simple-JWT-login plugin.</li>\n<li>Upload the .zip file in your WordPress plugin directory.</li>\n<li>Activate the plugin from the &#8220;Plugins&#8221; menu in WordPress.</li>\n</ol>\n<p>or</p>\n<ol>\n<li>Go to the &#8216;Plugins&#8217; menu in WordPress and click &#8216;Add New&#8217;</li>\n<li>Search for &#8216;Simple JWT Login&#8217; and select &#8216;Install Now&#8217;</li>\n<li>Activate the plugin when prompted</li>\n</ol>\n<p>Next steps:</p>\n<ul>\n<li>\n<p>Go to &#8220;General section&#8221;</p>\n<ul>\n<li>set &#8220;JWT Decryption key&#8221;. With this key, we will validate the JWT.</li>\n<li>choose &#8220;JWT Decryption algorithm&#8221;.</li>\n</ul>\n</li>\n<li>\n<p>Go to &#8220;Login Settings&#8221;</p>\n<ul>\n<li>please set &#8220;Allow Auto-login&#8221; to &#8220;yes&#8221;.</li>\n<li>set parameter &#8220;Action&#8221; ( Login by WordPress User ID / User Email).</li>\n<li>set the &#8220;JWT parameter key&#8221; with the key from your JWT where user email or user ID can be found in the decoded JWT.</li>\n</ul>\n</li>\n</ul>\n<p>After that, you can copy the sample URL from the top of the page ( Login Config section), replace the JWT string with your valid JWT, and you will be redirected to your WordPress and automatically logged in.</p>\n<p>Also, if you don&#8217;t want to add the JWT in the URL, you can add it in the header of the request with the key &#8216;Authorization&#8217;.<br />\nPlease note that the JWT that is set in the header overwrites the one from the URL.</p>\n<p>Example:</p>\n<p>Authorization: Bearer YOURJWTTOKEN</p>\n<p>or</p>\n<p>Authorization: YOURJWTTOKEN</p>\n",
        "faq": "\n<dt id='is%20this%20plugin%20secure%3F'>\nIs this plugin secure?\n</h4>\n<p>\n<p>Yes, this plugin is secure. It allows to auto-login to your WordPress website using a JWT, that is decrypted and validated against your JWT Decryption key.<br />\nMake sure you set the specific user type when new users are created.</p>\n</p>\n<dt id='can%20i%20disable%20the%20api%20for%20registering%20new%20users%3F'>\nCan I disable the API for registering new users?\n</h4>\n<p>\n<p>Yes, both Auto-login and register can be enabled or disabled.</p>\n</p>\n<dt id='can%20i%20limit%20the%20email%20addresses%20that%20can%20register%20in%20wordpress%20with%20this%20plugin%3F'>\nCan I limit the email addresses that can register in WordPress with this plugin?\n</h4>\n<p>\n<p>Yes, You can use the domain limitation and add multiple domains separated by comma.<br />\nUsers that don&#8217;t provide an email from that domain, will get an error.</p>\n</p>\n<dt id='can%20i%20use%20a%20jwt%20generated%20by%20another%20plugin%20to%20login%3F'>\nCan I use a JWT generated by another plugin to login?\n</h4>\n<p>\n<p>Yes. The only thing you have to make sure, in order to work, is that you use the same &#8220;Decryption Key&#8221; and encryption algorithm.</p>\n</p>\n<dt id='is%20the%20auth%20code%20required%3F'>\nIs the Auth Code required?\n</h4>\n<p>\n<p>No, it is not required. You can disable it from &#8216;Login config&#8217;, &#8216;Register Config&#8217; and &#8216;Delete User Config&#8217;. Just set the parameter &#8216;Login|Register requires Auth Code&#8217; to &#8216;No&#8217;.</p>\n</p>\n<dt id='i%20don%27t%20want%20other%20users%20to%20be%20able%20to%20delete%20users.%20what%20should%20i%20do%3F'>\nI don&#8217;t want other users to be able to delete users. What should I do?\n</h4>\n<p>\n<p>The &#8216;delete users option&#8217; is disabled by default. To make sure nobody will delete a user, please make sure the option &#8220;Allow Delete&#8221; is set to &#8220;No&#8221;.</p>\n</p>\n<dt id='can%20i%20automatically%20log%20in%20to%20a%20wordpress%20website%20from%20my%20mobile%20app%20using%20this%20plugin%3F'>\nCan I automatically log in to a WordPress website from my mobile App using this plugin?\n</h4>\n<p>\n<p>Yes. The main feature of this plugin is to automatically log in users into a WordPress website using a JWT. So, you can log in into WordPress from mobile apps, react native, angular, Vue js, meteor, backbone, javascript, etc.</p>\n</p>\n<dt id='how%20to%20use%20hooks%3F'>\nHow to use hooks?\n</h4>\n<p>\n<p>Here is a code example, how to send an email after a new user has been created.</p>\n<pre><code>add_action( 'simple_jwt_login_register_hook', function($user, $password){\n    $to      = $user-&gt;user_email;\n    $subject = 'Welcome';\n    $message = '\n               Welcome to My Site. Your new user credentials are: \n               email: ' . $to .'\n               password: '. $password;\n    wp_mail($to, $subject, $message);\n   }, 10, 2);\n</code></pre>\n<p>Here is an example on how you can overwrite the &#8220;No Redirect&#8221; response after autologin:</p>\n<pre><code>add_filter('simple_jwt_login_no_redirect_message',function($response, $request){\n    $response['userId'] = get_current_user_id();\n    $response['userDetails'] = wp_get_current_user();\n    return $response;\n},10, 2);\n</code></pre>\n<p>Here is an example, on how you can change the body for reset password email template:</p>\n<pre><code>add_filter('simple_jwt_login_reset_password_custom_email_template',\nfunction ($template, $request) {\n        $template .= 'The template has been modified by hook';\n        return $template;\n    },\n    10,\n    2\n);\n</code></pre>\n</p>\n<dt id='i%20cannot%20get%20the%20jwt%20from%20session.%20where%20should%20i%20store%20the%20jwt%3F'>\nI cannot get the JWT from session. Where should I store the JWT?\n</h4>\n<p>\n<p>The plugin searches for the JWT in:<br />\n&#8211; URL ( &amp;jwt=YOUR JWT HERE)<br />\n&#8211; SESSION (  <code>$_SESSION['simple-jwt-login-token']</code>)<br />\n&#8211; COOKIE ( <code>$_COOKIE['simple-jwt-login-token']</code> )<br />\n&#8211; Header ( <code>Authorization: Bearer YOUR_JWT_HERE</code>)</p>\n<p>Also, the key name for each parameter, can be changed in the general section.</p>\n</p>\n<dt id='i%20would%20like%20to%20create%20users%20with%20different%20roles.%20it%20is%20possible%3F'>\nI would like to create users with different roles. It is possible?\n</h4>\n<p>\n<p>Yes. In order to be able to create different users with different roles, first you have to create some AUTH Codes, and set the desired roles for each Auth Code.<br />\nAfter that, for the create user route, simply add the AUTH code in the request, and the role from &#8216;Register User&#8217; will be overwritten with the one from Auth Code.</p>\n</p>\n\n",
        "changelog": "<p>A complete Changelog is available on the <a href=\"https://github.com/nicumicle/simple-jwt-login/blob/master/Changelog.md\" rel=\"nofollow ugc\">GitHub repository</a>.</p>\n<h4>3.5.6 ( 03 Aug 2024)</h4>\n<ul>\n<li>Update WordPress 6.6 Compatibility</li>\n<li>Fix revoked token validation when middleware enabled <a href=\"https://github.com/nicumicle/simple-jwt-login/issues/110\" rel=\"nofollow ugc\">#110</a></li>\n</ul>\n<h4>3.5.5 ( 04 May 2024)</h4>\n<ul>\n<li>Update README</li>\n<li>Refactor Protect Endpoints</li>\n</ul>\n<h4>3.5.4 ( 03 May 2024)</h4>\n<ul>\n<li>Add OAuth support for Google <a href=\"https://github.com/nicumicle/simple-jwt-login/issues/97\" rel=\"nofollow ugc\">#97</a></li>\n<li>Fix status code for expired tokens <a href=\"https://github.com/nicumicle/simple-jwt-login/issues/102\" rel=\"nofollow ugc\">#102</a></li>\n<li>Update WordPress 6.5 Compatibility</li>\n</ul>\n<h4>3.5.3 (16 November 2023)</h4>\n<ul>\n<li>Fix licence in composer.json</li>\n<li>Update WordPress 6.4 compatibility</li>\n</ul>\n<h4>3.5.2 (02 November 2023)</h4>\n<ul>\n<li>Fix change user password with revoked JWT</li>\n<li>Change routes priority from floats to int and fix deprecation message &#8220;Implicit conversion from float to int loses precision&#8221;</li>\n<li>Add <code>iss</code> to JWT payload and allow to configure it</li>\n<li>Fix user meta on register user <a href=\"https://github.com/nicumicle/simple-jwt-login/issues/86\" rel=\"nofollow ugc\">#86</a></li>\n<li>Fix calling protected endpoints with revoked token <a href=\"https://github.com/nicumicle/simple-jwt-login/issues/75\" rel=\"nofollow ugc\">#75</a></li>\n</ul>\n<h4>3.5.1 (1 October 2023)</h4>\n<ul>\n<li>Update WordPress 6.3 compatibility</li>\n</ul>\n<h4>3.5.0 (04 Jan 2023)</h4>\n<ul>\n<li>Fix unable to create post issue when protect endpoints is enabled for all endpoints</li>\n<li>Search user by email on reset password</li>\n<li>Switch <code>get_user_by_email</code> to <code>get_user_by()</code> due to <a href=\"https://developer.wordpress.org/reference/functions/get_user_by_email/\" rel=\"nofollow ugc\">deprecation</a></li>\n<li>Remove method <code>convertUserToArray</code> from WordPressData.</li>\n<li>Drop support for PHP 5.3 and PHP 5.4</li>\n</ul>\n<h4>3.4.10 (14 Dec 2022)</h4>\n<ul>\n<li>Fix issue with rest routes</li>\n</ul>\n<h4>3.4.9 (04 Dec 2022)</h4>\n<ul>\n<li>Add Strength indicator for JWT decryption key</li>\n<li>Allow setting custom length for random password. The default is 10 characters.</li>\n<li>Allow sending base_64 encoded <code>password</code> and <code>passhash</code> on the <code>/auth</code> endpoint</li>\n<li>Fix issue with <code>includeRequestParameters</code> that has been building incorrect URLs</li>\n<li>Add query parameters filter on autologin redirect</li>\n<li>Add the <code>simple_jwt_login_before_endpoint</code> hook before all simple-jwt-login routes are initialized</li>\n</ul>\n<h4>3.4.8 (04 Nov 2022)</h4>\n<ul>\n<li>Add filter to allow the change for authentication payload</li>\n<li>Change how we log in the user on while using the &#8220;protect endpoint&#8221; feature</li>\n<li>Refactor Route Service getUserFromJWT method</li>\n<li>Sanitize data from request</li>\n<li>Fix password issue when it contains special characters</li>\n<li><code>/auth/validate</code> endpoint supports both <code>GET</code> and <code>POST</code> methods</li>\n</ul>\n<h4>3.4.7 (02 Oct 2022)</h4>\n<ul>\n<li>Remove unused code from the JWT library</li>\n<li>Move JWT Library to a folder</li>\n<li>Stay on current page after saving settings</li>\n<li>Some small text sanitizations</li>\n<li>Change how views are loaded in order to prevent &#8220;local file inclusion risk&#8221;</li>\n</ul>\n<h4>3.4.6 (27 Apr 2022)</h4>\n<ul>\n<li>Fix user_meta when passed as json in request body</li>\n</ul>\n<h4>3.4.5 (11 Apr 2022)</h4>\n<ul>\n<li>Add Redirect on Fail autologin</li>\n<li>Add shortcodes for displaying autologin errors</li>\n</ul>\n<h4>3.4.4 (03 Apr 2022)</h4>\n<ul>\n<li>Add hooks for all success responses</li>\n</ul>\n<h4>3.4.3 ( 30 Jan 2022)</h4>\n<ul>\n<li>Tested with WordPress 5.9</li>\n<li>Do not add empty JWT to Authorization header</li>\n</ul>\n<h4>3.4.2 (14 Dec 2021)</h4>\n<ul>\n<li>Display user roles on auth/validate and on register user</li>\n</ul>\n<h4>3.4.1 (05 Dec 2021)</h4>\n<ul>\n<li>Fix protect endpoint conflict with wp-admin actions</li>\n<li>Check if user role exists</li>\n<li>Improve logic for protect endpoints</li>\n<li>Allow Authentication with DB hashed password</li>\n<li>Change user password with JWT</li>\n</ul>\n<h4>3.4.0 (17 Oct 2021)</h4>\n<ul>\n<li>Implement protected endpoints</li>\n</ul>\n<h4>3.3.1 (13 Oct 2021)</h4>\n<ul>\n<li>Sanitize load views</li>\n</ul>\n<h4>3.3.0 (13 Oct 2021)</h4>\n<ul>\n<li>Sanitize all displayed texts</li>\n<li>Add missing translation texts</li>\n<li>Update bootstrap libraries</li>\n<li>Update all translations</li>\n<li>Improve random password algorithm for better security</li>\n</ul>\n<h4>3.2.1 (09 Oct 2021)</h4>\n<ul>\n<li>Fix CSRF for admin settings</li>\n</ul>\n<h4>3.2.0 (26 Sept 2021)</h4>\n<ul>\n<li>Add user to simple_jwt_login_register_hook and simple_jwt_login_login_hook hooks</li>\n<li>Add option to allow adding a JWT in the register user endpoint</li>\n</ul>\n<h4>3.1.0 (31 July 2021)</h4>\n<ul>\n<li>Add reset password and change password endpoints</li>\n</ul>\n<h4>3.0.0 (11 July 2021)</h4>\n<ul>\n<li>Plugin code refactor</li>\n<li>Rewrite file auto-loaded</li>\n<li>Improve parse request parameters</li>\n<li>Add support for JSON body requests</li>\n<li>Fix user_meta URL encoded</li>\n<li>Add support for Force Login plugin</li>\n<li>Add Auth codes to dashboard</li>\n<li>Add IP limitation for Authentication</li>\n<li>Add support for Delete user by username</li>\n<li>Add support for <code>*</code> in IP restrictions</li>\n<li>Fix user role <code>None</code> when empty role in Auth Codes</li>\n<li>Add Auth code on Authentication endpoint</li>\n</ul>\n<h4>2.6.2 (29 April 2021)</h4>\n<ul>\n<li>Update documentation link with plugin website URL</li>\n</ul>\n<h4>2.6.1 (10 April 2021)</h4>\n<ul>\n<li>Add documentation link</li>\n</ul>\n<h4>2.6.0 (08 December 2020)</h4>\n<ul>\n<li>Add <code>No Redirect</code> option for autologin and respond with a json on this endpoint</li>\n<li>Add Hook for <code>No redirect</code> in order to customize the autologin response</li>\n</ul>\n<h4>2.5.2 (27 November 2020)</h4>\n<ul>\n<li>Add permission callback to api routes</li>\n<li>Use session start only when session token has been activated</li>\n</ul>\n<h4>2.5.1 (16 November 2020)</h4>\n<ul>\n<li>Fix Authorization header</li>\n</ul>\n<h4>2.5.0 (15 November 2020)</h4>\n<ul>\n<li>Add key change for URL, Session, Cookie and Header parameters</li>\n</ul>\n<h4>2.4.1 (21 October 2020)</h4>\n<ul>\n<li>Add more variables for <code>redirectUrl</code></li>\n</ul>\n<h4>2.4.0 (20 October 2020)</h4>\n<ul>\n<li>Add <code>redirectUrl</code> parameter</li>\n<li>Add variables for URLs</li>\n<li>Fix session start warning</li>\n</ul>\n<h4>2.3.1 (01 September 2020)</h4>\n<ul>\n<li>Highlight Settings errors and display section</li>\n<li>fix PHP warning for session_start()</li>\n</ul>\n<h4>2.3.0 (25 August 2020)</h4>\n<ul>\n<li>Add support for revoke token: /auth/revoke</li>\n<li>Allow adding extra parameters in payload on /auth endpoint</li>\n<li>Add filter on /auth in order to allow payload modification</li>\n<li>Add support for user_meta on create user</li>\n<li>Allow users to set decryption key in WordPress PHP code</li>\n<li>Display number of active hooks on dashboard</li>\n<li>Improve error system from plugin settings</li>\n</ul>\n<h4>2.2.7 (05 August 2020)</h4>\n<ul>\n<li>Fix warning for &#8220;register_rest_route was called incorrectly&#8221;</li>\n<li>Fix getting JWT from header: ignore white spaces</li>\n<li>Allow users to store base64 encoded decryption keys and use them as decoded when needed</li>\n</ul>\n<h4>2.2.6 (20 July 2020)</h4>\n<ul>\n<li>Fix issue with saving JWT algorithm</li>\n<li>Allow usage of certificates in order to encode/decode JWT</li>\n<li>Add option to add username in JWT payload</li>\n<li>Users can authenticate with WordPress username for /auth endpoint</li>\n</ul>\n<h4>2.2.5 (18 July 2020)</h4>\n<ul>\n<li>Allow login by username ( user_login )</li>\n<li>beta: Allow users to access private endpoints via API with JWT</li>\n</ul>\n<h4>2.2.4 (13 July 2020)</h4>\n<ul>\n<li>Fix tabs visibility issue on some WordPress versions</li>\n</ul>\n<h4>2.2.3 (10 July 2020)</h4>\n<ul>\n<li>Add a toggle for all hooks</li>\n<li>Fix CORS issue</li>\n</ul>\n<h4>2.2.2 (09 July 2020)</h4>\n<ul>\n<li>Attach plugin version to js and css</li>\n<li>Change the path for js and css files</li>\n<li>Change the load order for the JS files</li>\n</ul>\n<h4>2.2.1 (08 July 2020)</h4>\n<ul>\n<li>Fix issue with bootstrap</li>\n</ul>\n<h4>2.2.0 (29 June 2020)</h4>\n<ul>\n<li>Add /auth/validate endpoint to validate tokens and get some details about the user that it is present in the JWT</li>\n</ul>\n<h4>2.1.1 (26 June 2020)</h4>\n<ul>\n<li>Fix error for auto-login after registering user</li>\n</ul>\n<h4>2.1.0 (20 June 2020)</h4>\n<ul>\n<li>Add support for CORS</li>\n<li>Include request parameters used for login link in the REDIRECT URL</li>\n<li>Add initial request data to the hook simple_jwt_login_redirect_hook call</li>\n<li>Add expiration date and user role to AUTH Codes</li>\n</ul>\n<h4>2.0.0 (14 June 2020)</h4>\n<ul>\n<li>New UI for plugin configuration</li>\n<li>Allow users to enable/disable specific hooks</li>\n<li>Add route for JWT generator</li>\n<li>Add route that refreshes an expired JWT</li>\n<li>Allow custom user_login for new users.</li>\n<li>Add WP_user in create user response</li>\n</ul>\n<h4>1.6.4 (06 June 2020)</h4>\n<ul>\n<li>Fix route PHP warning</li>\n</ul>\n<h4>1.6.3 (26 May 2020)</h4>\n<ul>\n<li>Add a hook that is called before the user it is redirected to the page he specified in the login section.</li>\n</ul>\n<h4>1.6.2 (23 May 2020)</h4>\n<ul>\n<li>Add plain text password to register user hook</li>\n<li>Update documentation</li>\n<li>Add option for a random password on new created users</li>\n<li>Add option &#8216;Initialize force login after register&#8217; &#8211; that allows users to continue on the auto-login flow after user registration</li>\n<li>Add more options for create new user</li>\n<li>Add more options when a new user is created</li>\n</ul>\n<h4>1.6.1 (20 May 2020)</h4>\n<ul>\n<li>Improve mechanism for detecting if plugin needs update/create for DB option</li>\n<li>Add new option to get JWT from &#8216;$_COOKIE&#8217; and &#8216;$_SESSION&#8217;</li>\n<li>Update readme</li>\n</ul>\n<h4>1.6.0 (17 May 2020)</h4>\n<ul>\n<li>Fix save settings with minimum number of parameters ( No auth codes if all options are disabled)</li>\n<li>Add hooks for login, register and create User.</li>\n<li>Ignore case for JWT parameter</li>\n<li>JWT can be added in header</li>\n<li>Update Readme</li>\n</ul>\n<h4>1.5.0 (05 Feb 2020)</h4>\n<ul>\n<li>Allow delete users based on a JWT token</li>\n<li>Refactor routes section</li>\n<li>Allow users to set custom namespace for API route</li>\n<li>Change create user route name and offer support for backward compatibility</li>\n</ul>\n<h4>1.4.0 (29 Jan 2020)</h4>\n<ul>\n<li>Add codes to errors</li>\n<li>Code refactor</li>\n<li>Allow save in settings with no AUTH_KEYS when they are not used</li>\n<li>Improve sample URL generators</li>\n<li>Small UI Changes</li>\n<li>Fix validations</li>\n<li>Keep settings values even if there is an error</li>\n<li>Update readme</li>\n</ul>\n<h4>1.3.1 (20 Dec 2019)</h4>\n<ul>\n<li>Plugin can be configured only by administrators</li>\n</ul>\n<h4>1.3.0 (28 Nov 2019)</h4>\n<ul>\n<li>Add support for translations</li>\n<li>Code refactor</li>\n</ul>\n<h4>1.2.4 (26 Nov 2019)</h4>\n<ul>\n<li>Improve UI for Auth codes</li>\n<li>Update Readme</li>\n</ul>\n<h4>1.2.3 (16 Nov 2019)</h4>\n<ul>\n<li>Allow users to change Auth Key parameter</li>\n</ul>\n<h4>1.2.2 (16 Nov 2019)</h4>\n<ul>\n<li>Add support for getting key from jwt and array</li>\n</ul>\n<h4>1.2.1 (23 June 2019)</h4>\n<ul>\n<li>Add functionality for copy login and register example URL</li>\n</ul>\n<h4>1.2.0 (21 June 2019)</h4>\n<ul>\n<li>Allow login by email or WordPress user ID</li>\n<li>UI / UX small improvements</li>\n</ul>\n<h4>1.1.0 (15 June 2019)</h4>\n<ul>\n<li>Add support for IP address limitation for login / register</li>\n<li>Allow users to register only with emails from specific domains</li>\n<li>Possibility to make requests without Auth Codes</li>\n</ul>\n<h4>1.0.0 (14 June 2019)</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n"
    },
    "short_description": "The main purpose of this plugin is to allow Mobile apps, or other websites to access the content via REST endpoints in a secure way.",
    "description": "<p>Simple JWT Login is a FREE WordPress plugin that allows you to use a JWT on WordPress REST endpoints.</p>\n<p>This plugin allows you to log in, register, authenticate, delete and change user password to a WordPress website using a JWT.</p>\n<p>It&#8217;s main purpose is to allow you to connect a mobile App or other websites with WordPress.</p>\n<p>Plugin Documentation Site: <a href=\"https://simplejwtlogin.com?utm_source=readme\" rel=\"nofollow ugc\">https://simplejwtlogin.com</a></p>\n<h3>Some awesome features</h3>\n<ul>\n<li>Auto-login using JWT and AUTH_KEY</li>\n<li>Register new users via API</li>\n<li>Delete WordPress users based on a JWT</li>\n<li>Reset user password</li>\n<li>Allow auto-login / register / delete users only from specific IP addresses</li>\n<li>Allow register users only from a specific domain name</li>\n<li>API Route for generating new JWT</li>\n<li>Get JWT from URL, SESSION, COOKIE or HEADER</li>\n<li>Pass request parameters to login URL</li>\n<li>CORS settings for plugin Routes</li>\n<li>Hooks</li>\n<li>JWT Authentication</li>\n<li>Allow access private endpoints with JWT</li>\n<li>Protect endpoints with JWT</li>\n</ul>\n<p>Check the plugin <a href=\"https://simplejwtlogin.com\" rel=\"nofollow ugc\">website</a> for more features.</p>\n<h3>Login User</h3>\n<p>This plugin is customizable and offers you multiple methods to log in to you website, based on multiple scenarios.</p>\n<p>In order to login, users have to send JWT. The plugin, validates the JWT, and if everything is OK, it can extract the WordPress email address or user ID.<br />\nUsers can specify the exact key of the JWT payload where this information can be found.</p>\n<p>Here are the methods how you can send the JWT in order to auto-login:</p>\n<ol>\n<li>URL</li>\n<li>Header</li>\n<li>Cookie</li>\n<li>Session</li>\n</ol>\n<p>If the JWT is present in multiple places ( like URL and Header), the JWT will be overwritten.</p>\n<p>This plugin supports multiple JWT Decryption algorithms, like: HS256, HS512, HS384, RS256,RS384 and RS512.</p>\n<p>After the user is logged in you can automatically redirect the user to a page like:</p>\n<ul>\n<li>Dashboard</li>\n<li>Homepage</li>\n<li>or any other custom Page ( this is mainly used for redirecting users to a landing page)</li>\n</ul>\n<p>You can attach to your redirect a URL parameter <code>redirectUrl</code> that will be used for redirect instead of the defined ones.<br />\nIn order to use this, you have to enable it by checking the option <code>Allow redirect to a specific URL</code>.</p>\n<p>Also, redirect after login offers some variables that you can use in the customURL and redirectUrl.<br />\nHere are the variables which you can use in your URL:<br />\n&#8211; {{site_url}} : Site URL<br />\n&#8211; {{user_id}} : Logged in user ID<br />\n&#8211; {{user_email}} : Logged in user email<br />\n&#8211; {{user_login}} : Logged in username<br />\n&#8211; {{user_first_name}} : User first name<br />\n&#8211; {{user_last_name}} : User last name<br />\n&#8211; {{user_nicename}} : User nice name</p>\n<p>You can generate dynamic URLs with these variables, and, before the redirect, the specific value will be replaced.</p>\n<p>Here is an example:</p>\n<pre><code>http://yourdomain.com?param1={{user_id}}&amp;param2={{user_login}}\n</code></pre>\n<p>Also, this plugin allows you to limit the auto-login based on the client IP address.<br />\nIf you are concerned about security, you can limit the auto-login only from some IP addresses.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/autologin/\" rel=\"nofollow ugc\">Read more</a> on our website.</p>\n<h3>Register Users</h3>\n<p>This plugin also allows you to create WordPress users.</p>\n<p>This option is disabled by default, but you can enable it at any time.</p>\n<p>In order to create users, you just have to make a POST request to the route URL, and send an <em>email</em> and a <em>password</em> as parameter and the new user will be created.</p>\n<p>You can select the type for the new users: editor, author, contributor, subscriber, etc.</p>\n<p>Also, you can limit the user creating only for specific IP addresses, or  specific email domains.</p>\n<p>Another cool option is &#8220;Generate a random password when a new user is created&#8221;.<br />\nIf this option is selected, the password is no more required when a new user is created a random password will be generated.</p>\n<p>Another option that you have for register user is &#8220;Initialize force login after register&#8221;.<br />\nWhen the user registration is completed, the user will continue on the flow configured on login config.</p>\n<p>If auto-login is disabled, this feature will not work and the register user will go on a normal flow and return a json response.</p>\n<p>If you want to add custom user_meta on user creation, just add the parameter <code>user_meta</code> with a json. This will create user_meta for the new user.</p>\n<p>{<br />\n    &#8220;meta_key&#8221;:&#8221;meta_value&#8221;,<br />\n    &#8220;meta_key2&#8243;:&#8221;meta_value&#8221;<br />\n}</p>\n<p>These properties can be passed in the request when the new user is created.</p>\n<ul>\n<li><strong>email</strong> : (required) (string)  The user email address.</li>\n<li><strong>password</strong> :  (required) (string) The plain-text user password.</li>\n<li><strong>user_login</strong> : (string) The user&#8217;s login username.</li>\n<li><strong>user_nicename</strong> : (string) The URL-friendly username.</li>\n<li><strong>user_url</strong> : (string) The user URL.</li>\n<li><strong>display_name</strong> : (string) The user&#8217;s display name. Default is the user&#8217;s username.</li>\n<li><strong>nickname</strong> : (string) The user&#8217;s nickname. Default is the user&#8217;s username.</li>\n<li><strong>first_name</strong> : (string) The user&#8217;s first name. For new users, will be used to build the first part of the user&#8217;s display name if $display_name is not specified.</li>\n<li><strong>last_name</strong> : (string) The user&#8217;s last name. For new users, will be used to build the second part of the user&#8217;s display name if $display_name is not specified.</li>\n<li><strong>description</strong> : (string) The user&#8217;s biographical description.</li>\n<li><strong>rich_editing</strong> : (string) Whether to enable the rich-editor for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>syntax_highlighting</strong> : (string) Whether to enable the rich code editor for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>comment_shortcuts</strong> : (string) Whether to enable comment moderation keyboard shortcuts for the user. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;false&#8217;.</li>\n<li><strong>admin_color</strong> : (string) Admin color scheme for the user. Default &#8216;fresh&#8217;.</li>\n<li><strong>use_ssl</strong> : (bool) Whether the user should always access the admin over https. Default false.</li>\n<li><strong>user_registered</strong> : (string) Date the user registered. Format is <code>Y-m-d H:m:s</code>.</li>\n<li><strong>user_activation_key</strong> : (string) Password reset key. Default empty.</li>\n<li><strong>spam</strong> : (bool) Multisite only. Whether the user is marked as spam. Default false.</li>\n<li><strong>show_admin_bar_front</strong> : (string) Whether to display the Admin Bar for the user on the site&#8217;s front end. Accepts &#8216;true&#8217; or &#8216;false&#8217; as a string literal, not boolean. Default &#8216;true&#8217;.</li>\n<li><strong>locale</strong> : (string) User&#8217;s locale. Default empty.</li>\n</ul>\n<p><a href=\"https://simplejwtlogin.com/docs/register-user/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Delete User</h3>\n<p>Delete user it is disabled by default.</p>\n<p>In order to delete a user, you have to configure where to search the details in the JWT.<br />\nYou can delete users by WordPress User ID or by Email address.</p>\n<p>Also, you have to choose the JWT parameter key where email or user ID it is stored in the JWT.</p>\n<p>Also, you can limit the deletion of users to specific IP addresses for security reasons.</p>\n<h3>Reset Password</h3>\n<p>Reset password and change password endpoints are disabled by default.</p>\n<p>This plugin allows you to send the reset password endpoint, just by calling an endpoint. An email with the code will be sent to a specific email address.</p>\n<p>Also, you are able to customize this email, or even not send at email at all.</p>\n<p>The change password endpoint, changes the user password, based on the reset password code.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/delete-user/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Authentication</h3>\n<p>This plugin allows users to generate JWT tokens based from WordPress user email and password.</p>\n<p>In order to Get a new JWT, just make a POST request to <em>/auth</em> route with your WordPress email and password ( or password_hash) and the response will look something like this:</p>\n<pre><code> {\n     \"success\": true,\n     \"data\": {\n         \"jwt\": \"NEW_GENERATED_JWT_HERE\"\n     }\n }\n</code></pre>\n<p>If you want to add extra parameters in the JWT payload, just send the parameter <code>payload</code> on <code>/auth</code> endpoint, and add a json with the values you want to be added in the payload.</p>\n<p>At some point, the JWT will expire.<br />\nSo, if you want to renew it without having to ask again for user and password, you will have to make a POST request to the <em>auth/refresh</em> route.</p>\n<p>This will generate a response with a new JWT, similar to the one that <code>/auth</code> generates.</p>\n<p>If you want to get some details about a JWT, and validate that JWT, you can call <code>/auth/validate</code>. If you have a valid JWT, details about the available WordPress user will be returned, and some JWT details.</p>\n<p>If you want to revoke a JWT, access <code>/auth/revoke</code> and send the <code>jwt</code> as a parameter.</p>\n<p>The plugin auto-generates the example URL you might need to test these scenarios.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/authentication/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Auth codes</h3>\n<p>Auth codes are optional, but you can enable them for Auto-login, Register User and Delete user.</p>\n<p>This feature allows you to add a layer of protection to your API routes.</p>\n<p>The Auth codes contains 3 parts:<br />\n1. Authentication Key: This is the actual code that you have to add in the request.<br />\n2. WordPress new User Role: can be used when you want to create multiple user types with the create user endpoint. If you leave it blank, the value configured in the &#8216;Register Settings&#8217; will be used.<br />\n3. Expiration Date: This allows you to set an expiration date for you auth codes. The format is `Y-M-D H:m:s&#8217;. Example : 2020-12-24 23:00:00. If you leave it blank, it will never expire.</p>\n<p>Expiration date format: year-month-day hours:minutes:seconds</p>\n<p><a href=\"https://simplejwtlogin.com/docs/auth-codes/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Hooks</h3>\n<p>This plugin allows advanced users to link some hooks with the plugin and perform some custom scripts.<br />\nSome available hooks:</p>\n<ul>\n<li>\n<p><strong>simple_jwt_login_login_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user</li>\n<li>description: This hook it is called after the user has been logged in. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_redirect_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: string $url, array $request</li>\n<li>description: This hook it is called before the user it will be redirected to the page he specified in the login section. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_register_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user, string $plain_text_password</li>\n<li>description: This hook it is called after a new user has been created.  </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_delete_user_hook</strong></p>\n<ul>\n<li>type: action</li>\n<li>parameters: Wp_User $user</li>\n<li>description: This hook it is called right after the user has been deleted.</li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_jwt_payload_auth</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: array $payload, array $request</li>\n<li>return: array $payload</li>\n<li>description: This hook is called on /auth endpoint. Here you can modify payload parameters. </li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_no_redirect_message</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: array $payload, array $request</li>\n<li>return: array $payload</li>\n<li>description: This hook is called on /autologin endpoint when the option <code>No Redirect</code> is selected. You can customize the message and add parameters.</li>\n</ul>\n</li>\n<li>\n<p><strong>simple_jwt_login_reset_password_custom_email_template</strong></p>\n<ul>\n<li>type: filter</li>\n<li>parameters: string $template, array $request</li>\n<li>return: string $template</li>\n<li>description: This is executed when POST /user/reset_password is called. It will replace the email template that has been added in Reset Password settings  </li>\n</ul>\n</li>\n</ul>\n<p>View full list of hooks on <a href=\"https://simplejwtlogin.com/docs/hooks\" rel=\"nofollow ugc\">https://simplejwtlogin.com/docs/hooks</a>.</p>\n<h3>CORS</h3>\n<p>The CORS standard it is needed because it allows servers to specify who can access its assets and how the assets can be accessed.<br />\nCross-origin requests are made using the standard HTTP request methods like GET, POST, PUT, DELETE, etc.</p>\n<p><a href=\"https://simplejwtlogin.com/docs/cors/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Protect endpoints</h3>\n<p>This option is disabled by default. In order to enable it, you need to set &#8220;Protect endpoints enabled&#8221; to true.</p>\n<p>This feature comes with 2 actions:<br />\n&#8211; Apply on All REST Endpoints<br />\n&#8211; Apply only on specific REST endpoints</p>\n<p>When you choose <code>Apply on All REST Endpoints</code>, you will be able to whitelist some endpoints from your WordPress REST by adding them to the whitelist section.<br />\nFor example, If you only want to allow users to access the <code>wp/v2/posts</code> endpoint without having to provide the JWT, you save in the whitelist section <code>wp/v2/posts</code></p>\n<p>When you choose <code>Apply only on specific endpoints</code>, you will have to add all the endpoints you want to be protected by JWT.</p>\n<p>When an endpoint is protected, and you don&#8217;t provide a JWT, you will get the following response:</p>\n<p>{<br />\n   &#8220;success&#8221;:false,<br />\n   &#8220;data&#8221;:{<br />\n      &#8220;message&#8221;:&#8221;Your are not authorized to access this endpoint.&#8221;,<br />\n      &#8220;errorCode&#8221;:403,<br />\n      &#8220;type&#8221;:&#8221;simple-jwt-login-route-protect&#8221;<br />\n   }<br />\n}</p>\n<p><a href=\"https://simplejwtlogin.com/docs/protect-endpoints/\" rel=\"nofollow ugc\">Read More</a> on our website.</p>\n<h3>Integration</h3>\n<p><strong>PHP</strong></p>\n<p>In order to easily integrate your app/site with simple-jwt-login, we have developed a composer package.</p>\n<p>composer require nicumicle/simple-jwt-login-client-php</p>\n<p>You can check the <a href=\"https://packagist.org/packages/nicumicle/simple-jwt-login-client-php\" rel=\"nofollow ugc\">package page</a> for more details and code examples.</p>\n<p><strong>Javascript</strong></p>\n<p>Also, there is a <a href=\"https://github.com/simple-jwt-login/js-sdk\" rel=\"nofollow ugc\">Javascript SDK</a> that you can install with <code>npm</code> or <code>yarn</code>.</p>\n<p>npm install &#8220;simple-jwt-login&#8221;</p>\n<p>or</p>\n<p>yarn add &#8220;simple-jwt-login&#8221;</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.6.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-1.png?rev=2703960",
            "caption": "Dashboard"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-2.png?rev=2703960",
            "caption": "General Settings for JWT"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-3.png?rev=2708351",
            "caption": "Auto-login configuration"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-4.png?rev=2703960",
            "caption": "Register new users configuration"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-5.png?rev=2703960",
            "caption": "Delete user configuration"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-6.png?rev=2703960",
            "caption": "Reset Password configuration"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-7.png?rev=2703960",
            "caption": "Authentication configuration for generating and refresh Json Web Tokens"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-8.png?rev=2703960",
            "caption": "Auth Codes"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-9.png?rev=2703960",
            "caption": "Available Hooks"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-10.png?rev=2703960",
            "caption": "CORS"
        },
        {
            "src": "https://ps.w.org/simple-jwt-login/assets/screenshot-11.png?rev=2703960",
            "caption": "Protect endpoints"
        }
    ],
    "tags": {
        "api": "api",
        "auto-login": "auto login",
        "jwt": "jwt",
        "register": "register",
        "tokens": "tokens"
    },
    "stable_tag": "3.5.6",
    "versions": {
        "3.4.6": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.4.6.zip",
        "3.4.7": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.4.7.zip",
        "3.4.8": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.4.8.zip",
        "3.4.9": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.4.9.zip",
        "3.5.0": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.0.zip",
        "3.5.1": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.1.zip",
        "3.5.2": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.2.zip",
        "3.5.3": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.3.zip",
        "3.5.4": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.4.zip",
        "3.5.5": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.5.zip",
        "3.5.6": "https://downloads.wordpress.org/plugin/simple-jwt-login.3.5.6.zip",
        "trunk": "https://downloads.wordpress.org/plugin/simple-jwt-login.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PK9BCD6AYF58Y&source=url",
    "banners": {
        "low": "https://ps.w.org/simple-jwt-login/assets/banner-772x250.png?rev=2106097",
        "high": false
    },
    "icons": {
        "1x": "https://ps.w.org/simple-jwt-login/assets/icon-128x128.png?rev=2106097",
        "2x": "https://ps.w.org/simple-jwt-login/assets/icon-256x256.png?rev=2106097"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}