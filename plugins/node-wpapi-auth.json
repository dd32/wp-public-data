{
    "name": "EASY-JS-WPAPI Client HANDLE for the WordPress REST-API",
    "slug": "node-wpapi-auth",
    "version": "2.0",
    "author": "<a href=\"https://somefunagba.github.io/easyjs-wpapi-rest-client-handle/\">Oluwasegun Somefun</a>",
    "author_profile": "https://profiles.wordpress.org/oluwasegun27/",
    "contributors": {
        "oluwasegun27": {
            "profile": "https://profiles.wordpress.org/oluwasegun27/",
            "avatar": "https://secure.gravatar.com/avatar/d3f82177f80f4d5c44c26b205a9be861?s=96&d=monsterid&r=g",
            "display_name": "Oluwasegun Somefun"
        }
    },
    "requires": "4.8",
    "tested": "4.8.25",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 1,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/node-wpapi-auth/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 2736,
    "last_updated": "2017-09-20 10:28:00",
    "added": "2017-08-22",
    "homepage": "",
    "sections": {
        "installation": "<ol>\n<li>\n<p>Download or Copy the plugin into your WordPress installation&#8217;s plugins directory on your Local development machine</p>\n</li>\n<li>\n<p>Go to Plugins Dashboard. Activate the &#8216;EASY-JS-WPAPI Client HANDLE for the WordPress REST-API&#8217;</p>\n<p>Now, Go to Users menu on the WordPress dashboard. Add new User. Create a dummy Administrator profile,<br />\ncomplete with username, password and full name. e.g: username: &#8216;matt&#8217;, password: &#8216;agba2700&#8217;</p>\n</li>\n<li>\n<p>The Plugin is now activated, under it are the links: Settings | Deactivate | Edit<br />\nNow, Click on this Settings link OR on the WordPress Dashboard, Click on the &#8220;Basic WP-Authentication&#8221;<br />\nsub-menu of the Settings menu.</p>\n</li>\n<li>\n<p>Enter the newly created dummy administrator username and its password. Click on the Save button<br />\nThis username and password will be checked by the plugin to determine if it is a valid user,<br />\nand if it is a valid administrator user.<br />\nIf the details you enter is correct, it displays the green unlock icon.<br />\nBut if it is not, it displays the red lock icon, this tells you that you need to change<br />\nit to a valid admin username and password.<br />\nWhen the helper icon, displays a green unlock icon. You have finished setting up this plugin.</p>\n</li>\n<li>\n<p>Go to your live production or development site. e.g: http://talker-test.org or http://localhost:8080</p>\n</li>\n<li>\n<p>Check your browser console: If your administrator&#8217;s name is Matt, then you should see a console output:<br />\n&#8220;Hi! I am all set to talk with the WP REST-API.\\n Best luck! on your WordPress Projects.&#8221;</p>\n</li>\n</ol>\n<p>N.B:<br />\n&#8211; Mozilla Browser Console: Tools &gt; Web Developer &gt; Web Console<br />\n&#8211; Chrome Browser Console: More Tools &gt; Developer Tools &gt; Console</p>\n<ol>\n<li>Open any .js script in your WordPress theme and start accessing the WP REST-API via the node-wpapi client<br />\n      Example: // In a index.js controlling a index.php or index.html in a WordPress Theme<br />\n      wp.posts().embed().get().then(function( response ) {<br />\n            console.log( response );<br />\n            //do something with returned data/response<br />\n      });</li>\n</ol>\n<ul>\n<li>\n<p>Beginner Theme Developers should remember that all .js scripts in a WordPress Theme<br />\nmust be enqueued in the Theme&#8217;s functions.php</p>\n</li>\n<li>\n<p>See http://wp-api.org/node-wpapi/ for more info.</p>\n</li>\n</ul>\n",
        "faq": "\n<h4>Installation Instructions</h4>\n<p>\n<ol>\n<li>\n<p>Download or Copy the plugin into your WordPress installation&#8217;s plugins directory on your Local development machine</p>\n</li>\n<li>\n<p>Go to Plugins Dashboard. Activate the &#8216;EASY-JS-WPAPI Client HANDLE for the WordPress REST-API&#8217;</p>\n<p>Now, Go to Users menu on the WordPress dashboard. Add new User. Create a dummy Administrator profile,<br />\ncomplete with username, password and full name. e.g: username: &#8216;matt&#8217;, password: &#8216;agba2700&#8217;</p>\n</li>\n<li>\n<p>The Plugin is now activated, under it are the links: Settings | Deactivate | Edit<br />\nNow, Click on this Settings link OR on the WordPress Dashboard, Click on the &#8220;Basic WP-Authentication&#8221;<br />\nsub-menu of the Settings menu.</p>\n</li>\n<li>\n<p>Enter the newly created dummy administrator username and its password. Click on the Save button<br />\nThis username and password will be checked by the plugin to determine if it is a valid user,<br />\nand if it is a valid administrator user.<br />\nIf the details you enter is correct, it displays the green unlock icon.<br />\nBut if it is not, it displays the red lock icon, this tells you that you need to change<br />\nit to a valid admin username and password.<br />\nWhen the helper icon, displays a green unlock icon. You have finished setting up this plugin.</p>\n</li>\n<li>\n<p>Go to your live production or development site. e.g: http://talker-test.org or http://localhost:8080</p>\n</li>\n<li>\n<p>Check your browser console: If your administrator&#8217;s name is Matt, then you should see a console output:<br />\n&#8220;Hi! I am all set to talk with the WP REST-API.\\n Best luck! on your WordPress Projects.&#8221;</p>\n</li>\n</ol>\n<p>N.B:<br />\n&#8211; Mozilla Browser Console: Tools &gt; Web Developer &gt; Web Console<br />\n&#8211; Chrome Browser Console: More Tools &gt; Developer Tools &gt; Console</p>\n<ol>\n<li>Open any .js script in your WordPress theme and start accessing the WP REST-API via the node-wpapi client<br />\n      Example: // In a index.js controlling a index.php or index.html in a WordPress Theme<br />\n      wp.posts().embed().get().then(function( response ) {<br />\n            console.log( response );<br />\n            //do something with returned data/response<br />\n      });</li>\n</ol>\n<ul>\n<li>\n<p>Beginner Theme Developers should remember that all .js scripts in a WordPress Theme<br />\nmust be enqueued in the Theme&#8217;s functions.php</p>\n</li>\n<li>\n<p>See http://wp-api.org/node-wpapi/ for more info.</p>\n</li>\n</ul>\n</p>\n<h4>What is the WP REST-API?</h4>\n<p>\n<ul>\n<li>Check : https://developer.wordpress.org/rest-api/</li>\n</ul>\n</p>\n<h4>Why should I use node-wpapi.js client?</h4>\n<p>\n<ul>\n<li>It is simple to use and understand.</li>\n<li>Check : http://wp-api.org/node-wpapi/</li>\n</ul>\n</p>\n\n",
        "changelog": "<h4>2.0</h4>\n<p>Second Release:</p>\n<ul>\n<li>Modified Authentication handlers for user cases to ensure seamless display of website data on a web-page.</li>\n</ul>\n<h4>1.0</h4>\n<p>First Release :</p>\n<ul>\n<li>\n<p>Installs the node-wpapi.js CLIENT.</p>\n</li>\n<li>\n<p>Serves as a Cookie and Basic Authentication handler for the WP REST-API.</p>\n</li>\n<li>\n<p>Access the WP REST-API in any javascript file using the WPAPI&#8217;s &#8216;wp&#8217; global object directly.</p>\n</li>\n</ul>\n",
        "description": "<h3>Short Description</h3>\n<ul>\n<li>Easily talk with the WordPress REST-API to access and display your WordPress (model) data without<br />\nrest-authentication errors when creating Javascript Themes for consistent views by all users/clients accessing<br />\nyour WordPress site.</li>\n</ul>\n<h3>Description and Features</h3>\n<ul>\n<li>\n<p>We chose the bundled node-wpapi isomorphic Javascript client, because it is the simplest way to get up and running<br />\nquickly to display live website data in your installed WordPress website, using a Javascript-controlled Theme or Plugin</p>\n</li>\n<li>\n<p>The WEB Landscape is changing. Today, we can use Javascript to build WordPress Themes. WordPress becomes our Model,<br />\nwhich we can theme with Javascript using the WordPress REST-API.</p>\n</li>\n<li>\n<p>This plugin was developed to make life easy for web developers who which to create full-fledged<br />\nJavascript WordPress Themes OR  Javascript-PHP WordPress Themes using a Javascript Framework/Library like:<br />\njQuery, React, OpenUI5, et.c. for use in a WordPress installation with the wpapi.js rest-client.</p>\n</li>\n<li>\n<p>It relies on the node-wpapi isomorphic javascript client to access the WP REST-API. The problem with accessing<br />\nthe REST-API using javascript-clients is the headache of authentication issues and private data access, which can<br />\nhamper fluid display of the web-page, leading to rest-errors when using Javascript to display the data.<br />\nThis plugin works under the hood and makes the javascript-client object, &#8216;wp&#8217; that interfaces with the WP REST-API<br />\nglobally accessible for direct and easy use in a javascript(.js) file under the scope of a WordPress installation.</p>\n</li>\n<li>\n<p>It handles three authentication use cases: admin user, non-admin user and for a client from inside a WP installation.<br />\nSay your WordPress website url is e.g: http://talker-test.com or http://localhost:8080<br />\nWordPress switches to Cookie WP Authentication for  switched to when an administrator is currently logged in to<br />\nthe WordPress installation. Basic WP-Authentication is switched to when a Client accesses your WordPress website<br />\nWhen an authenticated non-admin user, like an Author or Subscriber is currently logged in to your website,<br />\nit displays data using Basic WP-Authentication.</p>\n</li>\n<li>\n<p>We then make the WPAPI global as a globally scoped javascript object, wp,<br />\nfor use in a WordPress Installation to talk with the WP REST-API on the go.</p>\n</li>\n<li>\n<p>So, with added ease, you can start building your next Javascript Themes for WordPress, or accessing the WP REST-API<br />\nSo start coding  and talking with the WordPress REST-API and display consistent, unhindered data,<br />\nas you permit to all your clients, and users.</p>\n</li>\n<li>\n<p>See Demo WP Installation that shows how this plugin is used to display live website data from the WordPress REST-API<br />\nIn it we created a sample JS-controlled WordPress theme using jQuery and the &#8216;wp&#8217; object provided by our bundled<br />\njavascript client, which our plugin has made globally scoped and authenticated.</p>\n</li>\n<li>\n<p>For more info. and examples, you can check out the documentation<br />\nof the node-wpapi javascript client at wp-api.org/node-wpapi</p>\n</li>\n</ul>\n<h3>Testing</h3>\n<ul>\n<li>Go to https://somefunagba.github.io/easyjs-wpapi-rest-client-handle/</li>\n<li>Click on the Demo link: Download a sample zipped Javascript Theme and a .xml import file.</li>\n<li>Copy the theme to your Local WordPress Themes directory and Activate it.</li>\n<li>If your WP installation has no posts or a single post. Import the downloaded .xml posts</li>\n<li>Go to your site-url homepage e.g: http://localhost:8080/</li>\n<li>You should see a demo Blog/News themed website.[Demo Website Image]</li>\n<li>Inside the Theme folder, You can play with this theme&#8217;s index.js and footer.js files.</li>\n</ul>\n"
    },
    "short_description": "Short Description",
    "description": "<h3>Short Description</h3>\n<ul>\n<li>Easily talk with the WordPress REST-API to access and display your WordPress (model) data without<br />\nrest-authentication errors when creating Javascript Themes for consistent views by all users/clients accessing<br />\nyour WordPress site.</li>\n</ul>\n<h3>Description and Features</h3>\n<ul>\n<li>\n<p>We chose the bundled node-wpapi isomorphic Javascript client, because it is the simplest way to get up and running<br />\nquickly to display live website data in your installed WordPress website, using a Javascript-controlled Theme or Plugin</p>\n</li>\n<li>\n<p>The WEB Landscape is changing. Today, we can use Javascript to build WordPress Themes. WordPress becomes our Model,<br />\nwhich we can theme with Javascript using the WordPress REST-API.</p>\n</li>\n<li>\n<p>This plugin was developed to make life easy for web developers who which to create full-fledged<br />\nJavascript WordPress Themes OR  Javascript-PHP WordPress Themes using a Javascript Framework/Library like:<br />\njQuery, React, OpenUI5, et.c. for use in a WordPress installation with the wpapi.js rest-client.</p>\n</li>\n<li>\n<p>It relies on the node-wpapi isomorphic javascript client to access the WP REST-API. The problem with accessing<br />\nthe REST-API using javascript-clients is the headache of authentication issues and private data access, which can<br />\nhamper fluid display of the web-page, leading to rest-errors when using Javascript to display the data.<br />\nThis plugin works under the hood and makes the javascript-client object, &#8216;wp&#8217; that interfaces with the WP REST-API<br />\nglobally accessible for direct and easy use in a javascript(.js) file under the scope of a WordPress installation.</p>\n</li>\n<li>\n<p>It handles three authentication use cases: admin user, non-admin user and for a client from inside a WP installation.<br />\nSay your WordPress website url is e.g: http://talker-test.com or http://localhost:8080<br />\nWordPress switches to Cookie WP Authentication for  switched to when an administrator is currently logged in to<br />\nthe WordPress installation. Basic WP-Authentication is switched to when a Client accesses your WordPress website<br />\nWhen an authenticated non-admin user, like an Author or Subscriber is currently logged in to your website,<br />\nit displays data using Basic WP-Authentication.</p>\n</li>\n<li>\n<p>We then make the WPAPI global as a globally scoped javascript object, wp,<br />\nfor use in a WordPress Installation to talk with the WP REST-API on the go.</p>\n</li>\n<li>\n<p>So, with added ease, you can start building your next Javascript Themes for WordPress, or accessing the WP REST-API<br />\nSo start coding  and talking with the WordPress REST-API and display consistent, unhindered data,<br />\nas you permit to all your clients, and users.</p>\n</li>\n<li>\n<p>See Demo WP Installation that shows how this plugin is used to display live website data from the WordPress REST-API<br />\nIn it we created a sample JS-controlled WordPress theme using jQuery and the &#8216;wp&#8217; object provided by our bundled<br />\njavascript client, which our plugin has made globally scoped and authenticated.</p>\n</li>\n<li>\n<p>For more info. and examples, you can check out the documentation<br />\nof the node-wpapi javascript client at wp-api.org/node-wpapi</p>\n</li>\n</ul>\n<h3>Testing</h3>\n<ul>\n<li>Go to https://somefunagba.github.io/easyjs-wpapi-rest-client-handle/</li>\n<li>Click on the Demo link: Download a sample zipped Javascript Theme and a .xml import file.</li>\n<li>Copy the theme to your Local WordPress Themes directory and Activate it.</li>\n<li>If your WP installation has no posts or a single post. Import the downloaded .xml posts</li>\n<li>Go to your site-url homepage e.g: http://localhost:8080/</li>\n<li>You should see a demo Blog/News themed website.[Demo Website Image]</li>\n<li>Inside the Theme folder, You can play with this theme&#8217;s index.js and footer.js files.</li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/node-wpapi-auth.2.0.zip",
    "upgrade_notice": {
        "2.0": "<p>This is the 2.0 version of this plugin.</p>",
        "1.0": "<p>This is the first version of this plugin.</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-1.png?rev=1732826",
            "caption": "STEP4_01: Basic WP-Authentication Settings: No Input"
        },
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-2.png?rev=1732826",
            "caption": "STEP4_02: Basic WP-Authentication Settings: Incorrect User or Incorrect Admin User Details"
        },
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-3.png?rev=1732826",
            "caption": "STEP4_03: Basic WP-Authentication Settings: Correct Dummy Admin User Details"
        },
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-4.png?rev=1732826",
            "caption": "STEP6_01: Console display when an admin is logged in and views the website"
        },
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-5.png?rev=1732826",
            "caption": "STEP6_02: Console display when other users are logged in and view the website"
        },
        {
            "src": "https://ps.w.org/node-wpapi-auth/assets/screenshot-6.png?rev=1732826",
            "caption": "STEP6_03: Console display when a client views the website"
        }
    ],
    "tags": {
        "basic-authentication": "basic authentication",
        "cookie-authentication": "cookie authentication",
        "javascript-client": "javascript client",
        "node-wpapi": "node-wpapi",
        "wpapi": "wpapi"
    },
    "stable_tag": "2.0",
    "versions": {
        "1.0": "https://downloads.wordpress.org/plugin/node-wpapi-auth.1.0.zip",
        "2.0": "https://downloads.wordpress.org/plugin/node-wpapi-auth.2.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/node-wpapi-auth.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/node-wpapi-auth/assets/banner-772x250.png?rev=1732826",
        "high": "https://ps.w.org/node-wpapi-auth/assets/banner-1544x500.png?rev=1732826"
    },
    "icons": {
        "1x": "https://ps.w.org/node-wpapi-auth/assets/icon-128x128.png?rev=1732846",
        "2x": "https://ps.w.org/node-wpapi-auth/assets/icon-256x256.png?rev=1732846"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}