{
    "name": "Debug Toolkit",
    "slug": "debug-toolkit",
    "version": "1.0.1",
    "author": "<a href=\"https://KnowTheCode.io\">hellofromTonya</a>",
    "author_profile": "https://profiles.wordpress.org/hellofromtonya/",
    "contributors": {
        "hellofromtonya": {
            "profile": "https://profiles.wordpress.org/hellofromtonya/",
            "avatar": "https://secure.gravatar.com/avatar/8a37821f6ce67e02ce73e3774e218ec2?s=96&d=monsterid&r=g",
            "display_name": "Tonya Mork"
        }
    },
    "requires": "4.9",
    "tested": "5.1.19",
    "requires_php": "5.6",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 13,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 13,
    "support_url": "https://wordpress.org/support/plugin/debug-toolkit/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 80,
    "downloaded": 7790,
    "last_updated": "2019-03-11 3:34pm GMT",
    "added": "2019-03-09",
    "homepage": "https://wordpress.org/plugins/debug-toolkit",
    "sections": {
        "description": "<p>Debug Toolkit makes debugging your code easier and more enjoyable.  It provides you with interactive and helpful tools:</p>\n<ul>\n<li>Better PHP error interface from (<a href=\"http://filp.github.io/whoops/\" rel=\"nofollow ugc\">Whoops</a>)</li>\n<li>Better variable inspection &#8211; no need to use <code>var_dump</code>, <code>print_r</code>, or X-debug</li>\n<li>An interactive way to back trace the program&#8217;s execution order</li>\n</ul>\n<h3>Better PHP Error Interface from Whoops</h3>\n<p>The built-in PHP error container is basic and not as helpful as it could be.  On top of that, it&#8217;s rather ugly. Wouldn&#8217;t you agree?</p>\n<p>Whoops gives you a cool interface that is helpful, interactive, and quite nice to look at.  Some features:</p>\n<ul>\n<li>Provides the error message and links to search Google, DuckDuckGo, and Stack Overflow.</li>\n<li>Shows the actual code where the error occurred.</li>\n<li>Provides an interactive call stack.  Click each and the actual code appears in the viewer panel.</li>\n<li>Environment and details including GET Data, POST Data, Files, Cookie, Session, Server/Request Data, Environment Variables, and Registered Handlers.</li>\n</ul>\n<p>See the tools in action in this video</p>\n<p><div class=\"embed-vimeo\" style=\"text-align: center;\"><iframe loading=\"lazy\" src=\"https://player.vimeo.com/video/322351688\" width=\"750\" height=\"422\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>\n</p>\n<h3>Better Variable Inspection</h3>\n<p>Though X-debug is powerful, it can be difficult to set up and run.  For that reason, it&#8217;s common to dump or print out the variable to browser.  But the built-in display for the PHP <code>var_dump</code> and <code>print_r</code> is basic.</p>\n<p>This plugin includes both two very popular variable dumper tools:</p>\n<ul>\n<li><a href=\"https://symfony.com/doc/current/components/var_dumper.html\" rel=\"nofollow ugc\">VarDumper from Symfony</a></li>\n<li><a href=\"https://kint-php.github.io/kint/\" rel=\"nofollow ugc\">Kint &#8211; a modern and powerful PHP debugging helper</a></li>\n</ul>\n<p>VarDumper provides a simple container that displays where you place it.</p>\n<p>On the other hand, Kint provides a more powerful interface that gives you more information such as printing out the expression that was passed into it, the data type, memory size, and the value.</p>\n<p>To make it even easier, the following utility functions are available for you to use in your code:</p>\n<h4>Available Functions for Inspecting Variable Values</h4>\n<p>Let&#8217;s explore the functions that are available for you through this plugin.  We&#8217;ll use the variable inspectors to dump <code>global $post</code>.</p>\n<p>Note: You can pass in any variable or function that returns a value.</p>\n<p>Dumps the given variable(s):</p>\n<pre><code>global $post;\n\n// VarDumper\nvdump( $post );\n\n// Kint\ndump( $post );\n</code></pre>\n<p>Dumps the given variable(s) and then exits the program&#8217;s execution:</p>\n<pre><code>global $post;\n\n// VarDumper\nvdump_and_die( $post );\n\n// Kint\ndump_and_die( $post );\n</code></pre>\n<p>In addition, there are alias (shorthand) functions available for you if you prefer shorter function names:</p>\n<ul>\n<li><code>vd()</code> is an alias for <code>vdump()</code></li>\n<li><code>vdd()</code> and <code>vdd()</code> are aliases for <code>vdump_and_die()</code></li>\n<li><code>d()</code> is an alias for <code>dump()</code></li>\n<li><code>dd()</code> and <code>ddd()</code> are aliases for <code>dump_and_die()</code></li>\n</ul>\n<h3>Tracing Call Stack</h3>\n<p>When debugging, there are times when you need to see the order in which functions were called that lead to a certain point in the program.  PHP offers a backtrace that traces back the execution order from the point when the function is invoked.</p>\n<p>To make backtracing easier, this plugin provides you with a <code>trace()</code> function and combines it with the variable inspect functions.</p>\n<p>For example, if you wanted to trace the call stack to the start of the loop in your theme&#8217;s <code>functions.php</code> file, you could use this code:</p>\n<pre><code>add_action( 'loop_start', function() {\n    trace();\n} );\n</code></pre>\n<h4>Available Trace Functions</h4>\n<p>Place these functions at the point where you want to trace the call stack.</p>\n<ul>\n<li><code>trace();</code></li>\n<li><code>trace_vdump();</code> &#8211; Combines <code>trace()</code> and <code>vdump()</code></li>\n<li><code>trace_dump();</code> &#8211; Combines <code>trace()</code> and <code>dump()</code></li>\n<li><code>trace_vdump_and_die();</code> &#8211; Combines <code>trace()</code> and <code>vdump_and_die()</code></li>\n<li><code>trace_dump_and_die();</code> &#8211; Combines <code>trace()</code> and <code>dump_and_die()</code></li>\n</ul>\n<p>In addition, there are alias (shorthand) functions available for you if you prefer shorter function names:</p>\n<ul>\n<li><code>tracevd();</code> &#8211; Combines <code>trace()</code> and <code>vd()</code></li>\n<li><code>traced();</code> &#8211; Combines <code>trace()</code> and <code>d()</code></li>\n<li><code>tracevdd();</code> &#8211; Combines <code>trace()</code> and <code>vdd()</code></li>\n<li><code>tracedd();</code> &#8211; Combines <code>trace()</code> and <code>dd()</code></li>\n<li><code>tracevddd();</code> &#8211; Combines <code>trace()</code> and <code>vddd()</code></li>\n<li><code>traceddd();</code> &#8211; Combines <code>trace()</code> and <code>ddd()</code></li>\n</ul>\n<h3>Admin Bar</h3>\n<p>&#8220;DEBUG ACTIVE&#8221; indicator displays in the WordPress admin bar to alert you when the plugin is active.</p>\n",
        "installation": "<h4>From your WordPress dashboard</h4>\n<ol>\n<li>Visit &#8216;Plugins &gt; Add New&#8217;</li>\n<li>Search for &#8216;Debug Toolkit&#8217;</li>\n<li>Activate Debug Toolkit from your Plugins page.</li>\n</ol>\n",
        "faq": "\n<h4>How do I use this utility?</h4>\n<p>\n<p>When you are testing or debugging your code, you can use any of the functions above in place of var_dump( $var ) and print_r( $var ).  No need to wrap it in pre&#8217;s either.</p>\n</p>\n<h4>What version of PHP do I need?</h4>\n<p>\n<p>PHP 5.6, 7.0, 7.1, 7.2, and up.</p>\n</p>\n<h4>Can I run this on a live site?</h4>\n<p>\n<p>I wouldn&#8217;t unless you are testing.  This tool is for debug only.  Once you push the site live, deactivate and delete this plugin.</p>\n</p>\n<h4>What should I do when the site goes live?</h4>\n<p>\n<p>Deactivate and delete this plugin.</p>\n</p>\n\n",
        "changelog": "<h4>Version 1.0.1</h4>\n<ul>\n<li>Removed changing the admin color palette.</li>\n<li>Removed changing the admin bar background color.</li>\n</ul>\n<h4>Version 1.0.0</h4>\n<ul>\n<li>First release</li>\n</ul>\n"
    },
    "short_description": "Code debug made easier and more enjoyable.",
    "description": "<p>Debug Toolkit makes debugging your code easier and more enjoyable.  It provides you with interactive and helpful tools:</p>\n<ul>\n<li>Better PHP error interface from (<a href=\"http://filp.github.io/whoops/\" rel=\"nofollow ugc\">Whoops</a>)</li>\n<li>Better variable inspection &#8211; no need to use <code>var_dump</code>, <code>print_r</code>, or X-debug</li>\n<li>An interactive way to back trace the program&#8217;s execution order</li>\n</ul>\n<h3>Better PHP Error Interface from Whoops</h3>\n<p>The built-in PHP error container is basic and not as helpful as it could be.  On top of that, it&#8217;s rather ugly. Wouldn&#8217;t you agree?</p>\n<p>Whoops gives you a cool interface that is helpful, interactive, and quite nice to look at.  Some features:</p>\n<ul>\n<li>Provides the error message and links to search Google, DuckDuckGo, and Stack Overflow.</li>\n<li>Shows the actual code where the error occurred.</li>\n<li>Provides an interactive call stack.  Click each and the actual code appears in the viewer panel.</li>\n<li>Environment and details including GET Data, POST Data, Files, Cookie, Session, Server/Request Data, Environment Variables, and Registered Handlers.</li>\n</ul>\n<p>See the tools in action in this video</p>\n<p><div class=\"embed-vimeo\" style=\"text-align: center;\"><iframe loading=\"lazy\" src=\"https://player.vimeo.com/video/322351688\" width=\"750\" height=\"422\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>\n</p>\n<h3>Better Variable Inspection</h3>\n<p>Though X-debug is powerful, it can be difficult to set up and run.  For that reason, it&#8217;s common to dump or print out the variable to browser.  But the built-in display for the PHP <code>var_dump</code> and <code>print_r</code> is basic.</p>\n<p>This plugin includes both two very popular variable dumper tools:</p>\n<ul>\n<li><a href=\"https://symfony.com/doc/current/components/var_dumper.html\" rel=\"nofollow ugc\">VarDumper from Symfony</a></li>\n<li><a href=\"https://kint-php.github.io/kint/\" rel=\"nofollow ugc\">Kint &#8211; a modern and powerful PHP debugging helper</a></li>\n</ul>\n<p>VarDumper provides a simple container that displays where you place it.</p>\n<p>On the other hand, Kint provides a more powerful interface that gives you more information such as printing out the expression that was passed into it, the data type, memory size, and the value.</p>\n<p>To make it even easier, the following utility functions are available for you to use in your code:</p>\n<h4>Available Functions for Inspecting Variable Values</h4>\n<p>Let&#8217;s explore the functions that are available for you through this plugin.  We&#8217;ll use the variable inspectors to dump <code>global $post</code>.</p>\n<p>Note: You can pass in any variable or function that returns a value.</p>\n<p>Dumps the given variable(s):</p>\n<pre><code>global $post;\n\n// VarDumper\nvdump( $post );\n\n// Kint\ndump( $post );\n</code></pre>\n<p>Dumps the given variable(s) and then exits the program&#8217;s execution:</p>\n<pre><code>global $post;\n\n// VarDumper\nvdump_and_die( $post );\n\n// Kint\ndump_and_die( $post );\n</code></pre>\n<p>In addition, there are alias (shorthand) functions available for you if you prefer shorter function names:</p>\n<ul>\n<li><code>vd()</code> is an alias for <code>vdump()</code></li>\n<li><code>vdd()</code> and <code>vdd()</code> are aliases for <code>vdump_and_die()</code></li>\n<li><code>d()</code> is an alias for <code>dump()</code></li>\n<li><code>dd()</code> and <code>ddd()</code> are aliases for <code>dump_and_die()</code></li>\n</ul>\n<h3>Tracing Call Stack</h3>\n<p>When debugging, there are times when you need to see the order in which functions were called that lead to a certain point in the program.  PHP offers a backtrace that traces back the execution order from the point when the function is invoked.</p>\n<p>To make backtracing easier, this plugin provides you with a <code>trace()</code> function and combines it with the variable inspect functions.</p>\n<p>For example, if you wanted to trace the call stack to the start of the loop in your theme&#8217;s <code>functions.php</code> file, you could use this code:</p>\n<pre><code>add_action( 'loop_start', function() {\n    trace();\n} );\n</code></pre>\n<h4>Available Trace Functions</h4>\n<p>Place these functions at the point where you want to trace the call stack.</p>\n<ul>\n<li><code>trace();</code></li>\n<li><code>trace_vdump();</code> &#8211; Combines <code>trace()</code> and <code>vdump()</code></li>\n<li><code>trace_dump();</code> &#8211; Combines <code>trace()</code> and <code>dump()</code></li>\n<li><code>trace_vdump_and_die();</code> &#8211; Combines <code>trace()</code> and <code>vdump_and_die()</code></li>\n<li><code>trace_dump_and_die();</code> &#8211; Combines <code>trace()</code> and <code>dump_and_die()</code></li>\n</ul>\n<p>In addition, there are alias (shorthand) functions available for you if you prefer shorter function names:</p>\n<ul>\n<li><code>tracevd();</code> &#8211; Combines <code>trace()</code> and <code>vd()</code></li>\n<li><code>traced();</code> &#8211; Combines <code>trace()</code> and <code>d()</code></li>\n<li><code>tracevdd();</code> &#8211; Combines <code>trace()</code> and <code>vdd()</code></li>\n<li><code>tracedd();</code> &#8211; Combines <code>trace()</code> and <code>dd()</code></li>\n<li><code>tracevddd();</code> &#8211; Combines <code>trace()</code> and <code>vddd()</code></li>\n<li><code>traceddd();</code> &#8211; Combines <code>trace()</code> and <code>ddd()</code></li>\n</ul>\n<h3>Admin Bar</h3>\n<p>&#8220;DEBUG ACTIVE&#8221; indicator displays in the WordPress admin bar to alert you when the plugin is active.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/debug-toolkit.1.0.1.zip",
    "upgrade_notice": {
        "Version 1.0.0": "<p>First release</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/debug-toolkit/trunk/screenshot-1.png?rev=2048407",
            "caption": "The better PHP error interface from Whoops."
        },
        {
            "src": "https://ps.w.org/debug-toolkit/trunk/screenshot-2.png?rev=2048407",
            "caption": "The results of running <code>vdump()</code> and <code>vdump_and_die()</code>."
        },
        {
            "src": "https://ps.w.org/debug-toolkit/trunk/screenshot-3.png?rev=2048407",
            "caption": "The results of running <code>dump()</code> and <code>dump_and_die()</code>."
        },
        {
            "src": "https://ps.w.org/debug-toolkit/trunk/screenshot-4.png?rev=2048407",
            "caption": "The results of running <code>trace()</code>."
        }
    ],
    "tags": {
        "backtrace": "backtrace",
        "debug": "debug",
        "debugger": "debugger",
        "print_r": "print_r",
        "var_dump": "var_dump"
    },
    "stable_tag": "1.0.1",
    "versions": {
        "1.0.1": "https://downloads.wordpress.org/plugin/debug-toolkit.1.0.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/debug-toolkit.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://KnowTheCode.io",
    "banners": {
        "low": "https://ps.w.org/debug-toolkit/assets/banner-772x250.png?rev=2047222",
        "high": "https://ps.w.org/debug-toolkit/assets/banner-1544x500.png?rev=2047222"
    },
    "icons": {
        "1x": "https://ps.w.org/debug-toolkit/assets/icon-128x128.png?rev=2047222",
        "2x": "https://ps.w.org/debug-toolkit/assets/icon-256x256.png?rev=2047222"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}