{
    "name": "WP Cassify",
    "slug": "wp-cassify",
    "version": "2.3.5",
    "author": "<a href=\"https://wpcassify.wordpress.com/about-me/\">Alain-Aymerick FRANCOIS</a>",
    "author_profile": "https://profiles.wordpress.org/aaf017/",
    "contributors": {
        "aaf017": {
            "profile": "https://profiles.wordpress.org/aaf017/",
            "avatar": "https://secure.gravatar.com/avatar/b50ecf5ec6fd3e4d6c5d1d4e075f37f6?s=96&d=monsterid&r=g",
            "display_name": "Alain-Aymerick FRANCOIS"
        },
        "vbonamy": {
            "profile": "https://profiles.wordpress.org/vbonamy/",
            "avatar": "https://secure.gravatar.com/avatar/1b535c0f998fb797b94b3bc4242c2aa4?s=96&d=monsterid&r=g",
            "display_name": "vbonamy"
        }
    },
    "requires": "4.4",
    "tested": "6.6.1",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 15,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 15,
    "support_url": "https://wordpress.org/support/plugin/wp-cassify/",
    "support_threads": 2,
    "support_threads_resolved": 1,
    "active_installs": 800,
    "downloaded": 24683,
    "last_updated": "2024-08-19 12:35pm GMT",
    "added": "2016-02-05",
    "homepage": "https://wpcassify.wordpress.com/",
    "sections": {
        "description": "<p>If you&#8217;re happy with this plugin :<br />\nAs a reward for my efforts, I would like to receive T-shirts (or other goodies) as gifts from the universities or companies that use it.<br />\nMy size is L. Best regards.</p>\n<p>This Apereo CAS authentication plugin has no phpCas library dependency. This is not only an authentication plugin.<br />\nYou can build custom authorization rules according to cas user attributes populated. If user don&#8217;t exist in WordPress<br />\ndatabase, it can be created automatically. There are many features. You can customize everything.</p>\n<h4>Website</h4>\n<p>https://wpcassify.wordpress.com/</p>\n<h4>Development and release environment</h4>\n<p>This plugin is now developed and tested from a github repository. You can find it here :<br />\nhttps://github.com/WP-Cassify/wp-cassify-develop</p>\n<p>Don&#8217;t hesitate to contribute to this project. You can fork it and make pull requests !</p>\n<h4>Requirements</h4>\n<ul>\n<li>Require at least PHP version 7.0</li>\n<li>Require at least PHP CURL package</li>\n</ul>\n<h4>Features included</h4>\n<ul>\n<li>SLO (Single Log Out) support (thanks to dedotombo and me)</li>\n<li>Adding NCONTAINS operator (thanks to blandman)</li>\n<li>Fix bug on Gateway mode (autologin) (thanks to dedotombo again). Now it&#8217;s now necessary to hack theme files to fire it.</li>\n<li>Adding option logout on authentication failure to not disturb users</li>\n<li>Initialize PHP session at a later stage (on wp_loaded not on init)</li>\n<li>\n<p>Adding some customs hooks and filters.</p>\n</li>\n<li>\n<p>Tested with CAS Server version 4.1.4</p>\n</li>\n<li>Compatible with CAS Protocol version 2 and 3</li>\n<li>Automatic user creation if not exist in WordPress database.</li>\n<li>Synchronize WordPress User metas with CAS User attributes.</li>\n<li>Add support for multivaluate cas user fields. Now multivaluate fields can be serialized to be stored in custom WP User meta.</li>\n<li>Backup / Restore plugin configuration options settings</li>\n<li>You can choose CAS User attributes you want to populate. Then you can access them via PHP Session.</li>\n<li>\n<p>Be careful, to access to CAS User Attributes from your theme file (from 1.8.4), use code below :</p>\n<pre><code>&lt;?php\n    if ( isset($GLOBALS['wp-cassify']) ) {\n        print_r( $GLOBALS['wp-cassify']-&gt;wp_cassify_get_cas_user_datas() );\n    }\n?&gt;\n</code></pre>\n</li>\n<li>\n<p>Set up WordPress Roles to User according to CAS User attributes.</p>\n</li>\n<li>If plugin is network activated, you can define User Role Rule scope by blog id.</li>\n<li>Authorization rule editor.</li>\n<li>Compatible with WordPress Access Control Plugin.</li>\n<li>Manage URL White List to bypass CAS Authentication on certain pages.</li>\n<li>\n<p>Much simpler bypass authentication with post method provided by Susan Boland (See online documentation). Create wordpress authentication form with redirect attribute like this :</p>\n<pre><code>&lt;?php\n\n    $args = array(\n        'echo'           =&gt; true,\n        'remember'       =&gt; true,\n        'redirect' =&gt; site_url( '/?wp_cassify_bypass=bypass' ),\n        'form_id'        =&gt; 'loginform',\n        'id_username'    =&gt; 'user_login',\n        'id_password'    =&gt; 'user_pass',\n        'id_remember'    =&gt; 'rememberme',\n        'id_submit'      =&gt; 'wp-submit',\n        'label_username' =&gt; __( 'Username' ),\n        'label_password' =&gt; __( 'Password' ),\n        'label_remember' =&gt; __( 'Remember Me' ),\n        'label_log_in'   =&gt; __( 'Log In' ),\n        'value_username' =&gt; '',\n        'value_remember' =&gt; false\n    );\n\n    wp_login_form( $args ); \n?&gt;\n</code></pre>\n</li>\n<li>\n<p>Receive email notifications when trigger is fired (after user account creation, after user login/logout).</p>\n</li>\n<li>Define notifications rules based on user attributes values.</li>\n<li>Purge user roles before applying user role rules.</li>\n<li>Define user account expiration rules bases on CAS User attributes.</li>\n<li>Network activation allowed</li>\n<li>You can set Service Logout URL (Needs to have CAS Server with followServiceRedirects option configured).</li>\n<li>Add support for web application hosted behind a reverse proxy. (Thanks to franck86)</li>\n<li>Add custom hooks : wp_cassify_after_cas_authentication, wp_cassify_before_auth_user_wordpress, wp_cassify_before_redirect, wp_cassify_after_redirect. (See online documentation)</li>\n<li>Custom filter to perform custom cas server response parsing. Hook name : wp_cassify_custom_parsing_cas_xml_response (See online documentation)</li>\n<li>Custom shortcode to generate CAS login/logout link into your blog. (See online documentation)</li>\n<li>Debug settings, dump last xml cas server response.</li>\n<li>Detect if user has already authenticated by CAS from your public pages and perform auto-login with gateway mode</li>\n<li>\n<p>Add &#8216;-IN&#8217; and &#8216;-NOTIN&#8217; operators to process array attributes values returned from CAS.<br />\nWhen you have :</p>\n<pre><code>$cas_user_datas['title'] = array( 'Student', 'Professor' );\n</code></pre>\n</li>\n</ul>\n<p>Then you can use :</p>\n<pre><code>    (CAS{title} -IN \"professor\")\n</code></pre>\n",
        "installation": "<p>This section describes how to install the plugin and get it working.</p>\n<p>e.g.</p>\n<ol>\n<li>Upload the plugin files to the <code>/wp-content/plugins/wp-cassify</code> directory, or install the plugin through the WordPress plugins screen directly.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; screen in WordPress</li>\n<li>Use the Settings-&gt;WP Cassify screen to configure the plugin</li>\n</ol>\n",
        "faq": "<ul>\n<li>\n<p>Where can i find plugin documentation ?<br />\nYou can find documentation here (See Plugin options and Screencasts) : https://wpcassify.wordpress.com/</p>\n</li>\n<li>\n<p>How to perform CAS Authentication on a front Office page ?<br />\nInstall WordPress Access Control Plugin. And mark page as &#8220;Only accessible by members&#8221;. You can use anoter ACL plugin. If page require an authentication, CAS Authentication is fired.</p>\n</li>\n<li>\n<p>How to protect all website ?<br />\nInstall WordPress Access Control Plugin. In Settings &gt;&gt; Members Only, Check &#8220;Make Blog Members Only&#8221; option.</p>\n</li>\n</ul>\n",
        "changelog": "<h4>2.3.5</h4>\n<ul>\n<li>Fix PHP start session only when needed (fix) &#8211; thanks to @kkatpcc</li>\n<li>Fix grammar in die message of wp_cassify_auth_user_wordpress &#8211; thanks to Randy Hammond</li>\n</ul>\n<h4>2.3.4</h4>\n<ul>\n<li>Fix wp_cassify_notification_rule_matched</li>\n</ul>\n<h4>2.3.3</h4>\n<ul>\n<li>Fix PHP start session only when needed &#8211; thanks to @partyka</li>\n<li>Fix PHP warning parse_str &#8211; thanks to @erseco</li>\n<li>Fix PHP warnings</li>\n<li>Ensure to run jquery when DOM is ready</li>\n<li>Fix CAS Single Log Out feature</li>\n</ul>\n<h4>2.3.2</h4>\n<ul>\n<li>Fix PHP8 support</li>\n</ul>\n<h4>2.3.1</h4>\n<ul>\n<li>New custom hook wp_cassify_after_auth_user_wordpress</li>\n</ul>\n<h4>2.3.0</h4>\n<ul>\n<li>Some bugfix</li>\n</ul>\n<h4>2.2.9</h4>\n<ul>\n<li>Add PHP8 support (experimental). Reordering optionnal parameters to delete PHP8 deprecated warnings. Replace deprecated method wp_get_sites() by get_sites().</li>\n</ul>\n<h4>2.2.8</h4>\n<ul>\n<li>Add new parameter to custom filter wp_cassify_grab_service_ticket_roles_to_push. Now you can use $cas_user_datas inside filter.</li>\n</ul>\n<h4>2.2.7</h4>\n<ul>\n<li>Bug fix on multivalued fields with IN operator</li>\n</ul>\n<h4>2.2.6</h4>\n<ul>\n<li>Bug fix on handle multivalued fields</li>\n</ul>\n<h4>2.2.5</h4>\n<ul>\n<li>Handle multivalued fields (thanks to jusabatier)</li>\n</ul>\n<h4>2.2.2</h4>\n<ul>\n<li>SLO (Single Log Out) support (thanks to dedotombo and me)</li>\n<li>Adding NCONTAINS operator (thanks to blandman)</li>\n<li>Fix bug on Gateway mode (autologin) (thanks to dedotombo again). Now it&#8217;s now necessary to hack theme files to fire it.</li>\n<li>Adding option logout on authentication failure to not disturb users</li>\n<li>Initialize PHP session at a later stage (on wp_loaded not on init)</li>\n</ul>\n<h4>2.2.1</h4>\n<ul>\n<li>Fix incorrect PHP version requirement, thanks to olhovsky.</li>\n<li>Fix PHP7 warnings, thanks to vbonamy.</li>\n<li>Fix serviceUrl with parameters, thanks to franck86</li>\n<li>Add new parameter settings for cURL : CA_PATH, CA_INFO, thanks to Basile</li>\n</ul>\n<h4>2.2</h4>\n<ul>\n<li>Replace SwiftMailer by native wordpress mailing library PHPMailer. Replace usage of deprecated MCrypt library by openssl. Somes bug fixes.</li>\n</ul>\n<h4>2.1.9</h4>\n<ul>\n<li>Fix error with recent version of JetPack.</li>\n</ul>\n<h4>2.1.8</h4>\n<ul>\n<li>Add support for Pantheon environments. Thanks to Jesse Loesberg.</li>\n<li>Fix error on uninstall if table does not exists</li>\n</ul>\n<h4>2.1.7</h4>\n<ul>\n<li>Adding meta require PHP version. Fixing error : fix restore configuration filein multi-site configuration. (Thanks to buddywhatshisname)</li>\n</ul>\n<h4>2.1.6</h4>\n<ul>\n<li>Fixing error : fix backup file download in multi-site configuration. (Thanks to buddywhatshisname)</li>\n</ul>\n<h4>2.1.5</h4>\n<ul>\n<li>Fixing error : removing extra slash from logo url</li>\n</ul>\n<h4>2.1.1</h4>\n<ul>\n<li>Fix missing file autoload_static.php</li>\n</ul>\n<h4>2.1.0</h4>\n<ul>\n<li>Fix SVN error</li>\n</ul>\n<h4>2.0.9</h4>\n<ul>\n<li>Upgrade SwiftMailer library to 6.0.2.</li>\n</ul>\n<h4>2.0.8</h4>\n<ul>\n<li>Add &#8216;-IN&#8217; and &#8216;-NOTIN&#8217; operators to process array attributes values.</li>\n</ul>\n<h4>2.0.7</h4>\n<ul>\n<li>Add new filter wp_cassify_override_service_validate_url. Build you own service validate url. Very useful when you&#8217;re behind loadbalancer.</li>\n</ul>\n<h4>2.0.6</h4>\n<ul>\n<li>Add new feature : Purge user roles before applying rules (syncing wordpress local roles with CAS user attributes)</li>\n<li>Add new shortcode : wp_cassify_logout_with_redirect</li>\n<li>Some bug fixes</li>\n</ul>\n<h4>2.0.4</h4>\n<ul>\n<li>Fix bug on PHP Strict standards.</li>\n</ul>\n<h4>2.0.2</h4>\n<ul>\n<li>Fix bugs on backup/import configuration settings</li>\n</ul>\n<h4>1.9.9</h4>\n<ul>\n<li>Backup / Restore plugin configuration options settings</li>\n</ul>\n<h4>1.9.7</h4>\n<ul>\n<li>Add support for multivaluated field in wp_cassify_parse_xml_response and in wp_cassify_sync_user_metadata.</li>\n<li>Bug fix on duplicate path with php7. Thanks to Richard Tape.</li>\n</ul>\n<h4>1.9.6</h4>\n<ul>\n<li>Some bug fixes.</li>\n</ul>\n<h4>1.9.4</h4>\n<ul>\n<li>Debug settings, dump last xml cas server response.</li>\n</ul>\n<h4>1.9.3</h4>\n<ul>\n<li>Bug fix on rule solver (on NEQ operator)</li>\n</ul>\n<h4>1.9.2</h4>\n<ul>\n<li>Bug fix on rule solver</li>\n</ul>\n<h4>1.9.1</h4>\n<ul>\n<li>If plugin is network activated, you can define User Role Rule scope by blog id.</li>\n</ul>\n<h4>1.9.0</h4>\n<ul>\n<li>Security fix.</li>\n</ul>\n<h4>1.8.9</h4>\n<ul>\n<li>Bug fix on local logout.</li>\n</ul>\n<h4>1.8.8</h4>\n<ul>\n<li>In multisite support in subdomain configuration, add an option to override service url.</li>\n<li>Add filter wp_cassify_redirect_service_url_filter</li>\n</ul>\n<h4>1.8.6</h4>\n<ul>\n<li>Test multisite support in subdomain configuration.</li>\n<li>Fix bug on gateway mode.</li>\n<li>Remove function force_user_member_of_blog.</li>\n</ul>\n<h4>1.8.5</h4>\n<ul>\n<li>Add function force_user_member_of_blog.</li>\n</ul>\n<h4>1.8.3</h4>\n<ul>\n<li>Bug fix on user automatic creation.</li>\n</ul>\n<h4>1.8.2</h4>\n<ul>\n<li>Add youtube video in plugin description.</li>\n</ul>\n<h4>1.8.1</h4>\n<ul>\n<li>Bug fix on logout from local wordpress auth.</li>\n</ul>\n<h4>1.8.0</h4>\n<ul>\n<li>Bug fix on service url with querystring parameter.</li>\n</ul>\n<h4>1.7.9</h4>\n<ul>\n<li>\n<p>Detect if user has already authenticated by CAS from your public pages and perform auto-login. Include this in<br />\nyour index.php or in another template file inside your theme (It use CAS gateway mode) :</p>\n<p>if ( isset($GLOBALS[&#8216;wp-cassify&#8217;]) ) {<br />\n    $GLOBALS[&#8216;wp-cassify&#8217;]-&gt;wp_cassify_check_authentication();<br />\n}</p>\n</li>\n</ul>\n<h4>1.7.4</h4>\n<ul>\n<li>Bug fixes on notifications configuration settings.</li>\n<li>Bug fixes on notification message sending.</li>\n</ul>\n<h4>1.7.2</h4>\n<ul>\n<li>Define user account expiration rules bases on CAS User attributes !</li>\n</ul>\n<h4>1.7.0</h4>\n<ul>\n<li>Bug fix : Suscriber role overwrite all other roles. Suscriber role is pushed only if user account is recently created.</li>\n</ul>\n<h4>1.6.9</h4>\n<ul>\n<li>Warning bugs fixes.</li>\n</ul>\n<h4>1.6.8</h4>\n<ul>\n<li>Bug fix</li>\n<li>Add custom hooks : wp_cassify_before_auth_user_wordpress, wp_cassify_before_redirect, wp_cassify_after_redirect. (See online documentation)</li>\n</ul>\n<h4>1.6.7</h4>\n<ul>\n<li>Suscriber role is pushed by default when user is successfully authenticated by CAS.</li>\n</ul>\n<h4>1.6.6</h4>\n<ul>\n<li>Bug fix</li>\n<li>Add custom hook : wp_cassify_before_auth_user_wordpress</li>\n</ul>\n<h4>1.6.5</h4>\n<ul>\n<li>Add support for web application hosted behind a reverse proxy. (Thanks to franck86).</li>\n</ul>\n<h4>1.6.4</h4>\n<ul>\n<li>Add shortcode to generate login CAS link with redirect.</li>\n</ul>\n<h4>1.6.3</h4>\n<ul>\n<li>Fix bug on javascript control UI.</li>\n</ul>\n<h4>1.6.2</h4>\n<ul>\n<li>Send email notifications when trigger is fired (after user account creation, after user login/logout).</li>\n</ul>\n<h4>1.6.1</h4>\n<ul>\n<li>Email notifications when user account is created.</li>\n</ul>\n<h4>1.6.0</h4>\n<ul>\n<li>New admin interface with metaboxes.</li>\n<li>Fix Bug multi-select fields if network activated.</li>\n</ul>\n<h4>1.5.9</h4>\n<ul>\n<li>Fix Bug on synchronization between CAS User attributes and WordPress User metas</li>\n</ul>\n<h4>1.5.8</h4>\n<ul>\n<li>Fix SSL Certificate probleme. Reintroduce cURL function instead of wp_remote_get function.</li>\n<li>Add SSL Configuration option : SSL Check Certificate wich turn on/off CURLOPT_SSL_VERIFYPEER option.</li>\n</ul>\n<h4>1.5.7</h4>\n<ul>\n<li>Replace cURL function with wp_remote_get function. Now plugin does not require php5-curl.</li>\n<li>Add notice message on admin screen.</li>\n</ul>\n<h4>1.5.6</h4>\n<ul>\n<li>Custom hook to perform actions just after cas authentication. Hook name : wp_cassify_after_cas_authentication</li>\n<li>Custom hook to perform custom cas server response parsing. Hook name : wp_cassify_custom_parsing_cas_xml_response</li>\n</ul>\n<h4>1.5.5</h4>\n<ul>\n<li>Some bug fixes.</li>\n</ul>\n<h4>1.5.4</h4>\n<ul>\n<li>Add custom GET parameter (?wp_cassify_bypass=bypass) to bypass CAS Authentication on certain urls. See online documentation for more infos. Bug fixes on Authorization rule editor.</li>\n</ul>\n<h4>1.5.3</h4>\n<ul>\n<li>Some bug fixes. Security fixes.</li>\n</ul>\n<h4>1.5.2</h4>\n<ul>\n<li>Some bug fixes.</li>\n</ul>\n<h4>1.5.1</h4>\n<ul>\n<li>Synchronize WordPress User metas with CAS User attributes</li>\n</ul>\n<h4>1.5</h4>\n<ul>\n<li>User Role Rule Editor : set user wordpress role according to CAS Attributes values.</li>\n</ul>\n<h4>1.2</h4>\n<ul>\n<li>Multisite configuration possible if network activated.</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>First version.</li>\n</ul>\n"
    },
    "short_description": "The plugin is an Apereo CAS Client. It performs CAS authentication and autorization for Wordpress.",
    "description": "<p>If you&#8217;re happy with this plugin :<br />\nAs a reward for my efforts, I would like to receive T-shirts (or other goodies) as gifts from the universities or companies that use it.<br />\nMy size is L. Best regards.</p>\n<p>This Apereo CAS authentication plugin has no phpCas library dependency. This is not only an authentication plugin.<br />\nYou can build custom authorization rules according to cas user attributes populated. If user don&#8217;t exist in WordPress<br />\ndatabase, it can be created automatically. There are many features. You can customize everything.</p>\n<h4>Website</h4>\n<p>https://wpcassify.wordpress.com/</p>\n<h4>Development and release environment</h4>\n<p>This plugin is now developed and tested from a github repository. You can find it here :<br />\nhttps://github.com/WP-Cassify/wp-cassify-develop</p>\n<p>Don&#8217;t hesitate to contribute to this project. You can fork it and make pull requests !</p>\n<h4>Requirements</h4>\n<ul>\n<li>Require at least PHP version 7.0</li>\n<li>Require at least PHP CURL package</li>\n</ul>\n<h4>Features included</h4>\n<ul>\n<li>SLO (Single Log Out) support (thanks to dedotombo and me)</li>\n<li>Adding NCONTAINS operator (thanks to blandman)</li>\n<li>Fix bug on Gateway mode (autologin) (thanks to dedotombo again). Now it&#8217;s now necessary to hack theme files to fire it.</li>\n<li>Adding option logout on authentication failure to not disturb users</li>\n<li>Initialize PHP session at a later stage (on wp_loaded not on init)</li>\n<li>\n<p>Adding some customs hooks and filters.</p>\n</li>\n<li>\n<p>Tested with CAS Server version 4.1.4</p>\n</li>\n<li>Compatible with CAS Protocol version 2 and 3</li>\n<li>Automatic user creation if not exist in WordPress database.</li>\n<li>Synchronize WordPress User metas with CAS User attributes.</li>\n<li>Add support for multivaluate cas user fields. Now multivaluate fields can be serialized to be stored in custom WP User meta.</li>\n<li>Backup / Restore plugin configuration options settings</li>\n<li>You can choose CAS User attributes you want to populate. Then you can access them via PHP Session.</li>\n<li>\n<p>Be careful, to access to CAS User Attributes from your theme file (from 1.8.4), use code below :</p>\n<pre><code>&lt;?php\n    if ( isset($GLOBALS['wp-cassify']) ) {\n        print_r( $GLOBALS['wp-cassify']-&gt;wp_cassify_get_cas_user_datas() );\n    }\n?&gt;\n</code></pre>\n</li>\n<li>\n<p>Set up WordPress Roles to User according to CAS User attributes.</p>\n</li>\n<li>If plugin is network activated, you can define User Role Rule scope by blog id.</li>\n<li>Authorization rule editor.</li>\n<li>Compatible with WordPress Access Control Plugin.</li>\n<li>Manage URL White List to bypass CAS Authentication on certain pages.</li>\n<li>\n<p>Much simpler bypass authentication with post method provided by Susan Boland (See online documentation). Create wordpress authentication form with redirect attribute like this :</p>\n<pre><code>&lt;?php\n\n    $args = array(\n        'echo'           =&gt; true,\n        'remember'       =&gt; true,\n        'redirect' =&gt; site_url( '/?wp_cassify_bypass=bypass' ),\n        'form_id'        =&gt; 'loginform',\n        'id_username'    =&gt; 'user_login',\n        'id_password'    =&gt; 'user_pass',\n        'id_remember'    =&gt; 'rememberme',\n        'id_submit'      =&gt; 'wp-submit',\n        'label_username' =&gt; __( 'Username' ),\n        'label_password' =&gt; __( 'Password' ),\n        'label_remember' =&gt; __( 'Remember Me' ),\n        'label_log_in'   =&gt; __( 'Log In' ),\n        'value_username' =&gt; '',\n        'value_remember' =&gt; false\n    );\n\n    wp_login_form( $args ); \n?&gt;\n</code></pre>\n</li>\n<li>\n<p>Receive email notifications when trigger is fired (after user account creation, after user login/logout).</p>\n</li>\n<li>Define notifications rules based on user attributes values.</li>\n<li>Purge user roles before applying user role rules.</li>\n<li>Define user account expiration rules bases on CAS User attributes.</li>\n<li>Network activation allowed</li>\n<li>You can set Service Logout URL (Needs to have CAS Server with followServiceRedirects option configured).</li>\n<li>Add support for web application hosted behind a reverse proxy. (Thanks to franck86)</li>\n<li>Add custom hooks : wp_cassify_after_cas_authentication, wp_cassify_before_auth_user_wordpress, wp_cassify_before_redirect, wp_cassify_after_redirect. (See online documentation)</li>\n<li>Custom filter to perform custom cas server response parsing. Hook name : wp_cassify_custom_parsing_cas_xml_response (See online documentation)</li>\n<li>Custom shortcode to generate CAS login/logout link into your blog. (See online documentation)</li>\n<li>Debug settings, dump last xml cas server response.</li>\n<li>Detect if user has already authenticated by CAS from your public pages and perform auto-login with gateway mode</li>\n<li>\n<p>Add &#8216;-IN&#8217; and &#8216;-NOTIN&#8217; operators to process array attributes values returned from CAS.<br />\nWhen you have :</p>\n<pre><code>$cas_user_datas['title'] = array( 'Student', 'Professor' );\n</code></pre>\n</li>\n</ul>\n<p>Then you can use :</p>\n<pre><code>    (CAS{title} -IN \"professor\")\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.5.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-1.png?rev=3137615",
            "caption": "This is the basic options of the plugin."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-2.png?rev=3137615",
            "caption": "This is the URL settings."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-3.png?rev=3137615",
            "caption": "This is the attributes extraction settings."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-4.png?rev=3137615",
            "caption": "This is the authorization rule editor."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-5.png?rev=3137615",
            "caption": "You can set wordpress role to user according to CAS attributes values."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-6.png?rev=3137615",
            "caption": "Synchronize Wordpress User metas with CAS User attributes."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-7.png?rev=3137615",
            "caption": "This is the email notifications settings."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-8.png?rev=3137615",
            "caption": "Define notifications rules based on events and CAS User attributes"
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-9.png?rev=3137615",
            "caption": "Define user account expiration rules bases on CAS User attributes (after x days from user creation date)."
        },
        {
            "src": "https://ps.w.org/wp-cassify/trunk/screenshot-10.png?rev=3137615",
            "caption": "Define user account expiration rules bases on CAS User attributes (with fixed expiration date)."
        }
    ],
    "tags": {
        "auth": "auth",
        "authentication": "authentication",
        "cas": "cas",
        "central": "central",
        "wpcas": "wpCAS"
    },
    "stable_tag": "2.3.5",
    "versions": {
        "2.3.0": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.0.zip",
        "2.3.1": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.1.zip",
        "2.3.2": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.2.zip",
        "2.3.3": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.3.zip",
        "2.3.4": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.4.zip",
        "2.3.5": "https://downloads.wordpress.org/plugin/wp-cassify.2.3.5.zip",
        "trunk": "https://downloads.wordpress.org/plugin/wp-cassify.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://wpcassify.wordpress.com/donate/",
    "banners": {
        "low": "https://ps.w.org/wp-cassify/assets/banner-772x250.png?rev=3112582",
        "high": false
    },
    "icons": {
        "1x": "https://ps.w.org/wp-cassify/assets/icon-128x128.png?rev=3112582",
        "2x": "https://ps.w.org/wp-cassify/assets/icon-256x256.png?rev=3112582"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}