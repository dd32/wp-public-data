{
    "name": "Form to Post",
    "slug": "form-to-post",
    "version": "0.10",
    "author": "Michael Simpson",
    "author_profile": "https://profiles.wordpress.org/msimpson/",
    "contributors": {
        "msimpson": {
            "profile": "https://profiles.wordpress.org/msimpson/",
            "avatar": "https://secure.gravatar.com/avatar/7d3371b6705cd533bd905056109ff2ef?s=96&d=monsterid&r=g",
            "display_name": "Michael Simpson"
        }
    },
    "requires": "3.2.1",
    "tested": "4.4.33",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 12,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 12,
    "support_url": "https://wordpress.org/support/plugin/form-to-post/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 300,
    "downloaded": 11871,
    "last_updated": "2016-03-15 21:05:00",
    "added": "2011-11-12",
    "homepage": "http://wordpress.org/extend/plugins/form-to-post/",
    "sections": {
        "description": "<p>Create a WP Post from a Form Submission. Create a form using Contact Form 7, Fast Secure Contact Form, or just a plain<br />\nform, be sure to name your fields correctly, then the form submission will be sent to a post.</p>\n<p>Very limited.</p>\n<ul>\n<li>Only accepts text, no images, videos, etc.</li>\n<li>No error handling.</li>\n</ul>\n<p>Essentially you can think of this as a form wrapper around the <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a>.<br />\nThe field name-value pairs of the form become inputs to a wp_insert_post call.</p>\n<p>WARNING: using this plugin provides spammers the opportunity to send you automated spam form submissions.</p>\n<p><strong>How To</strong></p>\n<ol>\n<li>Create a form using Contact Form 7 (CF7), Fast Secure Contact Form (FSCF), or create your own form HTML.</li>\n<li>Name your fields according to the parameters of the <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a>.</li>\n</ol>\n<p>Minimally, your form must have the following two fields. A post will not be created if one or both is missing.</p>\n<ul>\n<li>post_title</li>\n<li>post_content</li>\n</ul>\n<p><strong>Special Fields</strong></p>\n<ul>\n<li>post_category_name can be used to set the category of the post</li>\n</ul>\n<p>As hidden field: If you want to make all the posts be of the same category, create a &#8220;post_category_name&#8221; hidden field<br />\nwhose value is the category name. If using CF7, it does not provide<br />\nhidden fields. But you can add them by adding the plugin <a href=\"https://wordpress.org/extend/plugins/contact-form-7-modules/\" rel=\"ugc\">Contact Form 7 Modules</a>.</p>\n<p>As checkboxes: to make the category choosable by the user via a checkbox,<br />\ncreate a checkbox form field named &#8220;post_category_name&#8221; with each having a value that is a category name.<br />\n(If writing your own HTML directly, use &#8220;post_category_name[]&#8221;, see &#8220;Plain Form Example&#8221; below).</p>\n<p>CF7 Form Definition Example:</p>\n<pre><code>Post Title [text* post_title] &lt;br/&gt;\n\nPost Content (required) &lt;br/&gt;\n   [textarea* post_content] &lt;br/&gt;\n\nCategories (required) &lt;br/&gt;\n  [checkbox* post_category_name \"Uncategorized\" \"Cat1\" \"Cat2\" \"Cat3\"] &lt;br/&gt;\n\n[submit \"Post\"] &lt;br/&gt;\n</code></pre>\n<p>Aside: if you are familiar with wp_insert_post, then you will know that there is a &#8220;post_category&#8221; parameter but no<br />\n&#8220;post_category_name&#8221;. The problem with &#8220;post_category&#8221; is it requires category ids (the numbers). But what you really<br />\nwant in a form are the category names. So this plug allows for &#8220;post_category_name&#8221; which can be one or more<br />\ncategory names. It looks up the associated category numbers and sets &#8220;post_category&#8221; for wp_insert_post.<br />\nBut you can use &#8220;post_category&#8221; instead if you like. But do not use both in the same form.</p>\n<ul>\n<li>post_author_name</li>\n</ul>\n<p>Whereas post_author requires an user id number, you can alternatively use post_author_name takes the login name.<br />\n(Same idea as post_category_name an an alternative to post_category).</p>\n<ul>\n<li>post_author_default</li>\n</ul>\n<p>A weaker form of post_author_name, takes a login name. When not using post_author_name or post_author_default,<br />\nthen an author will only be set on the post if a person is logged in. In that case his login is used. If you use post_author_name<br />\nthen that ignores the user&#8217;s login and sets the author to the post_author_name value. If you use post_author_default instead,<br />\nthen it will use the user&#8217;s login id if he is logged in, but if he is not logged in it will set the author to the value of post_author_default.</p>\n<p><strong>Not using CF7 nor FSCF</strong><br />\nYou can define your own form naming fields as described above. But you need to do one extra step in this case.<br />\nYou need to have the target page of your form insert the data in the post. You do this by means of a short code [capture-form-to-post].<br />\nSimply place the short code on your form&#8217;s target page and it will capture the submission and create a post.</p>\n<p>Plain Form Example:</p>\n<p>In this example, we create our own form, that posts to the same page. So we put both the short code and the form<br />\ndefinition in the same page. The short code only does something when there are post parameters.<br />\nNOTE: your form must have method=&#8221;post&#8221; not &#8220;get&#8221;.</p>\n<pre><code>[capture-form-to-post]\n&lt;form action=\"\" method=\"post\"&gt;\n   Post Title: &lt;input type=\"text\" name=\"post_title\" value=\"\"/&gt;&lt;br/&gt;\n   Post Content: &lt;br/&gt;\n   &lt;textarea rows=\"10\" name=\"post_content\" cols=\"20\"&gt;&lt;/textarea&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Uncategorized\"&gt;Uncategorized&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat1\"&gt;Cat1&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat2\"&gt;Cat2&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat3\"&gt;Cat3&lt;br&gt;\n   &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Remember: do NOT use [capture-form-to-post] if your form is a CF7 or FSCF form.</p>\n<p><strong>Advanced:</strong></p>\n<p>There are many more parameters to wp_insert_post that can be set simply by putting a form fields in your form<br />\nof the same name as the wp_insert_post parameter. Examples are:</p>\n<ul>\n<li>post_status which will be set to &#8216;publish&#8217; by default making the post published automatically. But you could set that in a hidden field to &#8216;draft&#8217;, &#8216;publish&#8217;, &#8216;pending&#8217;, &#8216;future&#8217;, &#8216;private&#8217;</li>\n<li>comment_status which can be &#8216;closed&#8217; or &#8216;open&#8217;</li>\n<li>post_excerpt</li>\n<li>post_date (format: <a href=\"http://php.net/manual/en/function.date.php\" rel=\"nofollow ugc\">Y-m-d H:i:s</a>, e.g. &#8220;2012-01-01 15:30:00&#8221;)</li>\n<li>And many more, see <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a></li>\n<li>page_template: set to the name of a page template file (e.g. &#8220;new_template.php&#8221;).</li>\n<li>NOTE: tax_input is NOT supported.</li>\n<li>NOTE: If you would want to edit a form, you would need to get the post&#8217;s ID and put it in a form &#8216;ID&#8217; field.</li>\n</ul>\n<p><strong>Setting Post Meta (Custom Fields):</strong></p>\n<p>You can optionally set &#8220;post meta&#8221; (custom field) key-value pairs on your post. To do this, add fields to your form whose name start<br />\nwith &#8220;meta_&#8221;. For example, if you want to set the post meta key &#8220;my_key&#8221; then create a form field named &#8220;meta_my_key&#8221;.<br />\nThe &#8220;meta_&#8221; prefix is used to identify the field as a post meta field and the &#8220;meta_&#8221; gets stripped off. Then a call<br />\nto <a href=\"https://codex.wordpress.org/Function_Reference/update_post_meta\" rel=\"nofollow ugc\">update_post_meta</a><br />\nis made give that key and the field&#8217;s value.</p>\n<p><strong>Setting Values on the Server Side Using a Filter:</strong></p>\n<p>Example Situation 1: you want to set the post_status set to &#8216;pending&#8217; so that you can review posts before they are published.<br />\nHowever, you don&#8217;t want to put that as a field in your form because you are concerned about a hacker changing its value &#8216;published&#8217;.<br />\nYou want to control that on the server side, not in the form in the user&#8217;s browser.</p>\n<p>Example Situation 2: you want to apply some logic about whether a post is automatically published (perhaps based on the user&#8217;s login).</p>\n<p>To address these situations, Form To Post provides a WordPress filter where you can add PHP code.</p>\n<ul>\n<li>The filter name is <code>form_to_post_before_create_post</code></li>\n<li>A filter function takes 1 array parameter, which will be the $post array passed to the<br />\n<a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a></li>\n</ul>\n<p>Example Situation 1 Solution:<br />\nIn your theme or using<br />\n<a href=\"https://wordpress.org/plugins/add-actions-and-filters/\" rel=\"ugc\">Add Shortcodes Actions And Filters</a><br />\nplugin, add a filter function and register it to the<br />\nform_to_post_before_create_post hook.</p>\n<pre><code>function form_to_post_set_values($post) {\n    $post['post_status'] = 'pending';\n    return $post;\n}\n\nadd_filter('form_to_post_before_create_post', 'form_to_post_set_values');\n</code></pre>\n<p><strong>Setting Custom Fields Server Side Using a Filter:</strong></p>\n<p>You will need a different hook to set custom fields. Here is an example.</p>\n<pre><code>function form_to_post_set_meta($post) {\n    $post['order-status'] = 'Order received';\n    return $post;\n}\n\nadd_filter('form_to_post_before_update_post_meta', 'form_to_post_set_meta');\n</code></pre>\n<p>Notice: you do <em>not</em> prefix the custom fields values with &#8220;meta_&#8221; in this case.<br />\nOnly do that when you are setting them in the form itself.</p>\n<p><strong>Dynamically Manipulating the Form Data After Submission</strong></p>\n<p>An advanced application is to manipulate the raw form data just before the plugin uses it.<br />\nThe hook form_to_post_form_data allows this. Functions subscribing to this hook take one argument<br />\nwhich is the form data. The data structure is the same as that in <a href=\"http://cfdbplugin.com/?page_id=646\" rel=\"nofollow ugc\">CFDB Plugin</a><br />\n(another one of my plugins).</p>\n<p>Example: you don&#8217;t have a &#8220;post-content&#8221; or &#8220;post-title&#8221; field in your form, but you want to set those values as a<br />\ncombination of values from other form fields. In this simply example, our form has field &#8220;your-name&#8221; and &#8220;your-email&#8221;.<br />\nThe hook is used to create the &#8220;post-content&#8221; or &#8220;post-title&#8221; fields to be text with the value of fields<br />\n&#8220;your-name&#8221; and &#8220;your-email&#8221; embedded in them.</p>\n<pre><code>function f2p_consolidate_fields( $form_data ) { // change the function name as needed\n    $form_title = 'F2P With Hook Example'; // Change this to your form name\n    if ($form_data-&gt;title = $form_title) {\n\n        // Next line sets the post_title value\n        $form_data-&gt;posted_data['post_title'] = \"Post from {$form_data-&gt;posted_data['your-name']}\";\n\n        // Next line sets the post_content value\n        $form_data-&gt;posted_data['post_content'] =\n            \"This is a post from {$form_data-&gt;posted_data['your-name']} with email {$form_data-&gt;posted_data['your-email']}\";\n    }\n    return $form_data;\n}\nadd_filter( 'form_to_post_form_data', 'f2p_consolidate_fields', 10, 1 ); // make sure the function name matches above\n</code></pre>\n",
        "changelog": "<h4>0.10</h4>\n<ul>\n<li>Added new hook form_to_post_form_data</li>\n</ul>\n<h4>0.9</h4>\n<ul>\n<li>Added new hook form_to_post_before_update_post_meta</li>\n</ul>\n<h4>0.8</h4>\n<ul>\n<li>Bug Fix: Radio and Checkbox values from CF7 were not being processed properly</li>\n</ul>\n<h4>0.7</h4>\n<ul>\n<li>Added a filter &#8216;form_to_post_before_create_post&#8217; to post-process form submission values prior to creating the post.</li>\n</ul>\n<h4>0.6</h4>\n<ul>\n<li>If user is logged when submitting a form then it automatically makes him the post author</li>\n</ul>\n<h4>0.5</h4>\n<ul>\n<li>Updated to work with changes in Contact Form 7 version 3.9</li>\n</ul>\n<h4>0.4</h4>\n<ul>\n<li>Bug fixes</li>\n<li>Added post_author_default</li>\n</ul>\n<h4>0.3</h4>\n<ul>\n<li>Added post_author_name</li>\n<li>Added page_template</li>\n<li>Added ability to set post meta tags</li>\n</ul>\n<h4>0.2</h4>\n<ul>\n<li>Fixed issue related to date.</li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial Revision</li>\n</ul>\n"
    },
    "short_description": "Create a WP Post from a Form Submission.",
    "description": "<p>Create a WP Post from a Form Submission. Create a form using Contact Form 7, Fast Secure Contact Form, or just a plain<br />\nform, be sure to name your fields correctly, then the form submission will be sent to a post.</p>\n<p>Very limited.</p>\n<ul>\n<li>Only accepts text, no images, videos, etc.</li>\n<li>No error handling.</li>\n</ul>\n<p>Essentially you can think of this as a form wrapper around the <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a>.<br />\nThe field name-value pairs of the form become inputs to a wp_insert_post call.</p>\n<p>WARNING: using this plugin provides spammers the opportunity to send you automated spam form submissions.</p>\n<p><strong>How To</strong></p>\n<ol>\n<li>Create a form using Contact Form 7 (CF7), Fast Secure Contact Form (FSCF), or create your own form HTML.</li>\n<li>Name your fields according to the parameters of the <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a>.</li>\n</ol>\n<p>Minimally, your form must have the following two fields. A post will not be created if one or both is missing.</p>\n<ul>\n<li>post_title</li>\n<li>post_content</li>\n</ul>\n<p><strong>Special Fields</strong></p>\n<ul>\n<li>post_category_name can be used to set the category of the post</li>\n</ul>\n<p>As hidden field: If you want to make all the posts be of the same category, create a &#8220;post_category_name&#8221; hidden field<br />\nwhose value is the category name. If using CF7, it does not provide<br />\nhidden fields. But you can add them by adding the plugin <a href=\"https://wordpress.org/extend/plugins/contact-form-7-modules/\" rel=\"ugc\">Contact Form 7 Modules</a>.</p>\n<p>As checkboxes: to make the category choosable by the user via a checkbox,<br />\ncreate a checkbox form field named &#8220;post_category_name&#8221; with each having a value that is a category name.<br />\n(If writing your own HTML directly, use &#8220;post_category_name[]&#8221;, see &#8220;Plain Form Example&#8221; below).</p>\n<p>CF7 Form Definition Example:</p>\n<pre><code>Post Title [text* post_title] &lt;br/&gt;\n\nPost Content (required) &lt;br/&gt;\n   [textarea* post_content] &lt;br/&gt;\n\nCategories (required) &lt;br/&gt;\n  [checkbox* post_category_name \"Uncategorized\" \"Cat1\" \"Cat2\" \"Cat3\"] &lt;br/&gt;\n\n[submit \"Post\"] &lt;br/&gt;\n</code></pre>\n<p>Aside: if you are familiar with wp_insert_post, then you will know that there is a &#8220;post_category&#8221; parameter but no<br />\n&#8220;post_category_name&#8221;. The problem with &#8220;post_category&#8221; is it requires category ids (the numbers). But what you really<br />\nwant in a form are the category names. So this plug allows for &#8220;post_category_name&#8221; which can be one or more<br />\ncategory names. It looks up the associated category numbers and sets &#8220;post_category&#8221; for wp_insert_post.<br />\nBut you can use &#8220;post_category&#8221; instead if you like. But do not use both in the same form.</p>\n<ul>\n<li>post_author_name</li>\n</ul>\n<p>Whereas post_author requires an user id number, you can alternatively use post_author_name takes the login name.<br />\n(Same idea as post_category_name an an alternative to post_category).</p>\n<ul>\n<li>post_author_default</li>\n</ul>\n<p>A weaker form of post_author_name, takes a login name. When not using post_author_name or post_author_default,<br />\nthen an author will only be set on the post if a person is logged in. In that case his login is used. If you use post_author_name<br />\nthen that ignores the user&#8217;s login and sets the author to the post_author_name value. If you use post_author_default instead,<br />\nthen it will use the user&#8217;s login id if he is logged in, but if he is not logged in it will set the author to the value of post_author_default.</p>\n<p><strong>Not using CF7 nor FSCF</strong><br />\nYou can define your own form naming fields as described above. But you need to do one extra step in this case.<br />\nYou need to have the target page of your form insert the data in the post. You do this by means of a short code [capture-form-to-post].<br />\nSimply place the short code on your form&#8217;s target page and it will capture the submission and create a post.</p>\n<p>Plain Form Example:</p>\n<p>In this example, we create our own form, that posts to the same page. So we put both the short code and the form<br />\ndefinition in the same page. The short code only does something when there are post parameters.<br />\nNOTE: your form must have method=&#8221;post&#8221; not &#8220;get&#8221;.</p>\n<pre><code>[capture-form-to-post]\n&lt;form action=\"\" method=\"post\"&gt;\n   Post Title: &lt;input type=\"text\" name=\"post_title\" value=\"\"/&gt;&lt;br/&gt;\n   Post Content: &lt;br/&gt;\n   &lt;textarea rows=\"10\" name=\"post_content\" cols=\"20\"&gt;&lt;/textarea&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Uncategorized\"&gt;Uncategorized&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat1\"&gt;Cat1&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat2\"&gt;Cat2&lt;br&gt;\n   &lt;input type=\"checkbox\" name=\"post_category_name[]\" value=\"Cat3\"&gt;Cat3&lt;br&gt;\n   &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Remember: do NOT use [capture-form-to-post] if your form is a CF7 or FSCF form.</p>\n<p><strong>Advanced:</strong></p>\n<p>There are many more parameters to wp_insert_post that can be set simply by putting a form fields in your form<br />\nof the same name as the wp_insert_post parameter. Examples are:</p>\n<ul>\n<li>post_status which will be set to &#8216;publish&#8217; by default making the post published automatically. But you could set that in a hidden field to &#8216;draft&#8217;, &#8216;publish&#8217;, &#8216;pending&#8217;, &#8216;future&#8217;, &#8216;private&#8217;</li>\n<li>comment_status which can be &#8216;closed&#8217; or &#8216;open&#8217;</li>\n<li>post_excerpt</li>\n<li>post_date (format: <a href=\"http://php.net/manual/en/function.date.php\" rel=\"nofollow ugc\">Y-m-d H:i:s</a>, e.g. &#8220;2012-01-01 15:30:00&#8221;)</li>\n<li>And many more, see <a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a></li>\n<li>page_template: set to the name of a page template file (e.g. &#8220;new_template.php&#8221;).</li>\n<li>NOTE: tax_input is NOT supported.</li>\n<li>NOTE: If you would want to edit a form, you would need to get the post&#8217;s ID and put it in a form &#8216;ID&#8217; field.</li>\n</ul>\n<p><strong>Setting Post Meta (Custom Fields):</strong></p>\n<p>You can optionally set &#8220;post meta&#8221; (custom field) key-value pairs on your post. To do this, add fields to your form whose name start<br />\nwith &#8220;meta_&#8221;. For example, if you want to set the post meta key &#8220;my_key&#8221; then create a form field named &#8220;meta_my_key&#8221;.<br />\nThe &#8220;meta_&#8221; prefix is used to identify the field as a post meta field and the &#8220;meta_&#8221; gets stripped off. Then a call<br />\nto <a href=\"https://codex.wordpress.org/Function_Reference/update_post_meta\" rel=\"nofollow ugc\">update_post_meta</a><br />\nis made give that key and the field&#8217;s value.</p>\n<p><strong>Setting Values on the Server Side Using a Filter:</strong></p>\n<p>Example Situation 1: you want to set the post_status set to &#8216;pending&#8217; so that you can review posts before they are published.<br />\nHowever, you don&#8217;t want to put that as a field in your form because you are concerned about a hacker changing its value &#8216;published&#8217;.<br />\nYou want to control that on the server side, not in the form in the user&#8217;s browser.</p>\n<p>Example Situation 2: you want to apply some logic about whether a post is automatically published (perhaps based on the user&#8217;s login).</p>\n<p>To address these situations, Form To Post provides a WordPress filter where you can add PHP code.</p>\n<ul>\n<li>The filter name is <code>form_to_post_before_create_post</code></li>\n<li>A filter function takes 1 array parameter, which will be the $post array passed to the<br />\n<a href=\"https://codex.wordpress.org/Function_Reference/wp_insert_post\" rel=\"nofollow ugc\">wp_insert_post function</a></li>\n</ul>\n<p>Example Situation 1 Solution:<br />\nIn your theme or using<br />\n<a href=\"https://wordpress.org/plugins/add-actions-and-filters/\" rel=\"ugc\">Add Shortcodes Actions And Filters</a><br />\nplugin, add a filter function and register it to the<br />\nform_to_post_before_create_post hook.</p>\n<pre><code>function form_to_post_set_values($post) {\n    $post['post_status'] = 'pending';\n    return $post;\n}\n\nadd_filter('form_to_post_before_create_post', 'form_to_post_set_values');\n</code></pre>\n<p><strong>Setting Custom Fields Server Side Using a Filter:</strong></p>\n<p>You will need a different hook to set custom fields. Here is an example.</p>\n<pre><code>function form_to_post_set_meta($post) {\n    $post['order-status'] = 'Order received';\n    return $post;\n}\n\nadd_filter('form_to_post_before_update_post_meta', 'form_to_post_set_meta');\n</code></pre>\n<p>Notice: you do <em>not</em> prefix the custom fields values with &#8220;meta_&#8221; in this case.<br />\nOnly do that when you are setting them in the form itself.</p>\n<p><strong>Dynamically Manipulating the Form Data After Submission</strong></p>\n<p>An advanced application is to manipulate the raw form data just before the plugin uses it.<br />\nThe hook form_to_post_form_data allows this. Functions subscribing to this hook take one argument<br />\nwhich is the form data. The data structure is the same as that in <a href=\"http://cfdbplugin.com/?page_id=646\" rel=\"nofollow ugc\">CFDB Plugin</a><br />\n(another one of my plugins).</p>\n<p>Example: you don&#8217;t have a &#8220;post-content&#8221; or &#8220;post-title&#8221; field in your form, but you want to set those values as a<br />\ncombination of values from other form fields. In this simply example, our form has field &#8220;your-name&#8221; and &#8220;your-email&#8221;.<br />\nThe hook is used to create the &#8220;post-content&#8221; or &#8220;post-title&#8221; fields to be text with the value of fields<br />\n&#8220;your-name&#8221; and &#8220;your-email&#8221; embedded in them.</p>\n<pre><code>function f2p_consolidate_fields( $form_data ) { // change the function name as needed\n    $form_title = 'F2P With Hook Example'; // Change this to your form name\n    if ($form_data-&gt;title = $form_title) {\n\n        // Next line sets the post_title value\n        $form_data-&gt;posted_data['post_title'] = \"Post from {$form_data-&gt;posted_data['your-name']}\";\n\n        // Next line sets the post_content value\n        $form_data-&gt;posted_data['post_content'] =\n            \"This is a post from {$form_data-&gt;posted_data['your-name']} with email {$form_data-&gt;posted_data['your-email']}\";\n    }\n    return $form_data;\n}\nadd_filter( 'form_to_post_form_data', 'f2p_consolidate_fields', 10, 1 ); // make sure the function name matches above\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/form-to-post.0.10.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": [],
    "stable_tag": "0.10",
    "versions": {
        "0.1": "https://downloads.wordpress.org/plugin/form-to-post.0.1.zip",
        "0.10": "https://downloads.wordpress.org/plugin/form-to-post.0.10.zip",
        "0.2": "https://downloads.wordpress.org/plugin/form-to-post.0.2.zip",
        "0.3": "https://downloads.wordpress.org/plugin/form-to-post.0.3.zip",
        "0.4": "https://downloads.wordpress.org/plugin/form-to-post.0.4.zip",
        "0.5": "https://downloads.wordpress.org/plugin/form-to-post.0.5.zip",
        "0.6": "https://downloads.wordpress.org/plugin/form-to-post.0.6.zip",
        "0.7": "https://downloads.wordpress.org/plugin/form-to-post.0.7.zip",
        "0.8": "https://downloads.wordpress.org/plugin/form-to-post.0.8.zip",
        "trunk": "https://downloads.wordpress.org/plugin/form-to-post.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=NEVDJ792HKGFN&lc=US&item_name=Wordpress%20Plugin&item_number=cf7%2dto%2ddb%2dextension&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/form-to-post.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": [
        {
            "type": "plugin",
            "slug": "form-to-post",
            "language": "ja",
            "version": "0.10",
            "updated": "2017-02-18 01:20:56",
            "package": "http://downloads.wordpress.org/translation/plugin/form-to-post/0.10/ja.zip"
        },
        {
            "type": "plugin",
            "slug": "form-to-post",
            "language": "nl_NL",
            "version": "0.10",
            "updated": "2017-04-25 15:47:24",
            "package": "http://downloads.wordpress.org/translation/plugin/form-to-post/0.10/nl_NL.zip"
        },
        {
            "type": "plugin",
            "slug": "form-to-post",
            "language": "sv_SE",
            "version": "0.10",
            "updated": "2020-11-22 21:48:21",
            "package": "http://downloads.wordpress.org/translation/plugin/form-to-post/0.10/sv_SE.zip"
        }
    ]
}