{
    "name": "WordPress Registry",
    "slug": "wordpress-registry",
    "version": "2.4",
    "author": "<a href=\"http://www.rubin.com.np\">Rubin Shrestha</a>",
    "author_profile": "https://profiles.wordpress.org/rbncha/",
    "contributors": {
        "rbncha": {
            "profile": "https://profiles.wordpress.org/rbncha/",
            "avatar": "https://secure.gravatar.com/avatar/c9a035d9a006beaefd458e2c8340ffb5?s=96&d=monsterid&r=g",
            "display_name": "rbncha"
        }
    },
    "requires": "1.5",
    "tested": "3.4.2",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/wordpress-registry/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1768,
    "last_updated": "2012-09-12 12:27:00",
    "added": "2012-02-25",
    "homepage": "",
    "sections": {
        "description": "<p>The main reason for building this plugin is because wordpress doesn&#8217;t readily have a central registry system where things can be stored such as variable values, objects, arrays. Which can be retrieved from a global space. This plugin basically tries to  lessen the repeating declarations of variables and etc. It is something quite similar to Magento registry &#8220;Mage_Registry&#8221;, but very light version.</p>\n<p>This plugin can also be used as GET and POST request parameters handler. The benefit is, you don&#8217;t have to check isset($_GET[&#8216;myparam&#8217;]) or isset($_POST[&#8216;myparam&#8217;]). If the param is not set, it will return a default value you supplied in second param. By default, the default value is false.</p>\n<p>Handle the session data as easy as never before. Save to session, check existance, get, unset it easily using dynamic methods.</p>\n<p>Hope this could be of some use.</p>\n<p>Usage is very easy, neat and straight forward:</p>\n<p>Register a dynamic method on the fly:<br />\n    registry()-&gt;setDynamicMethodName(&#8216;this is my value&#8217;);<br />\n    registry()-&gt;setMyName(&#8216;My Name is Rubin Shrestha&#8217;);</p>\n<p>Validate existance of your method and echo:<br />\n    if( registry()-&gt;hasDynamicMethodName() ) echo &#8216;Has &#8216; . registry()-&gt;getDynamicMethodName();</p>\n<p>Unset the dynamic method:<br />\nregistry()-&gt;unsDynamicMethodName(); after this, if you echo registry()-&gt;getDynamicMethodName() it will return null;</p>\n<p>For GET and POST request handler use it like this:</p>\n<ul>\n<li>For $_GET, you can simply call registry()-&gt;request()-&gt;getParam(&#8216;param_key&#8217;, [default value if any, else blank, will return false]);</li>\n<li>To check if the page type is $_POST use if( registry()-&gt;request()-&gt;isPost() ) { //do your stuffs here }</li>\n<li>For $_POST, you can simply call registry()-&gt;request()-&gt;getPost(&#8216;param_key&#8217;, [default value if any, else blank; will return false]);</li>\n<li>You can also do registry()-&gt;request()-&gt;getParams() and registry()-&gt;request()-&gt;getPosts();</li>\n<li>You can also add request object scope variable, registry()-&gt;request()-&gt;setVariableName(&#8216;this is my value&#8217;);. Get the value by registry()-&gt;request()-&gt;getVariableName();</li>\n</ul>\n<p>Session handler:</p>\n<p>Handle the data in session as easy as registry()-&gt;session()-&gt;setDynamicMethodName(&#8216;this is my value&#8217;); and get it as registry()-&gt;session()-&gt;getDynamicMethodName(); Unset it registry()-&gt;session()-&gt;unsDynamicMethodName();</p>\n",
        "installation": "<ol>\n<li>Upload WordPress Registry to the &#8216;/wp-content/plugins/&#8217; directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n</ol>\n",
        "changelog": "<h4>2.4</h4>\n<ul>\n<li>registry()-&gt;request()-&gt;session() handler hadded</li>\n</ul>\n<h4>2.3</h4>\n<ul>\n<li>registry()-&gt;request()-&gt;isPost() method added to check if a page request is </li>\n</ul>\n<h4>2.2</h4>\n<ul>\n<li>Quick fix for POST values not being retrieved</li>\n</ul>\n<h4>2.1</h4>\n<ul>\n<li>Introduction of better GET and POST request hanlder.</li>\n<li>Notice error removed while initializing plugin itself</li>\n</ul>\n<h4>2.0</h4>\n<ul>\n<li>Introduced method based implementation as set/get/has Data so that you can use registry()-&gt;setObjectName(new stdObject), registry()-&gt;hasObjectName() registry()-&gt;getObjectName() etc.</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial Release</li>\n</ul>\n"
    },
    "short_description": "Makes variables and values globally accessible from everywhere. Better handling of $_GET and $_POST. Session data management.",
    "description": "<p>The main reason for building this plugin is because wordpress doesn&#8217;t readily have a central registry system where things can be stored such as variable values, objects, arrays. Which can be retrieved from a global space. This plugin basically tries to  lessen the repeating declarations of variables and etc. It is something quite similar to Magento registry &#8220;Mage_Registry&#8221;, but very light version.</p>\n<p>This plugin can also be used as GET and POST request parameters handler. The benefit is, you don&#8217;t have to check isset($_GET[&#8216;myparam&#8217;]) or isset($_POST[&#8216;myparam&#8217;]). If the param is not set, it will return a default value you supplied in second param. By default, the default value is false.</p>\n<p>Handle the session data as easy as never before. Save to session, check existance, get, unset it easily using dynamic methods.</p>\n<p>Hope this could be of some use.</p>\n<p>Usage is very easy, neat and straight forward:</p>\n<p>Register a dynamic method on the fly:<br />\n    registry()-&gt;setDynamicMethodName(&#8216;this is my value&#8217;);<br />\n    registry()-&gt;setMyName(&#8216;My Name is Rubin Shrestha&#8217;);</p>\n<p>Validate existance of your method and echo:<br />\n    if( registry()-&gt;hasDynamicMethodName() ) echo &#8216;Has &#8216; . registry()-&gt;getDynamicMethodName();</p>\n<p>Unset the dynamic method:<br />\nregistry()-&gt;unsDynamicMethodName(); after this, if you echo registry()-&gt;getDynamicMethodName() it will return null;</p>\n<p>For GET and POST request handler use it like this:</p>\n<ul>\n<li>For $_GET, you can simply call registry()-&gt;request()-&gt;getParam(&#8216;param_key&#8217;, [default value if any, else blank, will return false]);</li>\n<li>To check if the page type is $_POST use if( registry()-&gt;request()-&gt;isPost() ) { //do your stuffs here }</li>\n<li>For $_POST, you can simply call registry()-&gt;request()-&gt;getPost(&#8216;param_key&#8217;, [default value if any, else blank; will return false]);</li>\n<li>You can also do registry()-&gt;request()-&gt;getParams() and registry()-&gt;request()-&gt;getPosts();</li>\n<li>You can also add request object scope variable, registry()-&gt;request()-&gt;setVariableName(&#8216;this is my value&#8217;);. Get the value by registry()-&gt;request()-&gt;getVariableName();</li>\n</ul>\n<p>Session handler:</p>\n<p>Handle the data in session as easy as registry()-&gt;session()-&gt;setDynamicMethodName(&#8216;this is my value&#8217;); and get it as registry()-&gt;session()-&gt;getDynamicMethodName(); Unset it registry()-&gt;session()-&gt;unsDynamicMethodName();</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wordpress-registry.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "_get": "$_GET",
        "_post": "$_POST",
        "globals": "globals",
        "registry": "registry",
        "scope": "Scope"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/wordpress-registry.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}