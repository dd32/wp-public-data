{
    "name": "Hikari Email &amp; URL Obfuscator",
    "slug": "hikari-email-url-obfuscator",
    "version": "0.08.10",
    "author": "<a href=\"http://Hikari.ws\">Hikari</a>",
    "author_profile": "https://profiles.wordpress.org/shidouhikari/",
    "contributors": {
        "shidouhikari": {
            "profile": "https://profiles.wordpress.org/shidouhikari/",
            "avatar": "https://secure.gravatar.com/avatar/6f337cc2350d5e15ce962f0f085ccdd0?s=96&d=monsterid&r=g",
            "display_name": ""
        }
    },
    "requires": "2.8.0",
    "tested": "3.0.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/hikari-email-url-obfuscator/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 80,
    "downloaded": 16476,
    "last_updated": "2010-10-14 5:01am GMT",
    "added": "2010-01-29",
    "homepage": "http://Hikari.ws/email-url-obfuscator/",
    "sections": {
        "description": "<p>Spam is website publishers #1 concern, we wanna share our and our visitors&#8217; emails to those who should have access to them, but don&#8217;t want spam harvesters stealing them and sending garbage to us. A lot of techniques had been developed to hide our emails from these delinquents, while having them shown to real people.</p>\n<p>And together with spam harvesting, on 15 June 2009, Matt Cutts, a well known software engineer of Google, announced that Google Bot will no longer ignore nofollowed links for PageRank, and now we lose PR/link juice for every link we add to our pages, even if we use rel=&#8221;nofollow&#8221; on them. So, now we must hide links from Search Engines too!</p>\n<p>I&#8217;ve been searching for an ultimate obfuscation solution for both emails and URLs, that would be user-friendly for me the content publisher, and for my visitors. I&#8217;ve seen a lot of solutions, some that inspired me, but none that would fit my needs. It was time to start coding ðŸ™‚</p>\n<p><a href=\"http://Hikari.ws/email-url-obfuscator/\" rel=\"nofollow ugc\">Hikari Email &amp; URL Obfuscator</a> plugin obfuscates emails and URL links, to hide them from spam harvesters and Search Endigne crawlers. It  uses ROT13 or cc8b to encode each link while PHP is building the page, then uses JavaScript to decode it and show it to the user. If JavaScript is not available, it uses CSS to hide them.</p>\n<p>It doesn&#8217;t use shortcodes, it works directly over HTML links, parsing and obfuscating them. By default it filters all texts in posts, comments, comments authors and text widgets, but you can manually use it anywhere you want.</p>\n<p>Basically, Hikari Email &amp; URL Obfuscator plugin searches for links that contain URLs and emails on their <code>href</code> atrribute. For each found link, it is replaced by an obfuscated string, and a JavaScript function is called, having in its parameters the required data for JavaScript to decode and recreate the original link.</p>\n<p>The obfuscated string is then merged back by CSS to a readable URL/email text, so that human visitors can read it while spam harvesters and searchbots will not be able to detect it as a valid email/URL.</p>\n<p>And, for JavaScript-enabled visitors, this string is replaced by a link with the exact same behavior and attributes of your original link, so that they can interact with it as if there was no obfuscation in place!<br />\n(Really, there is no way to diferenciate an obfuscated link generated by JavaScript from the original link, unless the HTML document&#8217; source is verified or a development tool as FireBug is used!)</p>\n<p>It uses 4 obfuscation techniques, 2 JavaScript solutions and 2 CSS alternatives for JavaScript-disabled browsers.</p>\n<p>For CSS, it may <em>revert</em> the link string while PHP is building the page and then CSS reverts it back. Or it may add garbage text between the link, and CSS prevents this extra text from being rendered, so any user-agent that doesn&#8217;t use CSS can&#8217;t find the link but browsers show it clearly.</p>\n<p>Now, when JavaScript is available, it is delivered with the original link, encoded using <strong>ROT13</strong> or <strong>cc8b</strong> by PHP. The link is then decoded back by JavaScript and added to the page, so that real users don&#8217;t even notice the original link was replaced.</p>\n<p>And, disregarding the used technique, we content publishers must do nothing different while building our content, just activate the plugin and it does everything else for us ðŸ™‚</p>\n<p>I dedicate Hikari Email &amp; URL Obfuscator to <strong>Ju</strong>, my beloved frient ^-^</p>\n<h4>Features</h4>\n<ul>\n<li><em>Works instantly, no need to edit your posts to have your links obfuscated</em>: Hikari Email &amp; URL Obfuscator plugin automatically detects them and starts obfuscating as soon as it is activated.</li>\n<li><strong>Unobstructive JavaScript</strong>: links are obfuscated and shown for visitors with and without JavaScript, forget those &#8220;you must enabled javascript to see this email&#8221; messages!</li>\n<li><em>They are real links!</em>: any attribute you can use in an <code>&lt;a&gt;</code> tag you also can use in obfuscated links (JavaScript version only).</li>\n<li><em>Customization</em>: CSS doesn&#8217;t let we have real links, but we can at least choose if our obfuscated text will have email only, text only, or both!</li>\n<li><em>XHTML 1.1 valid</em>: obfuscated links and JavaScript code are valid even in XHTML 1.1 standard. It makes the plugin valid inclusive in HTML 4.0, XHTML 1.0 Strict, XHTML 1.0 Transitional and HTML5!</li>\n</ul>\n<h4>Advantages over other obfuscation solutions</h4>\n<ul>\n<li>Your visitors will see your emails and URLs <em>even if they keep JavaScript disabled</em>.</li>\n<li><em>Automatic</em>: you don&#8217;t need to take special actions to start obfuscating, as using shortcodes in place of links or an external tool to get your obfuscation code. Just normally use your links in your posts and let the plugin do the rest!</li>\n<li><em>Sitewide</em>: instantly works in your existing posts, pages, comments and text widgets, just after you activate it.</li>\n<li><em>Diversity</em>: for each link, it randomly chooses between 2 CSS and 2 JavaScript obfuscation methods, making it harder for spammers to crack it.</li>\n<li><em>Extensible</em>: you can call it manually, and add it to other plugins and themes filters.</li>\n<li><em>Customizable</em>: use custom parameters to force or avoid specific links from being obfuscated, and to define how non-JavaScript obfuscation will behave.</li>\n</ul>\n",
        "installation": "<p><strong>Hikari Email &amp; URL Obfuscator</strong> requires at least <em>WordPress 2.8</em> and <em>PHP5</em> to work.</p>\n<p>You can use the built in installer and upgrader, or you can install the plugin manually.</p>\n<ol>\n<li>Download the zip file, upload it to your server and extract all its content to your <code>/wp-content/plugins</code> folder. Make sure the plugin has its own folder (for exemple  <code>/wp-content/plugins/hikari-email-url-obfuscator/</code>).</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress admin page.</li>\n<li>That&#8217;s it! Go back to your home page and see how your old links are with JavaScript enabled and disabled ðŸ™‚</li>\n<li>Go to options page if you wanna add whitelist and blacklist and do some deeper configs.</li>\n</ol>\n<h4>Upgrading</h4>\n<p>If you have to upgrade manually, simply delete <code>hikari-email-url-obfuscator</code> folder and follow installation steps again.</p>\n<h4>Uninstalling</h4>\n<p>If you go to plugins list page and deactivate the plugin, it&#8217;s data stored in database (configs, whitelist, blacklist) will remain stored and won&#8217;t be deleted.</p>\n<p>If you want to fully uninstall the plugin and clean up database, go to its options page and use its uninstall feature. This feature deletes all stored options, restoring them to default (which can also be used if you want defaults restored back), and then gives you direct link to securely deactive the plugin so that no database data remains stored.</p>\n",
        "faq": "\n<h4>Don&#8217;t I really need to change anything in my links for them to be obfuscated?</h4>\n<p>\n<p>No, you don&#8217;t. <strong>Hikari Email &amp; URL Obfuscator</strong> plugin uses WordPress hooks to filter links on the fly, it automatically finds all your links and obfuscate them for you, directly in your posts / comments / text widgets.</p>\n</p>\n<h4>Does your plugin change ANYTHING in my content stored in database?</h4>\n<p>\n<p>This is a dilemma I always have with plugins that I install and I feel in need to explicitly explaining it.</p>\n<p>No, Hikari Email &amp; URL Obfuscator plugin does NOT touch your content database! Its filter runs in read time, AFTER your content is queried from database and before it is sent to your visitor. Your original content and your original links will remain untouched, and as soon as you deactivate the plugin your site will go back to what it was before it ever knew the plugin existed.</p>\n</p>\n<h4>Can I have a usage exemple?</h4>\n<p>\n<p>You can go to my sites at <a href=\"http://Hikari.ws\" title=\"Hikari WebSite\" rel=\"nofollow ugc\">Hikari WebSite</a> or <a href=\"http://ConscienciaPlanetaria.com\" title=\"ConsciÃªncia PlanetÃ¡ria\" rel=\"nofollow ugc\">ConsciÃªncia PlanetÃ¡ria</a> and take a look, they use it. Verify its page source and how links look like with JavaScript disabled and then enabled.</p>\n</p>\n<h4>Is there any way to customize the plugin default behavior?</h4>\n<p>\n<p>Yes, it has <strong>custom parameters</strong> that are used as CSS classes, in the same way some microformats do. You can see a list of them, with description and exemples at  <a href=\"http://hikari.ws/dev/wordpress/plugin/hikari-email-url-obfuscator/748/advanced-usage/\" rel=\"nofollow ugc\">Hikari Email &amp; URL Obfuscator â€“ Advanced Usage</a>.</p>\n</p>\n<h4>Is there any way to block it from obfuscating one of my links?</h4>\n<p>\n<p>Yes, in the previous question I mensioned custom parameters.</p>\n<p>One of them is <a href=\"http://hikari.ws/dev/wordpress/plugin/hikari-email-url-obfuscator/748/advanced-usage/#hkmuob_no_obfuscate\" rel=\"nofollow ugc\">hkmuob_no_obfuscate</a>, and when used the link won&#8217;t be obfuscated.</p>\n</p>\n<h4>Are my internal links obfuscated too?</h4>\n<p>\n<p>No, links with your website URL and relative links (without http:// ) are not obfuscated.</p>\n</p>\n<h4>How can I obfuscate stuff out of post / comment / text widget areas?</h4>\n<p>\n<p>If you wanna obfuscate emails and URLs that are our of these areas (in the theme templates or in another plugin for exemple), it&#8217;s pretty easy.If you wanna obfuscate emails and URLs that are out of these areas (in the theme templates or in another plugin for exemple), it&#8217;s pretty easy.</p>\n<p>First you prepare the content and store it in a string variable normally, let&#8217;s say it is in <code>$footerContent</code>. Once you have the string, you verify if the plugin is activated by testing if its class <code>HkMuob</code> exists, and if so you grab it&#8217;s object <code>$hkMuob</code> and call the method <code>$hkMuob-&gt;filter($footerContent)</code>. It will return a string variable with your content already obfuscated and ready to be echoed. <strong>Attention!</strong> You must use the global object the plugin creates, because it has internal variabled that will be used in the page footer to interact with JavaScript, if you create another object it will not work! Here&#8217;s a full exemple:</p>\n<pre><code>&lt;?php\n\n// first we repare our content with anything we want, and store it in a variable\n$footerContent = \"I'm a neat content with links inside.\" .\n    ' &lt;a href=\"mailto:no.spam@spam.com\" title=\"c\\'mon mail me!\" target=\"_blank\" class=\"stylish-class\"&gt;mail me&lt;/a&gt;';\n\n// if the class exists, then the plugin is availabe and we can use it to obfuscate any content\n// if not, then we just echo the original content without obfuscating\nif(class_exists('HkMuob')){\n\n    // class is available, let's get its global variable\n    global $hkMuob;\n\n    // now we ask the plugin to filter our content and add any found link to plugin's internal queue\n    $footerContent = $hkMuob-&gt;filter($footerContent);\n\n    // now $footerContent has the same content as before, but with obfuscated links\n}\n\n// whether or not we were able to obfuscate our links, let's print our neat content\necho $footerContent;\n\n?&gt;\n</code></pre>\n<p>You can see a more detailed explanation at <a href=\"http://hikari.ws/dev/wordpress/plugin/hikari-email-url-obfuscator/748/advanced-usage/#manual\" rel=\"nofollow ugc\">Manually filtering other links</a></p>\n</p>\n<h4>Help! My link has a small text and large URL, and now it is breaking my layout!</h4>\n<p>\n<p>Oh man, it can happen for links with small texts in small places.</p>\n<p>Fortunately, there are a bunch of custom parameters that can help you tune up your links when JavaScript is disabled. Just take a look on the link referenced in previous questions and read about these custom parameters, you&#8217;ll be able to do some interesting stuff with them ðŸ™‚</p>\n</p>\n\n",
        "changelog": "<h4>0.08</h4>\n<ul>\n<li>Fixed styling incompatibility with Sociable plugin</li>\n<li>Fixed <code>wp_enqueue_style()</code> not providing media parameter</li>\n<li>Fixed adding JS code to wp_footer, now properly using <code>wp_print_scripts</code></li>\n<li>addes support for <em>PHP Code Widget</em> plugin&#8217;s filter</li>\n</ul>\n<h4>0.07</h4>\n<ul>\n<li>New: Finally an options page!</li>\n<li>Options page made the plugin incompatible with WordPress 2.7, now it requires 2.8 to work.</li>\n<li>New: Whitelist and Blacklist, to list URLs and emails to not be obfuscated (Whitelist) and to be forced to (Blacklist).</li>\n<li>New: Also added options related to the position of JavaScript calls for de-obfuscation , and how these calls should be marked up.</li>\n<li>New: Options page also has a proper uninstall feature, which deletes all data the plugin had added to database and also can be used to reset options to default.</li>\n<li>New: If you want a whole block of content (a post, a comment, a text widget, etc) to be skipped from having its links obfuscated, just add to it a comment <code>&lt;!-- HkMuob NO OBFUSCATE --&gt;</code>.</li>\n<li>Further tests for XHTML valid code, now I hope I can assure it ðŸ™‚</li>\n</ul>\n<h4>0.06</h4>\n<ul>\n<li>Fix: plugin CSS is no longer being added to Admin Pages.</li>\n<li>JavaScript decoding code is back to header, instead of footer.</li>\n<li>Added option for JavaScript call be done just after the link it decodes, I belive having those calls spreaded across the page is harder for spam bots to crack than having all of them inside a unique <code>&lt;script&gt;&lt;/script&gt;</code> at the footer&#8230; but WordPress breaks XHTML validation, gg.</li>\n<li>Increased filter&#8217;s priority to surpass raw-html plugin filter.</li>\n</ul>\n<h4>0.05</h4>\n<ul>\n<li>Fix: now plugin&#8217;s js is added only when there are links to be obfuscated.</li>\n<li>Fix: now plugin folder name is not hardcoded anymore, we can use any folder name we want.</li>\n</ul>\n<h4>0.04</h4>\n<ul>\n<li>First public release.</li>\n</ul>\n"
    },
    "short_description": "Email and normal links are obfuscated, hiding them from spambots. It automatically encodes each link, then uses JavaScript to decode and show them.",
    "description": "<p>Spam is website publishers #1 concern, we wanna share our and our visitors&#8217; emails to those who should have access to them, but don&#8217;t want spam harvesters stealing them and sending garbage to us. A lot of techniques had been developed to hide our emails from these delinquents, while having them shown to real people.</p>\n<p>And together with spam harvesting, on 15 June 2009, Matt Cutts, a well known software engineer of Google, announced that Google Bot will no longer ignore nofollowed links for PageRank, and now we lose PR/link juice for every link we add to our pages, even if we use rel=&#8221;nofollow&#8221; on them. So, now we must hide links from Search Engines too!</p>\n<p>I&#8217;ve been searching for an ultimate obfuscation solution for both emails and URLs, that would be user-friendly for me the content publisher, and for my visitors. I&#8217;ve seen a lot of solutions, some that inspired me, but none that would fit my needs. It was time to start coding ðŸ™‚</p>\n<p><a href=\"http://Hikari.ws/email-url-obfuscator/\" rel=\"nofollow ugc\">Hikari Email &amp; URL Obfuscator</a> plugin obfuscates emails and URL links, to hide them from spam harvesters and Search Endigne crawlers. It  uses ROT13 or cc8b to encode each link while PHP is building the page, then uses JavaScript to decode it and show it to the user. If JavaScript is not available, it uses CSS to hide them.</p>\n<p>It doesn&#8217;t use shortcodes, it works directly over HTML links, parsing and obfuscating them. By default it filters all texts in posts, comments, comments authors and text widgets, but you can manually use it anywhere you want.</p>\n<p>Basically, Hikari Email &amp; URL Obfuscator plugin searches for links that contain URLs and emails on their <code>href</code> atrribute. For each found link, it is replaced by an obfuscated string, and a JavaScript function is called, having in its parameters the required data for JavaScript to decode and recreate the original link.</p>\n<p>The obfuscated string is then merged back by CSS to a readable URL/email text, so that human visitors can read it while spam harvesters and searchbots will not be able to detect it as a valid email/URL.</p>\n<p>And, for JavaScript-enabled visitors, this string is replaced by a link with the exact same behavior and attributes of your original link, so that they can interact with it as if there was no obfuscation in place!<br />\n(Really, there is no way to diferenciate an obfuscated link generated by JavaScript from the original link, unless the HTML document&#8217; source is verified or a development tool as FireBug is used!)</p>\n<p>It uses 4 obfuscation techniques, 2 JavaScript solutions and 2 CSS alternatives for JavaScript-disabled browsers.</p>\n<p>For CSS, it may <em>revert</em> the link string while PHP is building the page and then CSS reverts it back. Or it may add garbage text between the link, and CSS prevents this extra text from being rendered, so any user-agent that doesn&#8217;t use CSS can&#8217;t find the link but browsers show it clearly.</p>\n<p>Now, when JavaScript is available, it is delivered with the original link, encoded using <strong>ROT13</strong> or <strong>cc8b</strong> by PHP. The link is then decoded back by JavaScript and added to the page, so that real users don&#8217;t even notice the original link was replaced.</p>\n<p>And, disregarding the used technique, we content publishers must do nothing different while building our content, just activate the plugin and it does everything else for us ðŸ™‚</p>\n<p>I dedicate Hikari Email &amp; URL Obfuscator to <strong>Ju</strong>, my beloved frient ^-^</p>\n<h4>Features</h4>\n<ul>\n<li><em>Works instantly, no need to edit your posts to have your links obfuscated</em>: Hikari Email &amp; URL Obfuscator plugin automatically detects them and starts obfuscating as soon as it is activated.</li>\n<li><strong>Unobstructive JavaScript</strong>: links are obfuscated and shown for visitors with and without JavaScript, forget those &#8220;you must enabled javascript to see this email&#8221; messages!</li>\n<li><em>They are real links!</em>: any attribute you can use in an <code>&lt;a&gt;</code> tag you also can use in obfuscated links (JavaScript version only).</li>\n<li><em>Customization</em>: CSS doesn&#8217;t let we have real links, but we can at least choose if our obfuscated text will have email only, text only, or both!</li>\n<li><em>XHTML 1.1 valid</em>: obfuscated links and JavaScript code are valid even in XHTML 1.1 standard. It makes the plugin valid inclusive in HTML 4.0, XHTML 1.0 Strict, XHTML 1.0 Transitional and HTML5!</li>\n</ul>\n<h4>Advantages over other obfuscation solutions</h4>\n<ul>\n<li>Your visitors will see your emails and URLs <em>even if they keep JavaScript disabled</em>.</li>\n<li><em>Automatic</em>: you don&#8217;t need to take special actions to start obfuscating, as using shortcodes in place of links or an external tool to get your obfuscation code. Just normally use your links in your posts and let the plugin do the rest!</li>\n<li><em>Sitewide</em>: instantly works in your existing posts, pages, comments and text widgets, just after you activate it.</li>\n<li><em>Diversity</em>: for each link, it randomly chooses between 2 CSS and 2 JavaScript obfuscation methods, making it harder for spammers to crack it.</li>\n<li><em>Extensible</em>: you can call it manually, and add it to other plugins and themes filters.</li>\n<li><em>Customizable</em>: use custom parameters to force or avoid specific links from being obfuscated, and to define how non-JavaScript obfuscation will behave.</li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.zip",
    "upgrade_notice": {
        "0.04 and above": "<p>If you have to upgrade manually, simply delete hikari-email-url-obfuscator folder and follow installation steps again.</p>"
    },
    "screenshots": [],
    "tags": {
        "email": "email",
        "javascript": "javascript",
        "obfuscate": "obfuscate",
        "page-rank": "page rank",
        "spam": "spam"
    },
    "stable_tag": "trunk",
    "versions": {
        "0.04.05": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.0.04.05.zip",
        "0.05.01": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.0.05.01.zip",
        "0.06.06": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.0.06.06.zip",
        "0.07.17": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.0.07.17.zip",
        "HkMuob.css": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.HkMuob.css.zip",
        "HkMuob.js": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.HkMuob.js.zip",
        "hikari-tools.php": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.hikari-tools.php.zip",
        "hikariobfuscator-core.php": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.hikariobfuscator-core.php.zip",
        "hikariobfuscator-options.php": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.hikariobfuscator-options.php.zip",
        "hikariobfuscator.php": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.hikariobfuscator.php.zip",
        "license.txt": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.license.txt.zip",
        "readme.txt": "https://downloads.wordpress.org/plugin/hikari-email-url-obfuscator.readme.txt.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://Hikari.ws/wordpress/#donate",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/hikari-email-url-obfuscator.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}