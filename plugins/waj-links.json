{
    "name": "WAJ Links",
    "slug": "waj-links",
    "version": "1.3.0",
    "author": "<a href=\"https://www.jaimeson-waugh.com\">Jaimeson Waugh</a>",
    "author_profile": "https://profiles.wordpress.org/waughjai/",
    "contributors": {
        "waughjai": {
            "profile": "https://profiles.wordpress.org/waughjai/",
            "avatar": "https://secure.gravatar.com/avatar/c18c3ff307c43dd4752168eb30f5030f?s=96&d=monsterid&r=g",
            "display_name": "waughjai"
        }
    },
    "requires": "4.9.8",
    "tested": "5.2.21",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/waj-links/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 856,
    "last_updated": "2019-05-08 22:46:00",
    "added": "2018-11-12",
    "homepage": "https://github.com/waughjai/copyright-year",
    "sections": {
        "description": "<p>This plugin includes 6 types o&#8217; shortcodes / PHP classes:</p>\n<h3>Link</h3>\n<p>Shortcode: [link href=&#8221;url&#8221;]content[/link]<br />\nPHP Class: new WaughJ\\HTMLLink\\HTMLLink( $href, $content, $other_attributes );</p>\n<p>General link where the link href given is used directly as the href. The backbone o&#8217; all the other link types.</p>\n<p>Content, when put &#8216;tween opening &amp; closing tags, can be a shortcode o&#8217; its own, which will be interpreted, too. When used as a PHP class, you can push any object that can be used as a string as content, including other HTML generators.</p>\n<p>Valid attributes include all valid HTML5 attributes for the a tag, as well as&#8230;<br />\n* an &#8220;anchor&#8221; attribute that adds an anchor to the href ( the part after the # ).<br />\n* a &#8220;parameters&#8221; attribute that adds GET parameters to the href ( i.e. ?first_parameter=second_value&amp;second_parameter=second_value )<br />\n* an &#8220;external&#8221; attribute, which, when set to &#8220;true&#8221;, automatically adds HTML to make the link open in a new tab &amp; protect it from hacking. ( See https://www.jitbit.com/alexblog/256-targetblank&#8212;the-most-underestimated-vulnerability-ever/ for mo&#8217; info on security concerns ).</p>\n<h3>Mail-Link</h3>\n<p>Shortcode: [mail-link]email[/mail-link] or [mail-link email=&#8221;email&#8221;]Email Me.[/mail-link]<br />\nPHP Class: new WaughJ\\HTMLMailLink\\HTMLMailLink( $email, $other_attributes );</p>\n<p>Generates mailto link. If just email given, content automatically set to email.</p>\n<p>Valid attributes include &#8220;value&#8221; for content ( for the direct PHP use ). all valid HTML5 attributes for the a tag, as well as the external attribute mentioned under Link.</p>\n<h3>Phone-Link</h3>\n<p>Shortcode: [phone-link]phone number[/phone-link] or [phone-link tel=&#8221;phone&#8221;]Call us now![/phone-link]<br />\nPHP Class: new WaughJ\\HTMLPhoneLink\\HTMLPhoneLink( $phone_number, $other_attributes );</p>\n<p>Generates tel link. If just phone # is given, content automatically set to phone #.</p>\n<p>Valid attributes include &#8220;value&#8221; for content ( for the direct PHP use ). all valid HTML5 attributes for the a tag, as well as the external attribute mentioned under Link.</p>\n<h3>Post-Link</h3>\n<p>Shortcode: [post-link slug=&#8221;post-slug&#8221;] or [post-link slug=&#8221;post-slug&#8221; post_type=&#8221;specific-post-type&#8221;] [post-link post_id=&#8221;post-id&#8221;]Read this post[/post-link]<br />\nPHP Class: new WaughJ\\WPPostLink\\WPPostLink( $attributes );</p>\n<p>Generates a link to a post, based on slug or post_id, or, if using the PHP class, the post object itself under &#8220;post&#8221;.</p>\n<p>In addition, you can add all the attributes you can for the regular Link class &amp; shortcode.</p>\n<h3>Home-Link</h3>\n<p>Shortcode: [home-link] or [home-link]Visit our home page.[/home-link]<br />\nPHP Class: new WaughJ\\WPHomeLink\\WPHomeLink( $attributes );</p>\n<p>Automatically generates link to WordPress front page. Content that represents link defaults to name o&#8217; front page. All alternative attributes done the same as regular Link class &amp; shortcode.</p>\n<h3>Category Link</h3>\n<p>Shortcode: [category-link slug=&#8221;category-slug&#8221;] or [category-link category_id=&#8221;category-id&#8221;]Link content[/category-link]<br />\nPHP Class: new WaughJ\\WPCategoryLink\\WPCategoryLink( $attributes );</p>\n<p>Automatically generates link to category page. Use slug or category_id attributes to get category. Content &amp; optional attributes added the same way as regular Link class.</p>\n<h3>Tag Link</h3>\n<p>Shortcode: [tag-link slug=&#8221;category-slug&#8221;] or [tag-link slug=&#8221;category-slug&#8221;]Link content[/tag-link]<br />\nPHP Class: new WaughJ\\WPTagLink\\WPTagLink( $attributes );</p>\n<p>Automatically generates link to tag page. Use slug to get tag. Content &amp; optional attributes added the same way as regular Link class.</p>\n<h3>Media Link</h3>\n<p>Shortcode: [media-link media_id=&#8221;&#8221;]Link content[/media-link] or [media-link media-id=&#8221;&#8221;]Link content[/media-link] or [media-link media-id=&#8221;&#8221; value=&#8221;Link content&#8221;]<br />\nPHP Class: new WaughJ\\WPMediaLink\\WPMediaLink( $id, $content, $attributes );</p>\n<p>Automatically generates link to media item. Content must be set or shortcode won&#8217;t work. Shortcode content can be put as content, too. For example, if WAJ Images is installed, you can do the common technique o&#8217; an image link with:</p>\n<p>[media-link media-id=&#8221;1&#8243;][upload-image id=&#8221;1&#8243;][/media-link]</p>\n",
        "installation": "<ol>\n<li>Upload the plugin files to the <code>/wp-content/plugins/plugin-name</code> directory, or install the plugin through the WordPress plugins screen directly.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; screen in WordPress</li>\n<li>Links can be added using shortcode in WordPress editors or directly in PHP by using instances o&#8217; classes. Instances o&#8217; classes can be automatically casted into strings &amp; used as strings, or you can call getHTML() to get HTML code as string.</li>\n</ol>\n",
        "changelog": "<h4>1.3</h4>\n<ul>\n<li>Make shortcodes safely break.</li>\n<li>Fix mail &amp; phone links so that content doesn&#8217;t take priority o&#8217;er email/phone attributes, causing [mail-link email=&#8221;waughjai@gmail.com&#8221;]Mail Me![/mail-link] to generate <a href=\"mailto:Mail Me!\" rel=\"nofollow ugc\">Mail Me!</a> &#8216;stead o&#8217; the preferred <a href=\"mailto:waughjai@gmail.com\" rel=\"nofollow ugc\">Mail Me!</a>.</li>\n<li>Allow mail link to use &#8220;mailto&#8221; attribute to set email, as well as &#8220;email&#8221; &amp; allow phone link to use &#8220;tel&#8221; attribute to set the phone #, as well as &#8220;phone&#8221;.</li>\n<li>Change &#8220;id&#8221; attribute to &#8220;media-id&#8221; / &#8220;media_id&#8221; for media link so that the shortcode doesn&#8217;t block setting the link&#8217;s ID attribute.</li>\n</ul>\n<h4>1.2</h4>\n<ul>\n<li>Add media link.</li>\n</ul>\n<h4>1.1</h4>\n<ul>\n<li>Add phone link.</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial stable version.</li>\n</ul>\n"
    },
    "short_description": "Way to mo&#039;-easily create links o&#039; various types in content through PHP &amp; shortcodes.",
    "description": "<p>This plugin includes 6 types o&#8217; shortcodes / PHP classes:</p>\n<h3>Link</h3>\n<p>Shortcode: [link href=&#8221;url&#8221;]content[/link]<br />\nPHP Class: new WaughJ\\HTMLLink\\HTMLLink( $href, $content, $other_attributes );</p>\n<p>General link where the link href given is used directly as the href. The backbone o&#8217; all the other link types.</p>\n<p>Content, when put &#8216;tween opening &amp; closing tags, can be a shortcode o&#8217; its own, which will be interpreted, too. When used as a PHP class, you can push any object that can be used as a string as content, including other HTML generators.</p>\n<p>Valid attributes include all valid HTML5 attributes for the a tag, as well as&#8230;<br />\n* an &#8220;anchor&#8221; attribute that adds an anchor to the href ( the part after the # ).<br />\n* a &#8220;parameters&#8221; attribute that adds GET parameters to the href ( i.e. ?first_parameter=second_value&amp;second_parameter=second_value )<br />\n* an &#8220;external&#8221; attribute, which, when set to &#8220;true&#8221;, automatically adds HTML to make the link open in a new tab &amp; protect it from hacking. ( See https://www.jitbit.com/alexblog/256-targetblank&#8212;the-most-underestimated-vulnerability-ever/ for mo&#8217; info on security concerns ).</p>\n<h3>Mail-Link</h3>\n<p>Shortcode: [mail-link]email[/mail-link] or [mail-link email=&#8221;email&#8221;]Email Me.[/mail-link]<br />\nPHP Class: new WaughJ\\HTMLMailLink\\HTMLMailLink( $email, $other_attributes );</p>\n<p>Generates mailto link. If just email given, content automatically set to email.</p>\n<p>Valid attributes include &#8220;value&#8221; for content ( for the direct PHP use ). all valid HTML5 attributes for the a tag, as well as the external attribute mentioned under Link.</p>\n<h3>Phone-Link</h3>\n<p>Shortcode: [phone-link]phone number[/phone-link] or [phone-link tel=&#8221;phone&#8221;]Call us now![/phone-link]<br />\nPHP Class: new WaughJ\\HTMLPhoneLink\\HTMLPhoneLink( $phone_number, $other_attributes );</p>\n<p>Generates tel link. If just phone # is given, content automatically set to phone #.</p>\n<p>Valid attributes include &#8220;value&#8221; for content ( for the direct PHP use ). all valid HTML5 attributes for the a tag, as well as the external attribute mentioned under Link.</p>\n<h3>Post-Link</h3>\n<p>Shortcode: [post-link slug=&#8221;post-slug&#8221;] or [post-link slug=&#8221;post-slug&#8221; post_type=&#8221;specific-post-type&#8221;] [post-link post_id=&#8221;post-id&#8221;]Read this post[/post-link]<br />\nPHP Class: new WaughJ\\WPPostLink\\WPPostLink( $attributes );</p>\n<p>Generates a link to a post, based on slug or post_id, or, if using the PHP class, the post object itself under &#8220;post&#8221;.</p>\n<p>In addition, you can add all the attributes you can for the regular Link class &amp; shortcode.</p>\n<h3>Home-Link</h3>\n<p>Shortcode: [home-link] or [home-link]Visit our home page.[/home-link]<br />\nPHP Class: new WaughJ\\WPHomeLink\\WPHomeLink( $attributes );</p>\n<p>Automatically generates link to WordPress front page. Content that represents link defaults to name o&#8217; front page. All alternative attributes done the same as regular Link class &amp; shortcode.</p>\n<h3>Category Link</h3>\n<p>Shortcode: [category-link slug=&#8221;category-slug&#8221;] or [category-link category_id=&#8221;category-id&#8221;]Link content[/category-link]<br />\nPHP Class: new WaughJ\\WPCategoryLink\\WPCategoryLink( $attributes );</p>\n<p>Automatically generates link to category page. Use slug or category_id attributes to get category. Content &amp; optional attributes added the same way as regular Link class.</p>\n<h3>Tag Link</h3>\n<p>Shortcode: [tag-link slug=&#8221;category-slug&#8221;] or [tag-link slug=&#8221;category-slug&#8221;]Link content[/tag-link]<br />\nPHP Class: new WaughJ\\WPTagLink\\WPTagLink( $attributes );</p>\n<p>Automatically generates link to tag page. Use slug to get tag. Content &amp; optional attributes added the same way as regular Link class.</p>\n<h3>Media Link</h3>\n<p>Shortcode: [media-link media_id=&#8221;&#8221;]Link content[/media-link] or [media-link media-id=&#8221;&#8221;]Link content[/media-link] or [media-link media-id=&#8221;&#8221; value=&#8221;Link content&#8221;]<br />\nPHP Class: new WaughJ\\WPMediaLink\\WPMediaLink( $id, $content, $attributes );</p>\n<p>Automatically generates link to media item. Content must be set or shortcode won&#8217;t work. Shortcode content can be put as content, too. For example, if WAJ Images is installed, you can do the common technique o&#8217; an image link with:</p>\n<p>[media-link media-id=&#8221;1&#8243;][upload-image id=&#8221;1&#8243;][/media-link]</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/waj-links.1.3.0.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "auto-generate": "auto-generate",
        "html": "html",
        "link": "link"
    },
    "stable_tag": "1.3.0",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/waj-links.1.0.0.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/waj-links.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/waj-links.1.1.1.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/waj-links.1.1.2.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/waj-links.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/waj-links.1.2.1.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/waj-links.1.3.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/waj-links.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/waj-links/assets/icon.svg?rev=2010178",
        "svg": "https://ps.w.org/waj-links/assets/icon.svg?rev=2010178"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}