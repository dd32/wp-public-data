{
    "name": "Verify ID Tokens | Firebase",
    "slug": "verify-id-tokens-firebase",
    "version": "1.0.0",
    "author": "<a href=\"http://bengal-studio.com/\">Mithun Biswas</a>",
    "author_profile": "https://profiles.wordpress.org/bhoot/",
    "contributors": {
        "bhoot": {
            "profile": "https://profiles.wordpress.org/bhoot/",
            "avatar": "https://secure.gravatar.com/avatar/d59fa9c39e089d065e9847679570d119?s=96&d=monsterid&r=g",
            "display_name": "Mithun Biswas"
        }
    },
    "requires": "4.7.0",
    "tested": "5.1.19",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/verify-id-tokens-firebase/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 627,
    "last_updated": "2019-03-25 3:21am GMT",
    "added": "2019-03-25",
    "homepage": "http://wordpress.org/plugins/verify-id-tokens/",
    "sections": {
        "description": "<p>If your Firebase client app communicates with a custom backend server, you might need to identify the currently signed-in user on that server.</p>\n<p>This plugin work with Google Firebase tokens. You can use it to verify ID Tokens.</p>\n<h3>Namespace and Endpoints</h3>\n<p>When the plugin is activated, a new namespace is added</p>\n<pre><code>/verify-id-tokens/v1/\n</code></pre>\n<p>Also, a new endpoint is added to this namespace</p>\n<p><em>/verify-id-tokens/v1/token/validate</em> | POST</p>\n<h3>PHP HTTP Authorization Header enable</h3>\n<p>Most of the shared hosting has disabled the <strong>HTTP Authorization Header</strong> by default.</p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n</code></pre>\n<h3>WPENGINE</h3>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n</code></pre>\n<h3>Configurate the Firebase projectId</h3>\n<p>To add the <strong>projectId</strong> edit your wp-config.php file and add a new constant called <strong>BENGAL_STUDIO_VERIFY_ID_TOKENS_FIREBASE_PROJECT_ID</strong></p>\n<pre><code>define('BENGAL_STUDIO_VERIFY_ID_TOKENS_FIREBASE_PROJECT_ID', 'projectId');\n</code></pre>\n<h3>Configurate CORs</h3>\n<p>The <strong>Verify ID Tokens | Firebase</strong> plugin has the option to activate <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs</a> response headers.</p>\n<p>To enable the CORs edit your wp-config.php file and add a new constant called <strong>BENGAL_STUDIO_VERIFY_ID_TOKENS_ENABLE_CORS</strong></p>\n<pre><code>define('BENGAL_STUDIO_VERIFY_ID_TOKENS_ENABLE_CORS', true);\n</code></pre>\n<h3>Retrieve ID tokens on clients</h3>\n<p>To retrieve the ID token from the client, make sure the user is signed in and then get the ID token from the signed-in user:</p>\n<pre><code>firebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function(idToken) {\n  // Send token to your backend via HTTPS\n  // ...\n}).catch(function(error) {\n  // Handle error\n});\n</code></pre>\n<h3>Verify ID Tokens</h3>\n<h4>verify-id-tokens/v1/token/validate</h4>\n<p>This is a simple helper endpoint to validate a token; you only will need to make a POST request sending the Authorization header.</p>\n",
        "installation": "<p>This section describes how to install the plugin and get it working.</p>\n<ol>\n<li>Upload <code>verify-id-tokens</code> to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n</ol>\n",
        "changelog": "<h4>1.0.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "A plugin to work with Firebase tokens.",
    "description": "<p>If your Firebase client app communicates with a custom backend server, you might need to identify the currently signed-in user on that server.</p>\n<p>This plugin work with Google Firebase tokens. You can use it to verify ID Tokens.</p>\n<h3>Namespace and Endpoints</h3>\n<p>When the plugin is activated, a new namespace is added</p>\n<pre><code>/verify-id-tokens/v1/\n</code></pre>\n<p>Also, a new endpoint is added to this namespace</p>\n<p><em>/verify-id-tokens/v1/token/validate</em> | POST</p>\n<h3>PHP HTTP Authorization Header enable</h3>\n<p>Most of the shared hosting has disabled the <strong>HTTP Authorization Header</strong> by default.</p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n</code></pre>\n<h3>WPENGINE</h3>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n</code></pre>\n<h3>Configurate the Firebase projectId</h3>\n<p>To add the <strong>projectId</strong> edit your wp-config.php file and add a new constant called <strong>BENGAL_STUDIO_VERIFY_ID_TOKENS_FIREBASE_PROJECT_ID</strong></p>\n<pre><code>define('BENGAL_STUDIO_VERIFY_ID_TOKENS_FIREBASE_PROJECT_ID', 'projectId');\n</code></pre>\n<h3>Configurate CORs</h3>\n<p>The <strong>Verify ID Tokens | Firebase</strong> plugin has the option to activate <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs</a> response headers.</p>\n<p>To enable the CORs edit your wp-config.php file and add a new constant called <strong>BENGAL_STUDIO_VERIFY_ID_TOKENS_ENABLE_CORS</strong></p>\n<pre><code>define('BENGAL_STUDIO_VERIFY_ID_TOKENS_ENABLE_CORS', true);\n</code></pre>\n<h3>Retrieve ID tokens on clients</h3>\n<p>To retrieve the ID token from the client, make sure the user is signed in and then get the ID token from the signed-in user:</p>\n<pre><code>firebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function(idToken) {\n  // Send token to your backend via HTTPS\n  // ...\n}).catch(function(error) {\n  // Handle error\n});\n</code></pre>\n<h3>Verify ID Tokens</h3>\n<h4>verify-id-tokens/v1/token/validate</h4>\n<p>This is a simple helper endpoint to validate a token; you only will need to make a POST request sending the Authorization header.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/verify-id-tokens-firebase.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "firebase": "firebase",
        "firebase-auth": "firebase-auth",
        "json-web-tokens": "json-web-tokens"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://bengal-studio.com/",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/verify-id-tokens-firebase.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}