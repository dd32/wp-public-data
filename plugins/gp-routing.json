{
    "name": "GP routing &#8211; WP compatible REST API",
    "slug": "gp-routing",
    "version": "1.0",
    "author": "<a href=\"https://github.com/reneManqueros/\">Rene Manqueros</a>",
    "author_profile": "https://profiles.wordpress.org/renemanqueros/",
    "contributors": {
        "renemanqueros": {
            "profile": "https://profiles.wordpress.org/renemanqueros/",
            "avatar": "https://secure.gravatar.com/avatar/128450fb19e31730bf709c56e2d87518?s=96&d=monsterid&r=g",
            "display_name": "renemanqueros"
        }
    },
    "requires": "3.0.1",
    "tested": "4.3.34",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/gp-routing/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 701,
    "last_updated": "2015-11-27 5:01am GMT",
    "added": "2015-11-27",
    "homepage": "https://github.com/gammapartners",
    "sections": {
        "description": "<p>Allows developers to create REST-ish API&#8217;s that have access to all of WordPress and its plug-ins objects.</p>\n<h3>Usage</h3>\n<p>Install the plug-in as any other plug-in.<br />\nProject is divided in two sets of files:</p>\n<pre><code>* index.php - This is where you register routes and/or middleware.\n* routes/ - This is where you place your routes.\n</code></pre>\n<h3>Middleware</h3>\n<p>Middlewares are functions that will be executed on every call to the API, generally used to validate parameters or<br />\ntransform requests before they reach routes, code for middleware is structured like this:</p>\n<pre><code>app::middleware(function () {\n    doSomething();\n});\n</code></pre>\n<ul>\n<li>Middlewares run for every Verb and do not automatically assign $_POST or $_GET to any variable</li>\n</ul>\n<h3>Routes</h3>\n<p>A route is where you would link a request to a function depending on its HTTP Verb.<br />\nThe routing engine will prepend /api/ to all calls and will append a trailing slash to all requests.<br />\nA GET request would be matched like this:</p>\n<pre><code>app::get('/testget', function($req){\n   return $req;\n});\n</code></pre>\n<p>In which:</p>\n<pre><code>* app::get - This will match up a GET request.\n* '/testget' - the path the routing engine will look for.\n* function(){ } ... - the function to execute when the route is matched.\n* $req - parameters sent to the verb.\n</code></pre>\n<p>To make a call to this route, the full path would be:</p>\n<pre><code>http://www.mysite.com/api/testget/\n</code></pre>\n<ul>\n<li>The trailing slash is always required.</li>\n<li>Parameters for all routes will be sent as the first parameter to the callback.</li>\n</ul>\n<p>A route should be registered on the index file by placing a call to app::routes with the filename of the route (without the extension) as a parameter:</p>\n<pre><code>app::routes('test');\n</code></pre>\n<ul>\n<li>All routes output their return value as a JSON encoded response.</li>\n</ul>\n<h3>Samples for all verbs</h3>\n<ul>\n<li>\n<p>GET:</p>\n<p>app::get(&#8216;/testget&#8217;, function($req){<br />\n   return $req;<br />\n});</p>\n</li>\n<li>\n<p>POST:</p>\n<p>app::post(&#8216;/testpost&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n<li>\n<p>DELETE:</p>\n<p>app::delete(&#8216;/testdelete&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n<li>\n<p>PUT:</p>\n<p>app::put(&#8216;/testput&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n</ul>\n<h3>Nested routes</h3>\n<p>Routes can be nested like this:</p>\n<pre><code>app::delete('/admin/machines', function($req){\n    return $req;\n});\n</code></pre>\n<p>Which could be called by issuing a DELETE to:</p>\n<pre><code>http://www.mysite.com/api/admin/machines/&lt;h3&gt;Route and middleware registration&lt;/h3&gt;\nCode for the routes should be placed on a file inside the \"routes\" folder and then \"registered\" on the index.php file like this:\n</code></pre>\n<p>function gp_registerapimethods()<br />\n{<br />\n    app::middleware(function () {</p>\n<pre><code>});\n\napp::routes('test');\n</code></pre>\n<p>}</p>\n<p>Only one instance of the gp_registerapimethods should exist on the index.php file.<br />\nMiddleware and Routes can have as many instances as needed.<br />\nAll routes inside the routes folder can be registered by doing this call instead of the individual route registration:</p>\n<pre><code>  app::routes('*');\n  &lt;h3&gt;Sample for everything&lt;/h3&gt; The index.php file has the \"test\" route registered, and that test.php route a call for each verb which you could use as a starting point for your own services.\n</code></pre>\n",
        "installation": "<ol>\n<li>Upload the contents of the zip file to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n</ol>\n"
    },
    "short_description": "Allows developers to create REST-ish API&#039;s that have access to all of Wordpress and its plug-ins objects.",
    "description": "<p>Allows developers to create REST-ish API&#8217;s that have access to all of WordPress and its plug-ins objects.</p>\n<h3>Usage</h3>\n<p>Install the plug-in as any other plug-in.<br />\nProject is divided in two sets of files:</p>\n<pre><code>* index.php - This is where you register routes and/or middleware.\n* routes/ - This is where you place your routes.\n</code></pre>\n<h3>Middleware</h3>\n<p>Middlewares are functions that will be executed on every call to the API, generally used to validate parameters or<br />\ntransform requests before they reach routes, code for middleware is structured like this:</p>\n<pre><code>app::middleware(function () {\n    doSomething();\n});\n</code></pre>\n<ul>\n<li>Middlewares run for every Verb and do not automatically assign $_POST or $_GET to any variable</li>\n</ul>\n<h3>Routes</h3>\n<p>A route is where you would link a request to a function depending on its HTTP Verb.<br />\nThe routing engine will prepend /api/ to all calls and will append a trailing slash to all requests.<br />\nA GET request would be matched like this:</p>\n<pre><code>app::get('/testget', function($req){\n   return $req;\n});\n</code></pre>\n<p>In which:</p>\n<pre><code>* app::get - This will match up a GET request.\n* '/testget' - the path the routing engine will look for.\n* function(){ } ... - the function to execute when the route is matched.\n* $req - parameters sent to the verb.\n</code></pre>\n<p>To make a call to this route, the full path would be:</p>\n<pre><code>http://www.mysite.com/api/testget/\n</code></pre>\n<ul>\n<li>The trailing slash is always required.</li>\n<li>Parameters for all routes will be sent as the first parameter to the callback.</li>\n</ul>\n<p>A route should be registered on the index file by placing a call to app::routes with the filename of the route (without the extension) as a parameter:</p>\n<pre><code>app::routes('test');\n</code></pre>\n<ul>\n<li>All routes output their return value as a JSON encoded response.</li>\n</ul>\n<h3>Samples for all verbs</h3>\n<ul>\n<li>\n<p>GET:</p>\n<p>app::get(&#8216;/testget&#8217;, function($req){<br />\n   return $req;<br />\n});</p>\n</li>\n<li>\n<p>POST:</p>\n<p>app::post(&#8216;/testpost&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n<li>\n<p>DELETE:</p>\n<p>app::delete(&#8216;/testdelete&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n<li>\n<p>PUT:</p>\n<p>app::put(&#8216;/testput&#8217;, function($req){<br />\n    return $req;<br />\n});</p>\n</li>\n</ul>\n<h3>Nested routes</h3>\n<p>Routes can be nested like this:</p>\n<pre><code>app::delete('/admin/machines', function($req){\n    return $req;\n});\n</code></pre>\n<p>Which could be called by issuing a DELETE to:</p>\n<pre><code>http://www.mysite.com/api/admin/machines/&lt;h3&gt;Route and middleware registration&lt;/h3&gt;\nCode for the routes should be placed on a file inside the \"routes\" folder and then \"registered\" on the index.php file like this:\n</code></pre>\n<p>function gp_registerapimethods()<br />\n{<br />\n    app::middleware(function () {</p>\n<pre><code>});\n\napp::routes('test');\n</code></pre>\n<p>}</p>\n<p>Only one instance of the gp_registerapimethods should exist on the index.php file.<br />\nMiddleware and Routes can have as many instances as needed.<br />\nAll routes inside the routes folder can be registered by doing this call instead of the individual route registration:</p>\n<pre><code>  app::routes('*');\n  &lt;h3&gt;Sample for everything&lt;/h3&gt; The index.php file has the \"test\" route registered, and that test.php route a call for each verb which you could use as a starting point for your own services.\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/gp-routing.zip",
    "upgrade_notice": {
        "": "<p>None so far.</p>"
    },
    "screenshots": [],
    "tags": {
        "api": "api",
        "rest": "rest"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/gp-routing.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}