{
    "name": "WP Redis",
    "slug": "wp-redis",
    "version": "1.4.4",
    "author": "<a href=\"https://pantheon.io/\">Pantheon, Josh Koenig, Matthew Boynes, Daniel Bachhuber, Alley Interactive</a>",
    "author_profile": "https://profiles.wordpress.org/getpantheon/",
    "contributors": {
        "getpantheon": {
            "profile": "https://profiles.wordpress.org/getpantheon/",
            "avatar": "https://secure.gravatar.com/avatar/f49a8919fd068cbbb81b36643367070a?s=96&d=monsterid&r=g",
            "display_name": "Pantheon Systems"
        },
        "danielbachhuber": {
            "profile": "https://profiles.wordpress.org/danielbachhuber/",
            "avatar": "https://secure.gravatar.com/avatar/560b284fd021779ea4817470074133f1?s=96&d=monsterid&r=g",
            "display_name": "Daniel Bachhuber"
        },
        "mboynes": {
            "profile": "https://profiles.wordpress.org/mboynes/",
            "avatar": "https://secure.gravatar.com/avatar/6b5e3a6a664bcb435216ecba76c9ed90?s=96&d=monsterid&r=g",
            "display_name": "Matthew Boynes"
        },
        "outlandish-josh": {
            "profile": "https://profiles.wordpress.org/outlandish-josh/",
            "avatar": "https://secure.gravatar.com/avatar/3724b2b5f307aafd318d943796e54ab1?s=96&d=monsterid&r=g",
            "display_name": "Josh Koenig"
        },
        "jspellman": {
            "profile": "https://profiles.wordpress.org/jspellman/",
            "avatar": "https://secure.gravatar.com/avatar/f0a6a9ca58a5db894454f3f21bde2eff?s=96&d=monsterid&r=g",
            "display_name": "John Spellman"
        },
        "jazzs3quence": {
            "profile": "https://profiles.wordpress.org/jazzs3quence/",
            "avatar": "https://secure.gravatar.com/avatar/2e6c0a0ecb51c9d67263485a1713294d?s=96&d=monsterid&r=g",
            "display_name": "Chris Reynolds"
        }
    },
    "requires": "3.0.1",
    "tested": "6.4.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 92,
    "ratings": {
        "5": 16,
        "4": 1,
        "3": 1,
        "2": 0,
        "1": 1
    },
    "num_ratings": 19,
    "support_url": "https://wordpress.org/support/plugin/wp-redis/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10000,
    "downloaded": 750746,
    "last_updated": "2023-11-27 19:32:00",
    "added": "2014-09-18",
    "homepage": "http://github.com/pantheon-systems/wp-redis/",
    "sections": {
        "description": "<p><a href=\"https://circleci.com/gh/pantheon-systems/wp-redis/tree/master\" rel=\"nofollow ugc\"></a></p>\n<p>For sites concerned with high traffic, speed for logged-in users, or dynamic pageloads, a high-speed and persistent object cache is a must. You also need something that can scale across multiple instances of your application, so using local file caches or APC are out.</p>\n<p>Redis is a great answer, and one we bundle on the Pantheon platform. This is our plugin for integrating with the cache, but you can use it on any self-hosted WordPress site if you have Redis. Install from <a href=\"https://wordpress.org/plugins/wp-redis/\" rel=\"ugc\">WordPress.org</a> or <a href=\"https://github.com/pantheon-systems/wp-redis\" rel=\"nofollow ugc\">Github</a>.</p>\n<p>It&#8217;s important to note that a persistent object cache isn&#8217;t a panacea &#8211; a page load with 2,000 Redis calls can be 2 full seconds of object cache transactions. Make sure you use the object cache wisely: keep to a sensible number of keys, don&#8217;t store a huge amount of data on each key, and avoid stampeding frontend writes and deletes.</p>\n<p>Go forth and make awesome! And, once you&#8217;ve built something great, <a href=\"https://github.com/pantheon-systems/wp-redis/issues\" rel=\"nofollow ugc\">send us feature requests (or bug reports)</a>. Take a look at the wiki for <a href=\"https://github.com/pantheon-systems/wp-redis/wiki\" rel=\"nofollow ugc\">useful code snippets and other tips</a>.</p>\n<h3>WP-CLI Commands</h3>\n<p>This plugin implements a variety of <a href=\"https://wp-cli.org\" rel=\"nofollow ugc\">WP-CLI</a> commands. All commands are grouped into the <code>wp redis</code> namespace.</p>\n<pre><code>$ wp help redis\n\nNAME\n\n  wp redis\n\nSYNOPSIS\n\n  wp redis &lt;command&gt;\n\nSUBCOMMANDS\n\n  cli         Launch redis-cli using Redis configuration for WordPress\n  debug       Debug object cache hit / miss ratio for any page URL.\n  enable      Enable WP Redis by creating the symlink for object-cache.php\n  info        Provide details on the Redis connection.\n</code></pre>\n<p>Use <code>wp help redis &lt;command&gt;</code> to learn more about each command.</p>\n<h3>Contributing</h3>\n<p>See <a href=\"https://github.com/pantheon-systems/wp-redis/blob/master/CONTRIBUTING.md\" rel=\"nofollow ugc\">CONTRIBUTING.md</a> for information on contributing.</p>\n",
        "installation": "<p>This assumes you have a PHP environment with the <a href=\"https://github.com/phpredis/phpredis\" rel=\"nofollow ugc\">required PhpRedis extension</a> and a working Redis server (e.g. Pantheon). WP Redis also works with Predis via <a href=\"https://github.com/humanmade/wp-redis-predis-client\" rel=\"nofollow ugc\">humanmade/wp-redis-predis-client</a>.</p>\n<ol>\n<li>Install <code>object-cache.php</code> to <code>wp-content/object-cache.php</code> with a symlink or by copying the file.</li>\n<li>\n<p>If you&#8217;re not running on Pantheon, edit wp-config.php to add your cache credentials, e.g.:</p>\n<pre><code>$redis_server = array(\n    'host'     =&gt; '127.0.0.1',\n    'port'     =&gt; 6379,\n    'auth'     =&gt; '12345',\n    'database' =&gt; 0, // Optionally use a specific numeric Redis database. Default is 0.\n);\n</code></pre>\n</li>\n<li>\n<p>If your Redis server is listening through a sockt file instead, set its path on <code>host</code> parameter and change the port to <code>null</code>:</p>\n<pre><code>$redis_server = array(\n    'host'     =&gt; '/path/of/redis/socket-file.sock',\n    'port'     =&gt; null,\n    'auth'     =&gt; '12345',\n    'database' =&gt; 0, // Optionally use a specific numeric Redis database. Default is 0.\n);\n</code></pre>\n</li>\n<li>\n<p>Engage thrusters: you are now backing WP&#8217;s Object Cache with Redis.</p>\n</li>\n<li>(Optional) To use the <code>wp redis</code> WP-CLI commands, activate the WP Redis plugin. No activation is necessary if you&#8217;re solely using the object cache drop-in.</li>\n<li>(Optional) To use the same Redis server with multiple, discreet WordPress installs, you can use the <code>WP_CACHE_KEY_SALT</code> constant to define a unique salt for each install.</li>\n<li>(Optional) To use true cache groups, with the ability to delete all keys for a given group, register groups with <code>wp_cache_add_redis_hash_groups()</code>, or define the <code>WP_REDIS_USE_CACHE_GROUPS</code> constant to <code>true</code> to enable with all groups. However, when enabled, the expiration value is not respected because expiration on group keys isn&#8217;t a feature <a href=\"https://github.com/redis/redis/issues/6620\" rel=\"nofollow ugc\">supported by Redis</a>.</li>\n<li>(Optional) On an existing site previously using WordPress&#8217; transient cache, use WP-CLI to delete all (<code>%_transient_%</code>) transients from the options table: <code>wp transient delete-all</code>. WP Redis assumes responsibility for the transient cache.</li>\n<li>(Optional) To use <a href=\"https://relaycache.com\" rel=\"nofollow ugc\">Relay</a> instead of PhpRedis as the client define the <code>WP_REDIS_USE_RELAY</code> constant to <code>true</code>. For support requests, please use <a href=\"https://github.com/cachewerk/relay/discussions\" rel=\"nofollow ugc\">Relay&#8217;s GitHub discussions</a>.</li>\n</ol>\n",
        "faq": "\n<dt id='why%20would%20i%20want%20to%20use%20this%20plugin%3F'>\nWhy would I want to use this plugin?\n</h4>\n<p>\n<p>If you are concerned with the speed of your site, backing it with a high-performance, persistent object cache can have a huge impact. It takes load off your database, and is faster for loading all the data objects WordPress needs to run.</p>\n</p>\n<dt id='how%20does%20this%20work%20with%20other%20caching%20plugins%3F'>\nHow does this work with other caching plugins?\n</h4>\n<p>\n<p>This plugin is for the internal application object cache. It doesn&#8217;t have anything to do with page caches. On Pantheon you do not need additional page caching, but if you are self-hosted you can use your favorite page cache plugins in conjunction with WP Redis.</p>\n</p>\n<dt id='how%20do%20i%20disable%20the%20persistent%20object%20cache%20for%20a%20bad%20actor%3F'>\nHow do I disable the persistent object cache for a bad actor?\n</h4>\n<p>\n<p>A page load with 2,000 Redis calls can be 2 full seonds of object cache transactions. If a plugin you&#8217;re using is erroneously creating a huge number of cache keys, you might be able to mitigate the problem by disabling cache persistency for the plugin&#8217;s group:</p>\n<pre><code>wp_cache_add_non_persistent_groups( array( 'bad-actor' ) );\n</code></pre>\n<p>This declaration means use of <code>wp_cache_set( 'foo', 'bar', 'bad-actor' );</code> and <code>wp_cache_get( 'foo', 'bad-actor' );</code> will not use Redis, and instead fall back to WordPress&#8217; default runtime object cache.</p>\n</p>\n<dt id='why%20does%20the%20object%20cache%20sometimes%20get%20out%20of%20sync%20with%20the%20database%3F'>\nWhy does the object cache sometimes get out of sync with the database?\n</h4>\n<p>\n<p>There&#8217;s a known issue with WordPress <code>alloptions</code> cache design. Specifically, a race condition between two requests can cause the object cache to have stale values. If you think you might be impacted by this, <a href=\"https://github.com/pantheon-systems/wp-redis/issues/221\" rel=\"nofollow ugc\">review this GitHub issue</a> for links to more context, including a workaround.</p>\n</p>\n<dt id='where%20do%20i%20report%20security%20bugs%20found%20in%20this%20plugin%3F'>\nWhere do I report security bugs found in this plugin?\n</h4>\n<p>\n<p>Please report security bugs found in the source code of the WP Redis plugin through the <a href=\"https://patchstack.com/database/vdp/wp-redis\" rel=\"nofollow ugc\">Patchstack Vulnerability Disclosure Program</a>. The Patchstack team will assist you with verification, CVE assignment, and notify the developers of this plugin.</p>\n</p>\n\n",
        "changelog": "<h4>1.4.4 (November 27, 2023)</h4>\n<ul>\n<li>Updates Pantheon WP Coding Standards to 2.0 [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/445\" rel=\"nofollow ugc\">#445</a>]</li>\n<li>Handle duplicate keys in <code>get_multiple</code> function [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/448\" rel=\"nofollow ugc\">#448</a>] (props @souptik)</li>\n</ul>\n<h4>1.4.3 (June 26, 2023)</h4>\n<ul>\n<li>Bug fix: Fixes assumption that CACHE_PORT &amp; CACHE_PASSWORD are Set. [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/428\" rel=\"nofollow ugc\">428</a>] (props @tnolte)</li>\n<li>Adds WP.org validation GitHub action [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/435\" rel=\"nofollow ugc\">#435</a>]</li>\n<li>Bug fix: Fixes incorrect order of <code>array_replace_recursive</code> and other issues [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/434\" rel=\"nofollow ugc\">434</a>] (props @timnolte)</li>\n<li>Bug fix: Replace use of wp_strip_all_tags in object-cache.php [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/434\" rel=\"nofollow ugc\">434</a>] (props @timnolte)</li>\n<li>Bug fix: Don&#8217;t strip tags from the cache password. [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/434\" rel=\"nofollow ugc\">434</a>] (props @timnolte)</li>\n</ul>\n<h4>1.4.2 (May 15, 2023)</h4>\n<ul>\n<li>Bug fix: Removes exception loop caused by <code>esc_html</code> in <code>_exception_handler()</code> [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/421\" rel=\"nofollow ugc\">421</a>]</li>\n</ul>\n<h4>1.4.1 (May 11, 2023)</h4>\n<ul>\n<li>Bug fix: <code>wp_cache_flush_runtime</code> should only clear the local cache [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/413\" rel=\"nofollow ugc\">413</a>]</li>\n</ul>\n<h4>1.4.0 (May 9, 2023)</h4>\n<ul>\n<li>Add support for <code>flush_runtime</code> and <code>flush_group</code> functions [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/405\" rel=\"nofollow ugc\">#405</a>]</li>\n<li>Add <code>pantheon-wp-coding-standards</code> [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/400\" rel=\"nofollow ugc\">#400</a>]</li>\n<li>Update CONTRIBUTING.MD [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/406\" rel=\"nofollow ugc\">#406</a>]</li>\n<li>Update Composer dependencies [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/394\" rel=\"nofollow ugc\">#401</a>]</li>\n</ul>\n<h4>1.3.5 (April 6, 2023)</h4>\n<ul>\n<li>Bump tested up to version to 6.2</li>\n<li>Update Composer dependencies [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/394\" rel=\"nofollow ugc\">#394</a>]</li>\n</ul>\n<h4>1.3.4 (March 7, 2023)</h4>\n<ul>\n<li>Set <code>missing_redis_message</code> if Redis service is not connected [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/391\" rel=\"nofollow ugc\">#391</a>].</li>\n</ul>\n<h4>1.3.3 (February 28, 2023)</h4>\n<ul>\n<li>Add PHP 8.2 support [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/388\" rel=\"nofollow ugc\">#388</a>].</li>\n<li>Remove Grunt, add valid license to Composer file [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/387\" rel=\"nofollow ugc\">#387</a>].</li>\n<li>Update Composer dependencies [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/384\" rel=\"nofollow ugc\">#384</a>] [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/385\" rel=\"nofollow ugc\">#385</a>].</li>\n</ul>\n<h4>1.3.2 (December 5, 2022)</h4>\n<ul>\n<li>Fix broken <code>wp_cache_supports</code> function [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/382\" rel=\"nofollow ugc\">#382</a>].</li>\n</ul>\n<h4>1.3.1 (December 2, 2022)</h4>\n<ul>\n<li>Declare <code>wp_cache_supports</code> function and support features. [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/378\" rel=\"nofollow ugc\">#378</a>]</li>\n<li>Make dependabot target <code>develop</code> branch for PRs. [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/376\" rel=\"nofollow ugc\">#376</a>]</li>\n</ul>\n<h4>1.3.0 (November 29, 2022)</h4>\n<ul>\n<li>Added CONTRIBUTING.MD and GitHub action to automate deployments to wp.org. [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/368\" rel=\"nofollow ugc\">#368</a>]</li>\n</ul>\n<h4>1.2.0 (February 17, 2022)</h4>\n<ul>\n<li>Adds support for Relay via <code>WP_REDIS_USE_RELAY</code> constant [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/344\" rel=\"nofollow ugc\">#344</a>].</li>\n</ul>\n<h4>1.1.4 (October 21, 2021)</h4>\n<ul>\n<li>Fixes some faulty logic in <code>WP_REDIS_IGNORE_GLOBAL_GROUPS</code> check [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/333\" rel=\"nofollow ugc\">#333</a>].</li>\n</ul>\n<h4>1.1.3 (October 21, 2021)</h4>\n<ul>\n<li>Supports a <code>WP_REDIS_IGNORE_GLOBAL_GROUPS</code> constant to prevent groups from being added to global caching group [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/331\" rel=\"nofollow ugc\">#331</a>].</li>\n</ul>\n<h4>1.1.2 (March 24, 2021)</h4>\n<ul>\n<li>Applies logic used elsewhere to fall back to <code>$_SERVER</code> in <code>wp_redis_get_info()</code> [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/316\" rel=\"nofollow ugc\">#316</a>].</li>\n</ul>\n<h4>1.1.1 (August 17, 2020)</h4>\n<ul>\n<li>Returns cache data in correct order when using <code>wp_cache_get_multiple()</code> and internal cache is already primed [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/292\" rel=\"nofollow ugc\">#292</a>].</li>\n</ul>\n<h4>1.1.0 (July 13, 2020)</h4>\n<ul>\n<li>Implements <code>wp_cache_get_multiple()</code> for WordPress 5.5 [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/287\" rel=\"nofollow ugc\">#287</a>].</li>\n<li>Bails early when connecting to Redis throws an Exception to avoid fatal error [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/285\" rel=\"nofollow ugc\">285</a>].</li>\n</ul>\n<h4>1.0.1 (April 14, 2020)</h4>\n<ul>\n<li>Adds support for specifying Redis database number from environment/server variables [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/273\" rel=\"nofollow ugc\">#273</a>].</li>\n</ul>\n<h4>1.0.0 (March 2, 2020)</h4>\n<ul>\n<li>Plugin is stable.</li>\n</ul>\n<h4>0.8.3 (February 24, 2020)</h4>\n<ul>\n<li>Fixes <code>wp redis cli</code> by using <code>proc_open()</code> directly, instead of <code>WP_CLI::launch()</code> [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/268\" rel=\"nofollow ugc\">#268</a>].</li>\n</ul>\n<h4>0.8.2 (January 15, 2020)</h4>\n<ul>\n<li>Catches exceptions when trying to connect to Redis [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/265\" rel=\"nofollow ugc\">#265</a>].</li>\n</ul>\n<h4>0.8.1 (January 10, 2020)</h4>\n<ul>\n<li>Adds <code>WP_REDIS_DEFAULT_EXPIRE_SECONDS</code> constant to set default cache expire value [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/264\" rel=\"nofollow ugc\">#264</a>].</li>\n</ul>\n<h4>0.8.0 (January 6, 2020)</h4>\n<ul>\n<li>Uses <code>flushdb</code> instead of <code>flushAll</code> to avoid flushing the entire Redis instance [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/259\" rel=\"nofollow ugc\">#259</a>].</li>\n</ul>\n<h4>0.7.1 (December 14, 2018)</h4>\n<ul>\n<li>Better support in <code>wp_cache_init()</code> for drop-ins like LudicrousDB [<a href=\"https://github.com/pantheon-systems/wp-redis/pull/231\" rel=\"nofollow ugc\">#231</a>].</li>\n<li>Cleans up PHPCS issues.</li>\n</ul>\n<h4>0.7.0 (August 22, 2017)</h4>\n<ul>\n<li>Adds filterable connection methods to permit use of Predis. See <a href=\"https://github.com/humanmade/wp-redis-predis-client\" rel=\"nofollow ugc\">humanmade/wp-redis-predis-client</a> for more details.</li>\n</ul>\n<h4>0.6.2 (June 5, 2017)</h4>\n<ul>\n<li>Bug fix: Preserves null values in internal cache.</li>\n<li>Bug fix: Converts numeric values to their true type when getting.</li>\n</ul>\n<h4>0.6.1 (February 23, 2017)</h4>\n<ul>\n<li>Bug fix: correctly passes an empty password to <code>redis-cli</code>.</li>\n<li>Variety of improvements to the test suite.</li>\n</ul>\n<h4>0.6.0 (September 21, 2016)</h4>\n<ul>\n<li>Introduces three new WP-CLI commands: <code>wp redis debug</code> to display cache hit/miss ratio for any URL; <code>wp redis info</code> to display high-level Redis statistics; <code>wp redis enable</code> to create the <code>object-cache.php</code> symlink.</li>\n<li>Permits a Redis database to be defined with <code>$redis_server['database']</code>.</li>\n<li>Introduces <code>wp_cache_add_redis_hash_groups()</code>, which permits registering specific groups to use Redis hashes, and is more precise than our existing <code>WP_REDIS_USE_CACHE_GROUPS</code> constant.</li>\n</ul>\n<h4>0.5.0 (April 27, 2016)</h4>\n<ul>\n<li>Performance boost! Removes redundant <code>exists</code> call from <code>wp_cache_get()</code>, which easily halves the number of Redis calls.</li>\n<li>Uses <code>add_action()</code> and <code>$wpdb</code> in a safer manner for compatibility with Batcache, which loads the object cache before aforementioned APIs are available.</li>\n<li>For debugging purposes, tracks number of calls to Redis, and includes breakdown of call types.</li>\n<li>Adds a slew of more explicit test coverage against existing features.</li>\n<li>For consistency with the actual Redis call, calls <code>del</code> instead of <code>delete</code>.</li>\n<li>Bug fix: If a group isn&#8217;t persistent, don&#8217;t ever make an <code>exists</code> call against Redis.</li>\n</ul>\n<h4>0.4.0 (March 23, 2016)</h4>\n<ul>\n<li>Introduces <code>wp redis-cli</code>, a WP-CLI command to launch redis-cli with WordPress&#8217; Redis credentials.</li>\n<li>Bug fix: Ensures fail back mechanism works as expected on multisite, by writing to sitemeta table instead of the active site&#8217;s options table.</li>\n<li>Bug fix: Uses &#8216;default&#8217; as the default cache group, mirroring WordPress core, such that <code>$wp_object_cache-&gt;add( 'foo', 'bar' )</code> === <code>wp_cache_add( 'foo', 'bar' )</code>.</li>\n</ul>\n<h4>0.3.0 (February 11, 2016)</h4>\n<ul>\n<li>Introduces opt-in support for Redis cache groups. Enable with <code>define( 'WP_REDIS_USE_CACHE_GROUPS', true );</code>. When enabled, WP Redis persists cache groups in a structured manner, instead of hashing the cache key and group together.</li>\n<li>Uses PHP_CodeSniffer and <a href=\"https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\" rel=\"nofollow ugc\">WordPress Coding Standards sniffs</a> to ensure WP Redis adheres to WordPress coding standards.</li>\n<li>Bug fix: Permits use of a Unix socket in <code>$redis_server['host']</code> by ensuring the supplied <code>$port</code> is null.</li>\n</ul>\n<h4>0.2.2 (November 24, 2015)</h4>\n<ul>\n<li>Bug fix: use <code>INSERT IGNORE INTO</code> instead of <code>INSERT INTO</code> to prevent SQL errors when two concurrent processes attempt to write failback flag at the same time.</li>\n<li>Bug fix: use <code>E_USER_WARNING</code> with <code>trigger_error()</code>.</li>\n<li>Bug fix: catch Exceptions thrown during authentication to permit failing back to internal object cache.</li>\n</ul>\n<h4>0.2.1 (November 17, 2015)</h4>\n<ul>\n<li>Bug fix: prevent SQL error when <code>$wpdb-&gt;options</code> isn&#8217;t yet initialized on multisite.</li>\n</ul>\n<h4>0.2.0 (November 17, 2015)</h4>\n<ul>\n<li>Gracefully fails back to the WordPress object cache when Redis is unavailable or intermittent. Previously, WP Redis would hard fatal.</li>\n<li>Triggers a PHP error if Redis goes away mid-request, for you to monitor in your logs. Attempts one reconnect based on specific error messages.</li>\n<li>Forces a flushAll on Redis when Redis comes back after failing. This behavior can be disabled with the <code>WP_REDIS_DISABLE_FAILBACK_FLUSH</code> constant.</li>\n<li>Show an admin notice when Redis is unavailable but is expected to be.</li>\n</ul>\n<h4>0.1</h4>\n<ul>\n<li>Initial commit of working code for the benefit of all.</li>\n</ul>\n"
    },
    "short_description": "Back your WP Object Cache with Redis, a high-performance in-memory storage backend.",
    "description": "<p><a href=\"https://circleci.com/gh/pantheon-systems/wp-redis/tree/master\" rel=\"nofollow ugc\"></a></p>\n<p>For sites concerned with high traffic, speed for logged-in users, or dynamic pageloads, a high-speed and persistent object cache is a must. You also need something that can scale across multiple instances of your application, so using local file caches or APC are out.</p>\n<p>Redis is a great answer, and one we bundle on the Pantheon platform. This is our plugin for integrating with the cache, but you can use it on any self-hosted WordPress site if you have Redis. Install from <a href=\"https://wordpress.org/plugins/wp-redis/\" rel=\"ugc\">WordPress.org</a> or <a href=\"https://github.com/pantheon-systems/wp-redis\" rel=\"nofollow ugc\">Github</a>.</p>\n<p>It&#8217;s important to note that a persistent object cache isn&#8217;t a panacea &#8211; a page load with 2,000 Redis calls can be 2 full seconds of object cache transactions. Make sure you use the object cache wisely: keep to a sensible number of keys, don&#8217;t store a huge amount of data on each key, and avoid stampeding frontend writes and deletes.</p>\n<p>Go forth and make awesome! And, once you&#8217;ve built something great, <a href=\"https://github.com/pantheon-systems/wp-redis/issues\" rel=\"nofollow ugc\">send us feature requests (or bug reports)</a>. Take a look at the wiki for <a href=\"https://github.com/pantheon-systems/wp-redis/wiki\" rel=\"nofollow ugc\">useful code snippets and other tips</a>.</p>\n<h3>WP-CLI Commands</h3>\n<p>This plugin implements a variety of <a href=\"https://wp-cli.org\" rel=\"nofollow ugc\">WP-CLI</a> commands. All commands are grouped into the <code>wp redis</code> namespace.</p>\n<pre><code>$ wp help redis\n\nNAME\n\n  wp redis\n\nSYNOPSIS\n\n  wp redis &lt;command&gt;\n\nSUBCOMMANDS\n\n  cli         Launch redis-cli using Redis configuration for WordPress\n  debug       Debug object cache hit / miss ratio for any page URL.\n  enable      Enable WP Redis by creating the symlink for object-cache.php\n  info        Provide details on the Redis connection.\n</code></pre>\n<p>Use <code>wp help redis &lt;command&gt;</code> to learn more about each command.</p>\n<h3>Contributing</h3>\n<p>See <a href=\"https://github.com/pantheon-systems/wp-redis/blob/master/CONTRIBUTING.md\" rel=\"nofollow ugc\">CONTRIBUTING.md</a> for information on contributing.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-redis.1.4.4.zip",
    "upgrade_notice": {
        "1.4.0": "<p>WP Redis 1.4.0 adds support for the <code>flush_runtime</code> and <code>flush_group</code> functions. If you&#039;ve copied <code>object-cache.php</code> and made your own changes, be sure to copy these additions over as well.</p>"
    },
    "screenshots": [],
    "tags": {
        "cache": "cache",
        "redis": "redis"
    },
    "stable_tag": "1.4.4",
    "versions": {
        "0.1": "https://downloads.wordpress.org/plugin/wp-redis.0.1.zip",
        "0.2.0": "https://downloads.wordpress.org/plugin/wp-redis.0.2.0.zip",
        "0.2.1": "https://downloads.wordpress.org/plugin/wp-redis.0.2.1.zip",
        "0.2.2": "https://downloads.wordpress.org/plugin/wp-redis.0.2.2.zip",
        "0.3.0": "https://downloads.wordpress.org/plugin/wp-redis.0.3.0.zip",
        "0.4.0": "https://downloads.wordpress.org/plugin/wp-redis.0.4.0.zip",
        "0.5.0": "https://downloads.wordpress.org/plugin/wp-redis.0.5.0.zip",
        "0.6.0": "https://downloads.wordpress.org/plugin/wp-redis.0.6.0.zip",
        "0.6.1": "https://downloads.wordpress.org/plugin/wp-redis.0.6.1.zip",
        "0.6.2": "https://downloads.wordpress.org/plugin/wp-redis.0.6.2.zip",
        "0.7.0": "https://downloads.wordpress.org/plugin/wp-redis.0.7.0.zip",
        "0.7.1": "https://downloads.wordpress.org/plugin/wp-redis.0.7.1.zip",
        "0.8.0": "https://downloads.wordpress.org/plugin/wp-redis.0.8.0.zip",
        "0.8.1": "https://downloads.wordpress.org/plugin/wp-redis.0.8.1.zip",
        "0.8.2": "https://downloads.wordpress.org/plugin/wp-redis.0.8.2.zip",
        "0.8.3": "https://downloads.wordpress.org/plugin/wp-redis.0.8.3.zip",
        "1.0.0": "https://downloads.wordpress.org/plugin/wp-redis.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/wp-redis.1.0.1.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/wp-redis.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/wp-redis.1.1.1.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/wp-redis.1.1.2.zip",
        "1.1.4": "https://downloads.wordpress.org/plugin/wp-redis.1.1.4.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/wp-redis.1.2.0.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/wp-redis.1.3.0.zip",
        "1.3.1": "https://downloads.wordpress.org/plugin/wp-redis.1.3.1.zip",
        "1.3.2": "https://downloads.wordpress.org/plugin/wp-redis.1.3.2.zip",
        "1.3.3": "https://downloads.wordpress.org/plugin/wp-redis.1.3.3.zip",
        "1.3.4": "https://downloads.wordpress.org/plugin/wp-redis.1.3.4.zip",
        "1.3.5": "https://downloads.wordpress.org/plugin/wp-redis.1.3.5.zip",
        "1.4.0": "https://downloads.wordpress.org/plugin/wp-redis.1.4.0.zip",
        "1.4.1": "https://downloads.wordpress.org/plugin/wp-redis.1.4.1.zip",
        "1.4.2": "https://downloads.wordpress.org/plugin/wp-redis.1.4.2.zip",
        "1.4.3": "https://downloads.wordpress.org/plugin/wp-redis.1.4.3.zip",
        "1.4.4": "https://downloads.wordpress.org/plugin/wp-redis.1.4.4.zip",
        "trunk": "https://downloads.wordpress.org/plugin/wp-redis.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/wp-redis/assets/banner-772x250.png?rev=2826084",
        "high": "https://ps.w.org/wp-redis/assets/banner-1544x500.png?rev=2826084"
    },
    "icons": {
        "1x": "https://ps.w.org/wp-redis/assets/icon-128x128.png?rev=2826084",
        "2x": "https://ps.w.org/wp-redis/assets/icon-256x256.png?rev=2826084"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 92,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}