{
    "name": "Auto Cloudinary",
    "slug": "auto-cloudinary",
    "version": "1.3.1",
    "author": "<a href=\"https://junaid.dev\">Junaid Bhura</a>",
    "author_profile": "https://profiles.wordpress.org/junaidbhura/",
    "contributors": {
        "junaidbhura": {
            "profile": "https://profiles.wordpress.org/junaidbhura/",
            "avatar": "https://secure.gravatar.com/avatar/c2a12d9555ddcc4b23cb14282512ee2b?s=96&d=monsterid&r=g",
            "display_name": "Junaid Bhura"
        }
    },
    "requires": "4.4",
    "tested": "6.6.1",
    "requires_php": "5.6",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 86,
    "ratings": {
        "5": 10,
        "4": 1,
        "3": 0,
        "2": 0,
        "1": 2
    },
    "num_ratings": 13,
    "support_url": "https://wordpress.org/support/plugin/auto-cloudinary/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 300,
    "downloaded": 22764,
    "last_updated": "2024-06-26 10:06:00",
    "added": "2017-11-14",
    "homepage": "",
    "sections": {
        "description": "<p><a href=\"https://github.com/junaidbhura/auto-cloudinary\" rel=\"nofollow ugc\">Check out the Github Repository ‚ô•</a></p>\n<p>This plugin provides a <strong>super simple</strong> <a href=\"https://cloudinary.com/documentation/fetch_remote_images#auto_upload_remote_resources\" rel=\"nofollow ugc\">Cloudinary auto-upload</a> implementation for WordPress.</p>\n<p>It is inspired by <a href=\"https://developer.wordpress.com/docs/photon/\" rel=\"nofollow ugc\">Photon</a> and <a href=\"https://github.com/humanmade/tachyon-plugin\" rel=\"nofollow ugc\">Tachyon</a>.</p>\n<p>Cloudinary will <strong>automatically fetch and serve the images</strong> from your media library like a <strong>CDN</strong>, without you having to worry about the complicated upload API! Just <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Setup\" rel=\"nofollow ugc\">set up auto-upload</a> in your Cloudinary settings, enter the details in the plugin&#8217;s options, and you&#8217;re all set!</p>\n<p>Easy peasy üòé</p>\n<h3>Important</h3>\n<p>This plugin is <strong>incompatible with the official Cloudinary plugin</strong>. You&#8217;d need to disable that plugin before using this one.</p>\n<h3>Quick Links</h3>\n<p><a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Setup\" rel=\"nofollow ugc\">Setup</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues\" rel=\"nofollow ugc\">Issues</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Functions\" rel=\"nofollow ugc\">Functions</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Filters\" rel=\"nofollow ugc\">Filters</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Best-Practices\" rel=\"nofollow ugc\">Best Practices</a></p>\n<h3>Why did you build this plugin?</h3>\n<p>There already is an <strong>official Cloudinary plugin</strong> available. But in my opinion, it&#8217;s a bit of an overkill and takes over the admin UI. This plugin aims to be:</p>\n<ul>\n<li><strong>Super simple</strong> and light-weight</li>\n<li>Totally seamless and <strong>out of the way</strong></li>\n<li>A flexible tool for <strong>WordPress developers</strong></li>\n</ul>\n<h3>What is Cloudinary Auto-Upload?</h3>\n<p>Cloudinary gives you two options to upload files to it&#8217;s servers:</p>\n<ol>\n<li>The complicated <strong>Upload API</strong> üò±</li>\n<li>The super easy and magical <strong>Fetch API</strong> üé©</li>\n</ol>\n<h4>Upload API</h4>\n<p><em>TL;DR: Too complicated and in the way</em> üëé</p>\n<p>Cloudinary gives you an API, using which, you can manually upload the images to Cloudinary. So you&#8217;d need an <strong>API key</strong>, etc. The <strong>official plugin</strong> uses this method. When you upload an image to the media library, it in turn, uploads it to Cloudinary. This could be a problem if you have thousands of <strong>existing images</strong>, and might not be flexible enough to support <strong>custom architecture</strong>.</p>\n<h4>Fetch API</h4>\n<p><em>TL;DR: Magical</em> üëç</p>\n<p>This plugin uses the super easy <strong>Auto-Upload</strong> feature in the <strong>Fetch API</strong>. We just tell Cloudinary where to find the files on our server (or on S3 or anywhere on the Internet), and it <strong>automatically downloads</strong> it from there and saves it on to it&#8217;s servers the <strong>first time you ask for it</strong>, like a CDN would!</p>\n<h3>What does this plugin do?</h3>\n<p>This plugin does two main things:</p>\n<ol>\n<li>Provides a simple function <code>cloudinary_url()</code> to get a Cloudinary auto-upload URL for any image in your media library, with all the Cloudinary transformations, so you can <strong>dynamically manipulate an image on the fly</strong>.</li>\n<li>Attempts to automatically convert all image URLs on the front-end into a Cloudinary auto-upload URL, so you can <strong>use Cloudinary as an image CDN</strong>.</li>\n</ol>\n<h3>The magical function üé©</h3>\n<p><strong><code>cloudinary_url( $identifier, $args )</code></strong></p>\n<p>This function returns a Cloudinary Auto Upload URL for an image. Please read the <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Best-Practices\" rel=\"nofollow ugc\">Best Practices</a> page before using this.</p>\n<h4>Parameters</h4>\n<ul>\n<li><strong>identifier</strong> (integer/string)(required) : Either the ID of the attachment, or a full image URL.</li>\n<li><strong>args</strong> (array)(optional) : Arguments to manipulate the image.</li>\n</ul>\n<h4>Return Value</h4>\n<p>Returns a URL (string):</p>\n<pre><code>'https://res.cloudinary.com/cloud-name/auto-mapping-folder/2017/12/your-image.jpg'\n</code></pre>\n<h4>Arguments</h4>\n<p>You can optionally send an array of arguments which can transform the image, and set a dynamic file name. Ex:</p>\n<pre><code>array(\n    'transform' =&gt; array( // Optional. All transformations go here.\n        'width'   =&gt; 300,\n        'height'  =&gt; 200,\n        'crop'    =&gt; 'fill',\n        'quality' =&gt; '80',\n        'gravity' =&gt; 'face',\n    ),\n    'file_name' =&gt; 'whatever-file-name-you-want', // Optional. If you want to use a dynamic file name for SEO. Don't use the file extension!\n);\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://cloudinary.com/documentation/image_transformations\" rel=\"nofollow ugc\">full list of transformations</a> you can achieve with Cloudinary.</p>\n<h3>Examples</h3>\n<pre><code>&lt;?php\n$url_1 = cloudinary_url( 123, array(\n    'transform' =&gt; array(\n        'width'   =&gt; 300,\n        'height'  =&gt; 200,\n        'crop'    =&gt; 'fill',\n        'quality' =&gt; '80',\n        'gravity' =&gt; 'face',\n    ),\n    'file_name' =&gt; 'dynamic-file-name',\n) );\n\n$url_2 = cloudinary_url( 'https://www.yourwebsite.com/wp-content/uploads/2017/12/my-image.jpg', array(\n    'transform' =&gt; array(\n        'width'   =&gt; 100,\n        'height'  =&gt; 100,\n    ),\n) );\n\n// $url_1 : https://res.cloudinary.com/cloud-name/images/w_300,h_200,c_fill,q_80,g_face/auto-mapping-folder/2017/12/my-image/dynamic-file-name.jpg\n// $url_2 : https://res.cloudinary.com/cloud-name/w_100,h_100/auto-mapping-folder/2017/12/my-image.jpg\n?&gt;\n\n&lt;img src=\"&lt;?php echo esc_url( $url_1 ); ?&gt;\" width=\"300\" height=\"200\" alt=\"\"&gt;\n&lt;img src=\"&lt;?php echo esc_url( $url_2 ); ?&gt;\" width=\"100\" height=\"100\" alt=\"\"&gt;\n</code></pre>\n",
        "installation": "<p>Upload &#8216;auto-cloudinary&#8217; to the &#8216;/wp-content/plugins/&#8217; directory.</p>\n<p>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress.</p>\n",
        "changelog": "<h4>1.3.0</h4>\n<ul>\n<li>Better handling of soft crops <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/41\" rel=\"nofollow ugc\">#41</a></li>\n</ul>\n<h4>1.2.3</h4>\n<ul>\n<li>Fixed missing admin settings page <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/32\" rel=\"nofollow ugc\">#32</a></li>\n</ul>\n<h4>1.2.2</h4>\n<ul>\n<li>Re-opened and fixed &#8220;Fix images sizes in block editor&#8221; <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/25\" rel=\"nofollow ugc\">#25</a></li>\n</ul>\n<h4>1.2.1</h4>\n<ul>\n<li>Fix images sizes in block editor <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/25\" rel=\"nofollow ugc\">#25</a></li>\n</ul>\n<h4>1.2.0</h4>\n<ul>\n<li>Turn off Cloudinary URLs for REST API calls <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/18\" rel=\"nofollow ugc\">#18</a></li>\n<li>Added progressive image loading parameter <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/20\" rel=\"nofollow ugc\">#20</a></li>\n<li>Full release details: <a href=\"https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.2.0\" rel=\"nofollow ugc\">https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.2.0</a></li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Better AJAX support <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/13\" rel=\"nofollow ugc\">#13</a></li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Added default crop options to the WP Admin <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/10\" rel=\"nofollow ugc\">#10</a></li>\n<li>Full release details: <a href=\"https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.1.0\" rel=\"nofollow ugc\">https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.1.0</a></li>\n</ul>\n<h4>1.0.3</h4>\n<ul>\n<li>New filters for default hard and soft crops <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/2\" rel=\"nofollow ugc\">#2</a>. Props <a href=\"https://github.com/petersplugins\" rel=\"nofollow ugc\">@petersplugins</a></li>\n<li>Performance improvements</li>\n<li>Full release details: <a href=\"https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.0.3\" rel=\"nofollow ugc\">https://github.com/junaidbhura/auto-cloudinary/releases/tag/1.0.3</a></li>\n</ul>\n<h4>1.0.2</h4>\n<ul>\n<li>Remove empty width and height from URL <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues/1\" rel=\"nofollow ugc\">#1</a></li>\n</ul>\n<h4>1.0.1</h4>\n<ul>\n<li>Add default crop to replaced content images.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>First stable release.</li>\n</ul>\n"
    },
    "short_description": "Super simple Cloudinary auto-upload implementation for WordPress.",
    "description": "<p><a href=\"https://github.com/junaidbhura/auto-cloudinary\" rel=\"nofollow ugc\">Check out the Github Repository ‚ô•</a></p>\n<p>This plugin provides a <strong>super simple</strong> <a href=\"https://cloudinary.com/documentation/fetch_remote_images#auto_upload_remote_resources\" rel=\"nofollow ugc\">Cloudinary auto-upload</a> implementation for WordPress.</p>\n<p>It is inspired by <a href=\"https://developer.wordpress.com/docs/photon/\" rel=\"nofollow ugc\">Photon</a> and <a href=\"https://github.com/humanmade/tachyon-plugin\" rel=\"nofollow ugc\">Tachyon</a>.</p>\n<p>Cloudinary will <strong>automatically fetch and serve the images</strong> from your media library like a <strong>CDN</strong>, without you having to worry about the complicated upload API! Just <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Setup\" rel=\"nofollow ugc\">set up auto-upload</a> in your Cloudinary settings, enter the details in the plugin&#8217;s options, and you&#8217;re all set!</p>\n<p>Easy peasy üòé</p>\n<h3>Important</h3>\n<p>This plugin is <strong>incompatible with the official Cloudinary plugin</strong>. You&#8217;d need to disable that plugin before using this one.</p>\n<h3>Quick Links</h3>\n<p><a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Setup\" rel=\"nofollow ugc\">Setup</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/issues\" rel=\"nofollow ugc\">Issues</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Functions\" rel=\"nofollow ugc\">Functions</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Filters\" rel=\"nofollow ugc\">Filters</a> | <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Best-Practices\" rel=\"nofollow ugc\">Best Practices</a></p>\n<h3>Why did you build this plugin?</h3>\n<p>There already is an <strong>official Cloudinary plugin</strong> available. But in my opinion, it&#8217;s a bit of an overkill and takes over the admin UI. This plugin aims to be:</p>\n<ul>\n<li><strong>Super simple</strong> and light-weight</li>\n<li>Totally seamless and <strong>out of the way</strong></li>\n<li>A flexible tool for <strong>WordPress developers</strong></li>\n</ul>\n<h3>What is Cloudinary Auto-Upload?</h3>\n<p>Cloudinary gives you two options to upload files to it&#8217;s servers:</p>\n<ol>\n<li>The complicated <strong>Upload API</strong> üò±</li>\n<li>The super easy and magical <strong>Fetch API</strong> üé©</li>\n</ol>\n<h4>Upload API</h4>\n<p><em>TL;DR: Too complicated and in the way</em> üëé</p>\n<p>Cloudinary gives you an API, using which, you can manually upload the images to Cloudinary. So you&#8217;d need an <strong>API key</strong>, etc. The <strong>official plugin</strong> uses this method. When you upload an image to the media library, it in turn, uploads it to Cloudinary. This could be a problem if you have thousands of <strong>existing images</strong>, and might not be flexible enough to support <strong>custom architecture</strong>.</p>\n<h4>Fetch API</h4>\n<p><em>TL;DR: Magical</em> üëç</p>\n<p>This plugin uses the super easy <strong>Auto-Upload</strong> feature in the <strong>Fetch API</strong>. We just tell Cloudinary where to find the files on our server (or on S3 or anywhere on the Internet), and it <strong>automatically downloads</strong> it from there and saves it on to it&#8217;s servers the <strong>first time you ask for it</strong>, like a CDN would!</p>\n<h3>What does this plugin do?</h3>\n<p>This plugin does two main things:</p>\n<ol>\n<li>Provides a simple function <code>cloudinary_url()</code> to get a Cloudinary auto-upload URL for any image in your media library, with all the Cloudinary transformations, so you can <strong>dynamically manipulate an image on the fly</strong>.</li>\n<li>Attempts to automatically convert all image URLs on the front-end into a Cloudinary auto-upload URL, so you can <strong>use Cloudinary as an image CDN</strong>.</li>\n</ol>\n<h3>The magical function üé©</h3>\n<p><strong><code>cloudinary_url( $identifier, $args )</code></strong></p>\n<p>This function returns a Cloudinary Auto Upload URL for an image. Please read the <a href=\"https://github.com/junaidbhura/auto-cloudinary/wiki/Best-Practices\" rel=\"nofollow ugc\">Best Practices</a> page before using this.</p>\n<h4>Parameters</h4>\n<ul>\n<li><strong>identifier</strong> (integer/string)(required) : Either the ID of the attachment, or a full image URL.</li>\n<li><strong>args</strong> (array)(optional) : Arguments to manipulate the image.</li>\n</ul>\n<h4>Return Value</h4>\n<p>Returns a URL (string):</p>\n<pre><code>'https://res.cloudinary.com/cloud-name/auto-mapping-folder/2017/12/your-image.jpg'\n</code></pre>\n<h4>Arguments</h4>\n<p>You can optionally send an array of arguments which can transform the image, and set a dynamic file name. Ex:</p>\n<pre><code>array(\n    'transform' =&gt; array( // Optional. All transformations go here.\n        'width'   =&gt; 300,\n        'height'  =&gt; 200,\n        'crop'    =&gt; 'fill',\n        'quality' =&gt; '80',\n        'gravity' =&gt; 'face',\n    ),\n    'file_name' =&gt; 'whatever-file-name-you-want', // Optional. If you want to use a dynamic file name for SEO. Don't use the file extension!\n);\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://cloudinary.com/documentation/image_transformations\" rel=\"nofollow ugc\">full list of transformations</a> you can achieve with Cloudinary.</p>\n<h3>Examples</h3>\n<pre><code>&lt;?php\n$url_1 = cloudinary_url( 123, array(\n    'transform' =&gt; array(\n        'width'   =&gt; 300,\n        'height'  =&gt; 200,\n        'crop'    =&gt; 'fill',\n        'quality' =&gt; '80',\n        'gravity' =&gt; 'face',\n    ),\n    'file_name' =&gt; 'dynamic-file-name',\n) );\n\n$url_2 = cloudinary_url( 'https://www.yourwebsite.com/wp-content/uploads/2017/12/my-image.jpg', array(\n    'transform' =&gt; array(\n        'width'   =&gt; 100,\n        'height'  =&gt; 100,\n    ),\n) );\n\n// $url_1 : https://res.cloudinary.com/cloud-name/images/w_300,h_200,c_fill,q_80,g_face/auto-mapping-folder/2017/12/my-image/dynamic-file-name.jpg\n// $url_2 : https://res.cloudinary.com/cloud-name/w_100,h_100/auto-mapping-folder/2017/12/my-image.jpg\n?&gt;\n\n&lt;img src=\"&lt;?php echo esc_url( $url_1 ); ?&gt;\" width=\"300\" height=\"200\" alt=\"\"&gt;\n&lt;img src=\"&lt;?php echo esc_url( $url_2 ); ?&gt;\" width=\"100\" height=\"100\" alt=\"\"&gt;\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.3.1.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/auto-cloudinary/trunk/screenshot-1.png?rev=3107989",
            "caption": "WordPress Options"
        },
        {
            "src": "https://ps.w.org/auto-cloudinary/trunk/screenshot-2.png?rev=3107989",
            "caption": "Cloudinary Cloud Name"
        },
        {
            "src": "https://ps.w.org/auto-cloudinary/trunk/screenshot-3.png?rev=3107989",
            "caption": "Cloudinary Auto Upload Setup"
        }
    ],
    "tags": {
        "cdn": "cdn",
        "cloudinary": "cloudinary",
        "dynamic-images": "dynamic images",
        "image-manipulation": "image manipulation",
        "image-optimization": "image optimization"
    },
    "stable_tag": "1.3.1",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.0.1.zip",
        "1.0.2": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.0.2.zip",
        "1.0.3": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.0.3.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.1.1.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.2.1.zip",
        "1.2.2": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.2.2.zip",
        "1.2.3": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.2.3.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.3.0.zip",
        "1.3.1": "https://downloads.wordpress.org/plugin/auto-cloudinary.1.3.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/auto-cloudinary.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/auto-cloudinary/assets/banner-772x250.png?rev=1765596",
        "high": "https://ps.w.org/auto-cloudinary/assets/banner-1544x500.png?rev=1765596"
    },
    "icons": {
        "1x": "https://ps.w.org/auto-cloudinary/assets/icon.svg?rev=1765596",
        "svg": "https://ps.w.org/auto-cloudinary/assets/icon.svg?rev=1765596"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 86,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}