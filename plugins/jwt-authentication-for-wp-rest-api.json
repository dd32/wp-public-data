{
    "name": "JWT Authentication for WP REST API",
    "slug": "jwt-authentication-for-wp-rest-api",
    "version": "1.3.4",
    "author": "<a href=\"https://enriquechavez.co\">Enrique Chavez</a>",
    "author_profile": "https://profiles.wordpress.org/tmeister/",
    "contributors": {
        "tmeister": {
            "profile": "https://profiles.wordpress.org/tmeister/",
            "avatar": "https://secure.gravatar.com/avatar/f9d608c51449caa559c83d7ae68a8e53?s=96&d=monsterid&r=g",
            "display_name": "Tmeister"
        }
    },
    "requires": "4.2",
    "tested": "6.6.1",
    "requires_php": "7.4.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 88,
    "ratings": {
        "5": 36,
        "4": 2,
        "3": 2,
        "2": 1,
        "1": 4
    },
    "num_ratings": 45,
    "support_url": "https://wordpress.org/support/plugin/jwt-authentication-for-wp-rest-api/",
    "support_threads": 1,
    "support_threads_resolved": 0,
    "active_installs": 50000,
    "downloaded": 587710,
    "last_updated": "2024-08-15 16:36:00",
    "added": "2015-09-05",
    "homepage": "https://enriquechavez.co",
    "sections": {
        "description": "<p>Extends the WP REST API using JSON Web Tokens Authentication as an authentication method.</p>\n<p>JSON Web Tokens are an open, industry standard <a href=\"https://tools.ietf.org/html/rfc7519\" rel=\"nofollow ugc\">RFC 7519</a> method for representing claims securely between two parties.</p>\n<p><strong>Support and Requests please in Github:</strong> https://github.com/Tmeister/wp-api-jwt-auth</p>\n<h3>REQUIREMENTS</h3>\n<h4>WP REST API V2</h4>\n<p>This plugin was conceived to extend the <a href=\"https://github.com/WP-API/WP-API\" rel=\"nofollow ugc\">WP REST API V2</a> plugin features and, of course, was built on top of it.</p>\n<p>So, to use the <strong>wp-api-jwt-auth</strong> you need to install and activate <a href=\"https://github.com/WP-API/WP-API\" rel=\"nofollow ugc\">WP REST API</a>.</p>\n<h3>PHP</h3>\n<p><strong>Minimum PHP version: 7.4.0</strong></p>\n<h3>PHP HTTP Authorization Header enable</h3>\n<p>Most of the shared hosting has disabled the <strong>HTTP Authorization Header</strong> by default.</p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n</code></pre>\n<h4>WPENGINE</h4>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<p>See https://github.com/Tmeister/wp-api-jwt-auth/issues/1</p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n</code></pre>\n<h3>CONFIGURATION</h3>\n<h3>Configurate the Secret Key</h3>\n<p>The JWT needs a <strong>secret key</strong> to sign the token this <strong>secret key</strong> must be unique and never revealed.</p>\n<p>To add the <strong>secret key</strong> edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_SECRET_KEY</strong></p>\n<pre><code>define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key');\n</code></pre>\n<p>You can use a string from here https://api.wordpress.org/secret-key/1.1/salt/</p>\n<h3>Configurate CORs Support</h3>\n<p>The <strong>wp-api-jwt-auth</strong> plugin has the option to activate <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs</a> support.</p>\n<p>To enable the CORs Support edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_CORS_ENABLE</strong></p>\n<pre><code>define('JWT_AUTH_CORS_ENABLE', true);\n</code></pre>\n<p>Finally activate the plugin within your wp-admin.</p>\n<h3>Namespace and Endpoints</h3>\n<p>When the plugin is activated, a new namespace is added</p>\n<pre><code>/jwt-auth/v1\n</code></pre>\n<p>Also, two new endpoints are added to this namespace</p>\n<p>Endpoint | HTTP Verb<br />\n<em>/wp-json/jwt-auth/v1/token</em> | POST<br />\n<em>/wp-json/jwt-auth/v1/token/validate</em> | POST</p>\n<h3>USAGE</h3>\n<h3>/wp-json/jwt-auth/v1/token</h3>\n<p>This is the entry point for the JWT Authentication.</p>\n<p>Validates the user credentials, <em>username</em> and <em>password</em>, and returns a token to use in a future request to the API if the authentication is correct or error if the authentication fails.</p>\n<h4>Sample request using AngularJS</h4>\n<pre><code>( function() {\n\n  var app = angular.module( 'jwtAuth', [] );\n\n  app.controller( 'MainController', function( $scope, $http ) {\n\n    var apiHost = 'http://yourdomain.com/wp-json';\n\n    $http.post( apiHost + '/jwt-auth/v1/token', {\n        username: 'admin',\n        password: 'password'\n      } )\n\n      .then( function( response ) {\n        console.log( response.data )\n      } )\n\n      .catch( function( error ) {\n        console.error( 'Error', error.data[0] );\n      } );\n\n  } );\n\n} )();\n</code></pre>\n<p>Success response from the server</p>\n<pre><code>{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9qd3QuZGV2IiwiaWF0IjoxNDM4NTcxMDUwLCJuYmYiOjE0Mzg1NzEwNTAsImV4cCI6MTQzOTE3NTg1MCwiZGF0YSI6eyJ1c2VyIjp7ImlkIjoiMSJ9fX0.YNe6AyWW4B7ZwfFE5wJ0O6qQ8QFcYizimDmBy6hCH_8\",\n    \"user_display_name\": \"admin\",\n    \"user_email\": \"admin@localhost.dev\",\n    \"user_nicename\": \"admin\"\n}\n</code></pre>\n<p>Error response from the server</p>\n<pre><code>{\n    \"code\": \"jwt_auth_failed\",\n    \"data\": {\n        \"status\": 403\n    },\n    \"message\": \"Invalid Credentials.\"\n}\n</code></pre>\n<p>Once you get the token, you must store it somewhere in your application, ex. in a <strong>cookie</strong> or using <strong>localstorage</strong>.</p>\n<p>From this point, you should pass this token to every API call</p>\n<p>Sample call using the Authorization header using AngularJS</p>\n<pre><code>app.config( function( $httpProvider ) {\n  $httpProvider.interceptors.push( [ '$q', '$location', '$cookies', function( $q, $location, $cookies ) {\n    return {\n      'request': function( config ) {\n        config.headers = config.headers || {};\n        //Assume that you store the token in a cookie.\n        var globals = $cookies.getObject( 'globals' ) || {};\n        //If the cookie has the CurrentUser and the token\n        //add the Authorization header in each request\n        if ( globals.currentUser &amp;&amp; globals.currentUser.token ) {\n          config.headers.Authorization = 'Bearer ' + globals.currentUser.token;\n        }\n        return config;\n      }\n    };\n  } ] );\n} );\n</code></pre>\n<p>The <strong>wp-api-jwt-auth</strong> will intercept every call to the server and will look for the Authorization Header, if the Authorization header is present will try to decode the token and will set the user according with the data stored in it.</p>\n<p>If the token is valid, the API call flow will continue as always.</p>\n<p><strong>Sample Headers</strong></p>\n<pre><code>POST /resource HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer mF_s9.B5f-4.1JqM\n</code></pre>\n<h3>ERRORS</h3>\n<p>If the token is invalid an error will be returned, here are some samples of errors.</p>\n<p><strong>Invalid Credentials</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_failed\",\n    \"message\": \"Invalid Credentials.\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<p><strong>Invalid Signature</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Signature verification failed\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<p><strong>Expired Token</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Expired token\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<h3>/wp-json/jwt-auth/v1/token/validate</h3>\n<p>This is a simple helper endpoint to validate a token; you only will need to make a POST request sending the Authorization header.</p>\n<p>Valid Token Response</p>\n<pre><code>{\n  \"code\": \"jwt_auth_valid_token\",\n  \"data\": {\n    \"status\": 200\n  }\n}\n</code></pre>\n<h3>AVAILABLE HOOKS</h3>\n<p>The <strong>wp-api-jwt-auth</strong> is dev friendly and has five filters available to override the default settings.</p>\n<h4>jwt_auth_cors_allow_headers</h4>\n<p>The <strong>jwt_auth_cors_allow_headers</strong> allows you to modify the available headers when the CORs support is enabled.</p>\n<p>Default Value:</p>\n<pre><code>'Access-Control-Allow-Headers, Content-Type, Authorization'\n</code></pre>\n<h3>jwt_auth_not_before</h3>\n<p>The <strong>jwt_auth_not_before</strong> allows you to change the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.5\" rel=\"nofollow ugc\"><strong>nbf</strong></a> value before the token is created.</p>\n<p>Default Value:</p>\n<pre><code>Creation time - time()\n</code></pre>\n<h3>jwt_auth_expire</h3>\n<p>The <strong>jwt_auth_expire</strong> allows you to change the value <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.4\" rel=\"nofollow ugc\"><strong>exp</strong></a> before the token is created.</p>\n<p>Default Value:</p>\n<pre><code>time() + (DAY_IN_SECONDS * 7)\n</code></pre>\n<h3>jwt_auth_token_before_sign</h3>\n<p>The <strong>jwt_auth_token_before_sign</strong> allows you to modify all the token data before to be encoded and signed.</p>\n<p>Default Value</p>\n<pre><code>&lt;?php\n$token = array(\n    'iss' =&gt; get_bloginfo('url'),\n    'iat' =&gt; $issuedAt,\n    'nbf' =&gt; $notBefore,\n    'exp' =&gt; $expire,\n    'data' =&gt; array(\n        'user' =&gt; array(\n            'id' =&gt; $user-&gt;data-&gt;ID,\n        )\n    )\n);\n</code></pre>\n<h3>jwt_auth_token_before_dispatch</h3>\n<p>The <strong>jwt_auth_token_before_dispatch</strong> allows you to modify all the response array before to dispatch it to the client.</p>\n<p>Default Value:</p>\n<pre><code>&lt;?php\n$data = array(\n    'token' =&gt; $token,\n    'user_email' =&gt; $user-&gt;data-&gt;user_email,\n    'user_nicename' =&gt; $user-&gt;data-&gt;user_nicename,\n    'user_display_name' =&gt; $user-&gt;data-&gt;display_name,\n);\n</code></pre>\n<h3>jwt_auth_algorithm</h3>\n<p>The <strong>jwt_auth_algorithm</strong> allows you to modify the signing algorithm.</p>\n<p>Default value:</p>\n<pre><code>&lt;?php\n$token = JWT::encode(\n    apply_filters('jwt_auth_token_before_sign', $token, $user),\n    $secret_key,\n    apply_filters('jwt_auth_algorithm', 'HS256')\n);\n\n// ...\n\n$token = JWT::decode(\n    $token,\n    new Key($secret_key, apply_filters('jwt_auth_algorithm', 'HS256'))\n);\n</code></pre>\n<h3>Testing</h3>\n<p>I&#8217;ve created a small app to test the basic functionality of the plugin; you can get the app and read all the details on the <a href=\"https://github.com/Tmeister/jwt-client\" rel=\"nofollow ugc\">JWT-Client Repo</a></p>\n",
        "installation": "<h4>Using The WordPress Dashboard</h4>\n<ol>\n<li>Navigate to the &#8216;Add New&#8217; in the plugins dashboard</li>\n<li>Search for &#8216;jwt-authentication-for-wp-rest-api&#8217;</li>\n<li>Click &#8216;Install Now&#8217;</li>\n<li>Activate the plugin on the Plugin dashboard</li>\n</ol>\n<h4>Uploading in WordPress Dashboard</h4>\n<ol>\n<li>Navigate to the &#8216;Add New&#8217; in the plugins dashboard</li>\n<li>Navigate to the &#8216;Upload&#8217; area</li>\n<li>Select <code>jwt-authentication-for-wp-rest-api.zip</code> from your computer</li>\n<li>Click &#8216;Install Now&#8217;</li>\n<li>Activate the plugin in the Plugin dashboard</li>\n</ol>\n<h3>Please read how to configured the plugin https://wordpress.org/plugins/jwt-authentication-for-wp-rest-api/</h3>\n",
        "changelog": "<h4>1.3.4</h4>\n<ul>\n<li>Fix: Skip any type of validation when the authorization header is not Bearer.</li>\n<li>Feature: Added a setting page to share data and add information about the plugin.</li>\n</ul>\n<h4>1.3.3</h4>\n<ul>\n<li>Update php-jwt to 6.4.0</li>\n<li>Fix php warnings (https://github.com/Tmeister/wp-api-jwt-auth/pull/259)</li>\n<li>Fix the condition where it checks if the request is a REST Request (https://github.com/Tmeister/wp-api-jwt-auth/pull/256)</li>\n</ul>\n<h4>1.3.2</h4>\n<ul>\n<li>Fix conflicts with other plugins using the same JWT library adding a wrapper namespace to the JWT class.</li>\n</ul>\n<h4>1.3.1</h4>\n<ul>\n<li>Updating the minimum version of PHP to 7.4</li>\n<li>Validate the signing algorithm against the supported algorithms @see https://www.rfc-editor.org/rfc/rfc7518#section-3</li>\n<li>Sanitize the REQUEST_URI and HTTP_AUTHORIZATION values before to use them</li>\n<li>Use get_header() instead of $_SERVER to get the Authorization header when possible</li>\n<li>Added typed properties to the JWT_Auth class where possible</li>\n<li>Along with this release, I release a new simple JWT Client App for testing purposes @see https://github.com/Tmeister/jwt-client</li>\n</ul>\n<h4>1.3.0</h4>\n<ul>\n<li>Update firebase/php-jwt to 6.3</li>\n<li>Fix warning, register_rest_route was called incorrectly</li>\n<li>Allow for Basic Auth, by not attempting to validate Authentication Headers if a valid user has already been determined (see: https://github.com/Tmeister/wp-api-jwt-auth/issues/241)</li>\n<li>Added a new filter (jwt_auth_algorithm) to allow for customizing the algorithm used for signing the token</li>\n<li>Props: https://github.com/bradmkjr</li>\n</ul>\n<h4>1.2.6</h4>\n<ul>\n<li>Cookies &amp;&amp; Token compatibility</li>\n<li>Fix the root problem with gutenberg infinite loops and allow the token validation/generation if the WP cookie exists.</li>\n<li>More info (https://github.com/Tmeister/wp-api-jwt-auth/pull/138)</li>\n<li>Props: https://github.com/andrzejpiotrowski</li>\n</ul>\n<h4>1.2.5</h4>\n<ul>\n<li>Add Gutenberg Compatibility</li>\n<li>More info (https://github.com/Tmeister/wp-api-jwt-auth/issues/126)</li>\n</ul>\n<h4>1.2.4</h4>\n<ul>\n<li>Update firebase/php-jwt to v5.0.0 ( https://github.com/firebase/php-jwt )</li>\n<li>Add Requires PHP Tag</li>\n</ul>\n<h4>1.2.3</h4>\n<ul>\n<li>Fix Max recursion error in WordPress 4.7 #44</li>\n</ul>\n<h4>1.2.2</h4>\n<ul>\n<li>Add an extra validation to get the Authorization header</li>\n<li>Increase determine_current_user priority Fix #13</li>\n<li>Add the user object as parameter in the jwt_auth_token_before_sign hook</li>\n<li>Improve error message when auth fails #34</li>\n<li>Tested with 4.6.1</li>\n</ul>\n<h4>1.2.0</h4>\n<ul>\n<li>Tested with 4.4.2</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial Release.</li>\n</ul>\n"
    },
    "short_description": "Extends the WP REST API using JSON Web Tokens Authentication as an authentication method.",
    "description": "<p>Extends the WP REST API using JSON Web Tokens Authentication as an authentication method.</p>\n<p>JSON Web Tokens are an open, industry standard <a href=\"https://tools.ietf.org/html/rfc7519\" rel=\"nofollow ugc\">RFC 7519</a> method for representing claims securely between two parties.</p>\n<p><strong>Support and Requests please in Github:</strong> https://github.com/Tmeister/wp-api-jwt-auth</p>\n<h3>REQUIREMENTS</h3>\n<h4>WP REST API V2</h4>\n<p>This plugin was conceived to extend the <a href=\"https://github.com/WP-API/WP-API\" rel=\"nofollow ugc\">WP REST API V2</a> plugin features and, of course, was built on top of it.</p>\n<p>So, to use the <strong>wp-api-jwt-auth</strong> you need to install and activate <a href=\"https://github.com/WP-API/WP-API\" rel=\"nofollow ugc\">WP REST API</a>.</p>\n<h3>PHP</h3>\n<p><strong>Minimum PHP version: 7.4.0</strong></p>\n<h3>PHP HTTP Authorization Header enable</h3>\n<p>Most of the shared hosting has disabled the <strong>HTTP Authorization Header</strong> by default.</p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n</code></pre>\n<h4>WPENGINE</h4>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess</strong> file adding the follow</p>\n<p>See https://github.com/Tmeister/wp-api-jwt-auth/issues/1</p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n</code></pre>\n<h3>CONFIGURATION</h3>\n<h3>Configurate the Secret Key</h3>\n<p>The JWT needs a <strong>secret key</strong> to sign the token this <strong>secret key</strong> must be unique and never revealed.</p>\n<p>To add the <strong>secret key</strong> edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_SECRET_KEY</strong></p>\n<pre><code>define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key');\n</code></pre>\n<p>You can use a string from here https://api.wordpress.org/secret-key/1.1/salt/</p>\n<h3>Configurate CORs Support</h3>\n<p>The <strong>wp-api-jwt-auth</strong> plugin has the option to activate <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs</a> support.</p>\n<p>To enable the CORs Support edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_CORS_ENABLE</strong></p>\n<pre><code>define('JWT_AUTH_CORS_ENABLE', true);\n</code></pre>\n<p>Finally activate the plugin within your wp-admin.</p>\n<h3>Namespace and Endpoints</h3>\n<p>When the plugin is activated, a new namespace is added</p>\n<pre><code>/jwt-auth/v1\n</code></pre>\n<p>Also, two new endpoints are added to this namespace</p>\n<p>Endpoint | HTTP Verb<br />\n<em>/wp-json/jwt-auth/v1/token</em> | POST<br />\n<em>/wp-json/jwt-auth/v1/token/validate</em> | POST</p>\n<h3>USAGE</h3>\n<h3>/wp-json/jwt-auth/v1/token</h3>\n<p>This is the entry point for the JWT Authentication.</p>\n<p>Validates the user credentials, <em>username</em> and <em>password</em>, and returns a token to use in a future request to the API if the authentication is correct or error if the authentication fails.</p>\n<h4>Sample request using AngularJS</h4>\n<pre><code>( function() {\n\n  var app = angular.module( 'jwtAuth', [] );\n\n  app.controller( 'MainController', function( $scope, $http ) {\n\n    var apiHost = 'http://yourdomain.com/wp-json';\n\n    $http.post( apiHost + '/jwt-auth/v1/token', {\n        username: 'admin',\n        password: 'password'\n      } )\n\n      .then( function( response ) {\n        console.log( response.data )\n      } )\n\n      .catch( function( error ) {\n        console.error( 'Error', error.data[0] );\n      } );\n\n  } );\n\n} )();\n</code></pre>\n<p>Success response from the server</p>\n<pre><code>{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9qd3QuZGV2IiwiaWF0IjoxNDM4NTcxMDUwLCJuYmYiOjE0Mzg1NzEwNTAsImV4cCI6MTQzOTE3NTg1MCwiZGF0YSI6eyJ1c2VyIjp7ImlkIjoiMSJ9fX0.YNe6AyWW4B7ZwfFE5wJ0O6qQ8QFcYizimDmBy6hCH_8\",\n    \"user_display_name\": \"admin\",\n    \"user_email\": \"admin@localhost.dev\",\n    \"user_nicename\": \"admin\"\n}\n</code></pre>\n<p>Error response from the server</p>\n<pre><code>{\n    \"code\": \"jwt_auth_failed\",\n    \"data\": {\n        \"status\": 403\n    },\n    \"message\": \"Invalid Credentials.\"\n}\n</code></pre>\n<p>Once you get the token, you must store it somewhere in your application, ex. in a <strong>cookie</strong> or using <strong>localstorage</strong>.</p>\n<p>From this point, you should pass this token to every API call</p>\n<p>Sample call using the Authorization header using AngularJS</p>\n<pre><code>app.config( function( $httpProvider ) {\n  $httpProvider.interceptors.push( [ '$q', '$location', '$cookies', function( $q, $location, $cookies ) {\n    return {\n      'request': function( config ) {\n        config.headers = config.headers || {};\n        //Assume that you store the token in a cookie.\n        var globals = $cookies.getObject( 'globals' ) || {};\n        //If the cookie has the CurrentUser and the token\n        //add the Authorization header in each request\n        if ( globals.currentUser &amp;&amp; globals.currentUser.token ) {\n          config.headers.Authorization = 'Bearer ' + globals.currentUser.token;\n        }\n        return config;\n      }\n    };\n  } ] );\n} );\n</code></pre>\n<p>The <strong>wp-api-jwt-auth</strong> will intercept every call to the server and will look for the Authorization Header, if the Authorization header is present will try to decode the token and will set the user according with the data stored in it.</p>\n<p>If the token is valid, the API call flow will continue as always.</p>\n<p><strong>Sample Headers</strong></p>\n<pre><code>POST /resource HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer mF_s9.B5f-4.1JqM\n</code></pre>\n<h3>ERRORS</h3>\n<p>If the token is invalid an error will be returned, here are some samples of errors.</p>\n<p><strong>Invalid Credentials</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_failed\",\n    \"message\": \"Invalid Credentials.\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<p><strong>Invalid Signature</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Signature verification failed\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<p><strong>Expired Token</strong></p>\n<pre><code>[\n  {\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Expired token\",\n    \"data\": {\n      \"status\": 403\n    }\n  }\n]\n</code></pre>\n<h3>/wp-json/jwt-auth/v1/token/validate</h3>\n<p>This is a simple helper endpoint to validate a token; you only will need to make a POST request sending the Authorization header.</p>\n<p>Valid Token Response</p>\n<pre><code>{\n  \"code\": \"jwt_auth_valid_token\",\n  \"data\": {\n    \"status\": 200\n  }\n}\n</code></pre>\n<h3>AVAILABLE HOOKS</h3>\n<p>The <strong>wp-api-jwt-auth</strong> is dev friendly and has five filters available to override the default settings.</p>\n<h4>jwt_auth_cors_allow_headers</h4>\n<p>The <strong>jwt_auth_cors_allow_headers</strong> allows you to modify the available headers when the CORs support is enabled.</p>\n<p>Default Value:</p>\n<pre><code>'Access-Control-Allow-Headers, Content-Type, Authorization'\n</code></pre>\n<h3>jwt_auth_not_before</h3>\n<p>The <strong>jwt_auth_not_before</strong> allows you to change the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.5\" rel=\"nofollow ugc\"><strong>nbf</strong></a> value before the token is created.</p>\n<p>Default Value:</p>\n<pre><code>Creation time - time()\n</code></pre>\n<h3>jwt_auth_expire</h3>\n<p>The <strong>jwt_auth_expire</strong> allows you to change the value <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.4\" rel=\"nofollow ugc\"><strong>exp</strong></a> before the token is created.</p>\n<p>Default Value:</p>\n<pre><code>time() + (DAY_IN_SECONDS * 7)\n</code></pre>\n<h3>jwt_auth_token_before_sign</h3>\n<p>The <strong>jwt_auth_token_before_sign</strong> allows you to modify all the token data before to be encoded and signed.</p>\n<p>Default Value</p>\n<pre><code>&lt;?php\n$token = array(\n    'iss' =&gt; get_bloginfo('url'),\n    'iat' =&gt; $issuedAt,\n    'nbf' =&gt; $notBefore,\n    'exp' =&gt; $expire,\n    'data' =&gt; array(\n        'user' =&gt; array(\n            'id' =&gt; $user-&gt;data-&gt;ID,\n        )\n    )\n);\n</code></pre>\n<h3>jwt_auth_token_before_dispatch</h3>\n<p>The <strong>jwt_auth_token_before_dispatch</strong> allows you to modify all the response array before to dispatch it to the client.</p>\n<p>Default Value:</p>\n<pre><code>&lt;?php\n$data = array(\n    'token' =&gt; $token,\n    'user_email' =&gt; $user-&gt;data-&gt;user_email,\n    'user_nicename' =&gt; $user-&gt;data-&gt;user_nicename,\n    'user_display_name' =&gt; $user-&gt;data-&gt;display_name,\n);\n</code></pre>\n<h3>jwt_auth_algorithm</h3>\n<p>The <strong>jwt_auth_algorithm</strong> allows you to modify the signing algorithm.</p>\n<p>Default value:</p>\n<pre><code>&lt;?php\n$token = JWT::encode(\n    apply_filters('jwt_auth_token_before_sign', $token, $user),\n    $secret_key,\n    apply_filters('jwt_auth_algorithm', 'HS256')\n);\n\n// ...\n\n$token = JWT::decode(\n    $token,\n    new Key($secret_key, apply_filters('jwt_auth_algorithm', 'HS256'))\n);\n</code></pre>\n<h3>Testing</h3>\n<p>I&#8217;ve created a small app to test the basic functionality of the plugin; you can get the app and read all the details on the <a href=\"https://github.com/Tmeister/jwt-client\" rel=\"nofollow ugc\">JWT-Client Repo</a></p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.4.zip",
    "upgrade_notice": {
        "": "<p>.</p>"
    },
    "screenshots": [],
    "tags": {
        "json-web-authentication": "json web authentication",
        "jwt": "jwt",
        "login": "login",
        "wp-api": "wp-api",
        "wp-json": "wp-json"
    },
    "stable_tag": "1.3.4",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.0.0.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.1.zip",
        "1.2.2": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.2.zip",
        "1.2.3": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.3.zip",
        "1.2.4": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.4.zip",
        "1.2.5": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.5.zip",
        "1.2.6": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.2.6.zip",
        "1.3.0": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.0.zip",
        "1.3.1": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.1.zip",
        "1.3.2": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.2.zip",
        "1.3.3": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.3.zip",
        "1.3.4": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.1.3.4.zip",
        "trunk": "https://downloads.wordpress.org/plugin/jwt-authentication-for-wp-rest-api.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://github.com/sponsors/Tmeister",
    "banners": {
        "low": "https://ps.w.org/jwt-authentication-for-wp-rest-api/assets/banner-772x250.jpg?rev=2787935",
        "high": false
    },
    "icons": {
        "1x": "https://ps.w.org/jwt-authentication-for-wp-rest-api/assets/icon.svg?rev=2787935",
        "svg": "https://ps.w.org/jwt-authentication-for-wp-rest-api/assets/icon.svg?rev=2787935"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 88,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}