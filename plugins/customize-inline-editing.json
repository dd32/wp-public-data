{
    "name": "Customize Inline Editing",
    "slug": "customize-inline-editing",
    "version": "0.2.1",
    "author": "<a href=\"https://make.xwp.co\">Weston Ruter, XWP</a>",
    "author_profile": "https://profiles.wordpress.org/westonruter/",
    "contributors": {
        "xwp": {
            "profile": "https://profiles.wordpress.org/xwp/",
            "avatar": "https://secure.gravatar.com/avatar/98d36ee8047719c185f19a00f7184c2c?s=96&d=monsterid&r=g",
            "display_name": "XWP"
        },
        "westonruter": {
            "profile": "https://profiles.wordpress.org/westonruter/",
            "avatar": "https://secure.gravatar.com/avatar/22ed378fbf1d918ef43a45b2a1f34634?s=96&d=monsterid&r=g",
            "display_name": "Weston Ruter"
        }
    },
    "requires": "4.7.0",
    "tested": "4.9.26",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 2,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/customize-inline-editing/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 3683,
    "last_updated": "2024-06-22 9:22pm GMT",
    "added": "2014-09-19",
    "homepage": "",
    "sections": {
        "description": "<p>In WordPress 4.5 the <a href=\"https://make.wordpress.org/core/2016/02/16/selective-refresh-in-the-customizer/\" rel=\"nofollow ugc\">selective refresh</a> framework was introduced in core. One of the key concepts in this framework is the “partial”, the region in a document which is selectively refreshed when a related setting is modified. This means that one or more settings are linked with a given element in the preview. When selective refresh was first was introduced it supported the ability for a user to “shift click” on a partial to jump to and focus on the related control in the pane. In WordPress 4.7 this was then enhanced with <a href=\"https://make.wordpress.org/core/2016/11/10/visible-edit-shortcuts-in-the-customizer-preview/\" rel=\"nofollow ugc\">visible edit shortcuts</a> so that users could click (touch even) on the icon to be able to reveal the control in the pane.</p>\n<p>The Customize Inline Editing plugin builds on edit shortcuts by allowing the setting to be modified inline via direct manipulation in the preview without having focus removed and placed on the controls pane. This is particularly useful on <em>mobile devices</em> on small screens where a user cannot both see the controls and preview at the same time, as can be compared here:</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/w7WfSEtT8pc?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n<p>Inline editing in this way is also helpful for <em>accessibility</em> since keyboard focus remains in the preview at the element being edited, as can be seen in this demonstration of inline editing on a desktop browser:</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/KesM3vo5WyE?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n<p>This plugin provides one example implementation of inline editing this can be accomplished in the customizer. Version 0.1 of this plugin from 2014 was a precursor in some ways to selective refresh, specifically in regards to how CSS selectors are associated with customizer settings.</p>\n<p>Themes can opt-in to support this plugin&#8217;s inline editing within the customizer by assigning the appropriate type to the registered partials:</p>\n<pre>\nadd_action( 'customize_register', function( $wp_customize ) {\n    $opt_in_partials = array_filter( array(\n        $wp_customize-&gt;selective_refresh-&gt;get_partial( 'blogname' ),\n        $wp_customize-&gt;selective_refresh-&gt;get_partial( 'blogdescription' )\n    ) );\n    foreach ( $opt_in_partials as $partial ) {\n        $partial-&gt;type = 'inline_editable';\n    }\n}, 100 );\n</pre>\n<p>Click on the edit shortcut to begin editing the element, with keyboard focus then given to the editable element. If the value has a server-side rendered value (e.g. where PHP filters like <code>wptexturize</code> apply to improve typography), the raw value will be supplied when editing starts. Editing can be completed by clicking out of the editable element, tabbing out of the element (blurring it), or clicking the edit icon which then appears as a “done” checkmark icon. You may also shift-click on an element to edit it.</p>\n<p>Currently only basic text fields can currently be edited; styling and any tags added to <code>contentEditable</code> areas will be stripped out. Eventually rich text formatting may be allowed, specifically for integrations with the Text widget (via <a href=\"https://github.com/xwp/wp-js-widgets\" rel=\"nofollow ugc\">JS Widgets</a>) or post content (via <a href=\"https://github.com/xwp/wp-customize-posts\" rel=\"nofollow ugc\">Customize Posts</a>).</p>\n<p>The <a href=\"https://make.wordpress.org/core/2016/02/16/selective-refresh-in-the-customizer/\" rel=\"nofollow ugc\">selective refresh</a> writeup from 4.5 concludes with a section on a possible future for it and inline editing:</p>\n<blockquote>\n<p>If we can eliminate full-page refreshes from being the norm for the Customizer, we can start to introduce controls inline with the preview. If the entire preview does not reload, then the inline controls won’t get destroyed by the refresh with each change. For example, consider a widget control floating immediately next to the widget in the sidebar it is editing. With selective refresh, it will then also be possible to <em>eliminate the Customizer altogether</em>. The Customizer could be available to anyone who is logged in, with the controls being bootstrapped on demand when a user wants to edit a given element. There would be no need to navigate way from a page on the frontend to enter a unique Customizer state: the Customizer would come to the user. Any controls not relevant to being inline could remain in the Customizer pane, but it could slide in only as needed instead of appearing by default. That is to say, selective refresh makes the Customizer a much better framework for implementing <strong>frontend editing</strong>.</p>\n</blockquote>\n<p><strong>Development of this plugin is done <a href=\"https://github.com/xwp/wp-customize-inline-editing\" rel=\"nofollow ugc\">on GitHub</a>. Pull requests welcome. Please see <a href=\"https://github.com/xwp/wp-customize-inline-editing/issues\" rel=\"nofollow ugc\">issues</a> reported there before going to the <a href=\"https://wordpress.org/support/plugin/customize-inline-editing\" rel=\"ugc\">plugin forum</a>.</strong></p>\n",
        "changelog": "<h4>0.2.1 (2017-08-04)</h4>\n<ul>\n<li>Fix readme and bump tested-up-to.</li>\n</ul>\n<h4>0.2.0 (2017-02-15)</h4>\n<ul>\n<li>Refactor to make use of selective refresh partials.</li>\n<li>Integrate with edit shortcuts so that clicking the edit shortcut causes the text to be editable and turns into a checkmark icon while edit mode is enabled.</li>\n</ul>\n<h4>0.1.3 (2016-07-10)</h4>\n<p>Ensure that any selective refresh partials associated with the edited settings<br />\nwill get re-rendered from the server once editing has finished. Refreshed partials<br />\nwill ensure that the low-fidelity JS-supplied (raw) previews will be replaced with<br />\nthe actual high-fidelity PHP-rendered preview from the server. See also <a href=\"https://core.trac.wordpress.org/ticket/33738\" rel=\"nofollow ugc\">#33738</a>.</p>\n<h4>0.1.2 (2016-07-08)</h4>\n<p>Add support for Twenty Sixteen and ensure compat with WordPress 4.6-beta2</p>\n<h4>0.1.1 (2014-12-12)</h4>\n<p>Add support for Twenty Fifteen and ensure compat with WordPress 4.1</p>\n<h4>0.1.0 (2014-09-19)</h4>\n<p>First release.</p>\n"
    },
    "short_description": "Demonstration of how inline editing can be implemented in the customizer.",
    "description": "<p>In WordPress 4.5 the <a href=\"https://make.wordpress.org/core/2016/02/16/selective-refresh-in-the-customizer/\" rel=\"nofollow ugc\">selective refresh</a> framework was introduced in core. One of the key concepts in this framework is the “partial”, the region in a document which is selectively refreshed when a related setting is modified. This means that one or more settings are linked with a given element in the preview. When selective refresh was first was introduced it supported the ability for a user to “shift click” on a partial to jump to and focus on the related control in the pane. In WordPress 4.7 this was then enhanced with <a href=\"https://make.wordpress.org/core/2016/11/10/visible-edit-shortcuts-in-the-customizer-preview/\" rel=\"nofollow ugc\">visible edit shortcuts</a> so that users could click (touch even) on the icon to be able to reveal the control in the pane.</p>\n<p>The Customize Inline Editing plugin builds on edit shortcuts by allowing the setting to be modified inline via direct manipulation in the preview without having focus removed and placed on the controls pane. This is particularly useful on <em>mobile devices</em> on small screens where a user cannot both see the controls and preview at the same time, as can be compared here:</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/w7WfSEtT8pc?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n<p>Inline editing in this way is also helpful for <em>accessibility</em> since keyboard focus remains in the preview at the element being edited, as can be seen in this demonstration of inline editing on a desktop browser:</p>\n<span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe loading=\"lazy\" class=\"youtube-player\" width=\"750\" height=\"422\" src=\"https://www.youtube.com/embed/KesM3vo5WyE?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox\"></iframe></span>\n<p>This plugin provides one example implementation of inline editing this can be accomplished in the customizer. Version 0.1 of this plugin from 2014 was a precursor in some ways to selective refresh, specifically in regards to how CSS selectors are associated with customizer settings.</p>\n<p>Themes can opt-in to support this plugin&#8217;s inline editing within the customizer by assigning the appropriate type to the registered partials:</p>\n<pre>\nadd_action( 'customize_register', function( $wp_customize ) {\n    $opt_in_partials = array_filter( array(\n        $wp_customize-&gt;selective_refresh-&gt;get_partial( 'blogname' ),\n        $wp_customize-&gt;selective_refresh-&gt;get_partial( 'blogdescription' )\n    ) );\n    foreach ( $opt_in_partials as $partial ) {\n        $partial-&gt;type = 'inline_editable';\n    }\n}, 100 );\n</pre>\n<p>Click on the edit shortcut to begin editing the element, with keyboard focus then given to the editable element. If the value has a server-side rendered value (e.g. where PHP filters like <code>wptexturize</code> apply to improve typography), the raw value will be supplied when editing starts. Editing can be completed by clicking out of the editable element, tabbing out of the element (blurring it), or clicking the edit icon which then appears as a “done” checkmark icon. You may also shift-click on an element to edit it.</p>\n<p>Currently only basic text fields can currently be edited; styling and any tags added to <code>contentEditable</code> areas will be stripped out. Eventually rich text formatting may be allowed, specifically for integrations with the Text widget (via <a href=\"https://github.com/xwp/wp-js-widgets\" rel=\"nofollow ugc\">JS Widgets</a>) or post content (via <a href=\"https://github.com/xwp/wp-customize-posts\" rel=\"nofollow ugc\">Customize Posts</a>).</p>\n<p>The <a href=\"https://make.wordpress.org/core/2016/02/16/selective-refresh-in-the-customizer/\" rel=\"nofollow ugc\">selective refresh</a> writeup from 4.5 concludes with a section on a possible future for it and inline editing:</p>\n<blockquote>\n<p>If we can eliminate full-page refreshes from being the norm for the Customizer, we can start to introduce controls inline with the preview. If the entire preview does not reload, then the inline controls won’t get destroyed by the refresh with each change. For example, consider a widget control floating immediately next to the widget in the sidebar it is editing. With selective refresh, it will then also be possible to <em>eliminate the Customizer altogether</em>. The Customizer could be available to anyone who is logged in, with the controls being bootstrapped on demand when a user wants to edit a given element. There would be no need to navigate way from a page on the frontend to enter a unique Customizer state: the Customizer would come to the user. Any controls not relevant to being inline could remain in the Customizer pane, but it could slide in only as needed instead of appearing by default. That is to say, selective refresh makes the Customizer a much better framework for implementing <strong>frontend editing</strong>.</p>\n</blockquote>\n<p><strong>Development of this plugin is done <a href=\"https://github.com/xwp/wp-customize-inline-editing\" rel=\"nofollow ugc\">on GitHub</a>. Pull requests welcome. Please see <a href=\"https://github.com/xwp/wp-customize-inline-editing/issues\" rel=\"nofollow ugc\">issues</a> reported there before going to the <a href=\"https://wordpress.org/support/plugin/customize-inline-editing\" rel=\"ugc\">plugin forum</a>.</strong></p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.2.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "customize": "customize",
        "customizer": "customizer",
        "editing": "editing",
        "inline": "inline"
    },
    "stable_tag": "0.2.1",
    "versions": {
        "0.1.1": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.1.1.zip",
        "0.1.2": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.1.2.zip",
        "0.1.3": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.1.3.zip",
        "0.2.0": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.2.0.zip",
        "0.2.1": "https://downloads.wordpress.org/plugin/customize-inline-editing.0.2.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/customize-inline-editing.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/customize-inline-editing.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}