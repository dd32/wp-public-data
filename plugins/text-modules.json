{
    "name": "Text Modules",
    "slug": "text-modules",
    "version": "1.0.1",
    "author": "<a href=\"http://ipm-frommen.de/wordpress\">Thorsten Frommen</a>",
    "author_profile": "https://profiles.wordpress.org/tfrommen/",
    "contributors": {
        "ipm-frommen": {
            "profile": "https://profiles.wordpress.org/ipm-frommen/",
            "avatar": "https://secure.gravatar.com/avatar/5635bcc0991f09e5749f6cd15cd7ea2d?s=96&d=monsterid&r=g",
            "display_name": "Thorsten Frommen"
        }
    },
    "requires": "3.0.0",
    "tested": "4.3.34",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 1,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/text-modules/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 60,
    "downloaded": 1765,
    "last_updated": "2015-08-20 12:32am GMT",
    "added": "2015-07-24",
    "homepage": "https://wordpress.org/plugins/text-modules/",
    "sections": {
        "description": "<p><strong>Use the new Text Modules custom post type and display a text module by either shortcode or widget.</strong></p>\n<p>Have you ever wanted to use some pieces of text information more than once? For instance, contact information such as a postal address? Or some slogan, motto or claim?</p>\n<p>This is exactly when <em>Text Modules</em> kicks in.</p>\n<h4>Usage</h4>\n<p>This plugin registers a simple post type for text modules. A text module can be accessed either via shortcode (by means of the text module&#8217;s ID or slug) or via a new Tex Modules widget.</p>\n<p><strong>Filters</strong></p>\n<p>In order to customize certain aspects of the plugin, it provides you with several filters. For each of these, a short description as well as a code example on how to alter the default behavior is given below. Just put the according code snippet in your theme&#8217;s <code>functions.php</code> file or your <em>customization</em> plugin, or to some other appropriate place.</p>\n<p><strong><code>text_modules_after_widget_content</code></strong></p>\n<p>This filter lets you alter the HTML after the widget content.</p>\n<pre><code>/**\n * Filter the HTML after the widget content.\n *\n * @param string $after_widget_content Some HTML after the widget content.\n */\nadd_filter( 'text_modules_after_widget_content', function() {\n\n    return '&lt;!-- End of Text Modules widget content --&gt;';\n} );\n</code></pre>\n<p><strong><code>text_modules_before_widget_content</code></strong></p>\n<p>This filter lets you alter the HTML before the widget content.</p>\n<pre><code>/**\n * Filter the HTML before the widget content.\n *\n * @param string $before_widget_content Some HTML before the widget content.\n */\nadd_filter( 'text_modules_before_widget_content', function() {\n\n    return '&lt;!-- Start of Text Modules widget content --&gt;';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type</code></strong></p>\n<p>Yes, you can alter the post type (slug).</p>\n<pre><code>/**\n * Filter the post type.\n *\n * @param string $post_type Post type.\n */\nadd_filter( 'text_modules_post_type', function() {\n\n    return 'exotic_stuff';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_args</code></strong></p>\n<p>If you want to alter a specific post type argument but you can&#8217;t find a fitting filter, there&#8217;s <code>text_modules_post_type_args</code>, which provides you with the complete args array.</p>\n<pre><code>/**\n * Filter the post type args.\n *\n * @param array $args Post type args.\n */\nadd_filter( 'text_modules_post_type_args', function( $args ) {\n\n    // Use hierarchical external content\n    $args[ 'hierarchical' ] = TRUE;\n\n    return $args;\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_description</code></strong></p>\n<p>The post type description can be customized by using the <code>text_modules_post_type_description</code> filter.</p>\n<pre><code>/**\n * Filter the post type description.\n *\n * @param string $description Post type description.\n */\nadd_filter( 'text_modules_post_type_description', function() {\n\n    // Provide a description\n    return 'Simple post type for text modules.';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_labels</code></strong></p>\n<p>In case you don&#8217;t like the labels, easily adapt them to your liking.</p>\n<pre><code>/**\n * Filter the post type labels.\n *\n * @param array $labels Post type labels.\n */\nadd_filter( 'text_modules_post_type_labels', function( $labels ) {\n\n    // A little more horror, please...\n    $labels[ 'not_found' ] = 'ZOMG, no text module found!!1!!1!!oneone!!!1!eleven!1!';\n\n    return $labels;\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_supports</code></strong></p>\n<p>This filter provides you with the post type supports.</p>\n<pre><code>/**\n * Filter the post type supports.\n *\n * @param array $supports Post type supports.\n */\nadd_filter( 'text_modules_post_type_supports', function( $supports ) {\n\n    // Let's add revisions for our post type\n    if ( ! in_array( 'revisions', $supports ) ) {\n        $supports[] = 'revisions';\n    }\n\n    return $supports;\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_apply_do_shortcode</code></strong></p>\n<p>By default, do_shortcode() will be called on the shortcode output. Of course, you can change that.</p>\n<pre><code>/**\n * Filter if the shortcode should apply do_shortcode() to the output.\n *\n * @param bool $do_shortcode Should the shortcode apply do_shortcode()?\n */\nadd_filter( 'text_modules_shortcode_apply_do_shortcode', '__return_false' );\n</code></pre>\n<p><strong><code>text_modules_shortcode_callback</code></strong></p>\n<p>In case you would like to adapt how the shortcode data is handled, you can provide your own shortcode callback. This can either be a string holding the function name, or an array with either a class name or an object, and the according method.</p>\n<pre><code>/**\n * Filter the shortcode callback.\n *\n * @param array|string $callback Shortcode callback.\n */\nadd_filter( 'text_modules_shortcode_callback', function() {\n\n    return 'my_text_modules_shortcode_callback';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_id_attribute_name</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s &#8216;id&#8217; attribute name.</p>\n<pre><code>/**\n * Filter the 'id' shortcode attribute name.\n *\n * @param string $name Attribute name.\n */\nadd_filter( 'text_modules_shortcode_id_attribute_name', function() {\n\n    return 'post_id';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_output</code></strong></p>\n<p>This filter lets you alter the shortcode output. The second parameter holds the shortcode attributes array.</p>\n<pre><code>/**\n * Filter the shortcode output.\n *\n * @param string $output Shortcode output.\n * @param array  $atts   Shortcode attributes array.\n */\nadd_filter( 'text_modules_shortcode_output', function( $output ) {\n\n    return $output . ' Over and out.';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_query_args</code></strong></p>\n<p>Also, there&#8217;s <code>text_modules_shortcode_query_args</code>, which provides you with the complete args array for the shortcode&#8217;s query.</p>\n<pre><code>/**\n * Filter the shortcode query args.\n *\n * @param array $args Shortcode query args.\n */\nadd_filter( 'text_modules_shortcode_query_args', function( $args ) {\n\n    // Exclude some text modules by ID\n    $args[ 'post__not_in' ] = array( 4, 8, 15, 16, 23, 42 );\n\n    return $args;\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_slug_attribute_name</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s &#8216;slug&#8217; attribute name.</p>\n<pre><code>/**\n * Filter the 'slug' shortcode attribute name.\n *\n * @param string $name Attribute name.\n */\nadd_filter( 'text_modules_shortcode_slug_attribute_name', function() {\n\n    return 'post_slug';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_tag</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s tag.</p>\n<pre><code>/**\n * Filter the shortcode tag.\n *\n * @param string $shortcode_tag Shortcode tag.\n */\nadd_filter( 'text_modules_shortcode_tag', function() {\n\n    return 'text_block';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_use_slug</code></strong></p>\n<p>By default, text modules are being queried by their post ID first. Of course, you can change that and use the post slug instead.</p>\n<pre><code>/**\n * Filter if the shortcode (query) should use the post slug instead of the post ID.\n *\n * @param bool $use_slug Use slug instead of ID?\n */\nadd_filter( 'text_modules_shortcode_use_slug', '__return_true' );\n</code></pre>\n<p><strong><code>text_modules_widget_form_query_args</code></strong></p>\n<p>Also, there&#8217;s <code>text_modules_widget_form_query_args</code>, which provides you with the complete args array for the widget form&#8217;s query.</p>\n<pre><code>/**\n * Filter the widget form query args.\n *\n * @param array $args Query args.\n */\nadd_filter( 'text_modules_widget_form_query_args', function( $args ) {\n\n    // Exclude some text modules by ID\n    $args[ 'post__not_in' ] = array( 4, 8, 15, 16, 23, 42 );\n\n    return $args;\n} );\n</code></pre>\n<h4>Contribution</h4>\n<p>To <strong>contribute</strong> to this plugin, please see its <a href=\"https://github.com/tfrommen/text-modules\" rel=\"nofollow ugc\"><strong>GitHub repository</strong></a>.</p>\n<p>If you have a feature request, or if you have developed the feature already, please feel free to use the Issues and/or Pull Requests section.</p>\n<p>Of course, you can also provide me with translations if you would like to use the plugin in another not yet included language.</p>\n",
        "installation": "<p>This plugin requires PHP 5.3.</p>\n<ol>\n<li>Upload the <code>text-modules</code> folder to the <code>/wp-content/plugins/</code> directory on your web server.</li>\n<li>Activate the plugin through the <em>Plugins</em> menu in WordPress.</li>\n<li>Find the new <em>Text Modules</em> menu in your WordPress backend.</li>\n</ol>\n",
        "changelog": "<h4>1.0.1</h4>\n<ul>\n<li>Escape translated strings.</li>\n<li>Improve namespace imports.</li>\n<li>Compatible up to WordPress 4.2.4.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial release.</li>\n<li>wordpress.org release.</li>\n<li>Compatible up to WordPress 4.2.3.</li>\n</ul>\n"
    },
    "short_description": "Use the new Text Modules custom post type and display a text module by either shortcode or widget.",
    "description": "<p><strong>Use the new Text Modules custom post type and display a text module by either shortcode or widget.</strong></p>\n<p>Have you ever wanted to use some pieces of text information more than once? For instance, contact information such as a postal address? Or some slogan, motto or claim?</p>\n<p>This is exactly when <em>Text Modules</em> kicks in.</p>\n<h4>Usage</h4>\n<p>This plugin registers a simple post type for text modules. A text module can be accessed either via shortcode (by means of the text module&#8217;s ID or slug) or via a new Tex Modules widget.</p>\n<p><strong>Filters</strong></p>\n<p>In order to customize certain aspects of the plugin, it provides you with several filters. For each of these, a short description as well as a code example on how to alter the default behavior is given below. Just put the according code snippet in your theme&#8217;s <code>functions.php</code> file or your <em>customization</em> plugin, or to some other appropriate place.</p>\n<p><strong><code>text_modules_after_widget_content</code></strong></p>\n<p>This filter lets you alter the HTML after the widget content.</p>\n<pre><code>/**\n * Filter the HTML after the widget content.\n *\n * @param string $after_widget_content Some HTML after the widget content.\n */\nadd_filter( 'text_modules_after_widget_content', function() {\n\n    return '&lt;!-- End of Text Modules widget content --&gt;';\n} );\n</code></pre>\n<p><strong><code>text_modules_before_widget_content</code></strong></p>\n<p>This filter lets you alter the HTML before the widget content.</p>\n<pre><code>/**\n * Filter the HTML before the widget content.\n *\n * @param string $before_widget_content Some HTML before the widget content.\n */\nadd_filter( 'text_modules_before_widget_content', function() {\n\n    return '&lt;!-- Start of Text Modules widget content --&gt;';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type</code></strong></p>\n<p>Yes, you can alter the post type (slug).</p>\n<pre><code>/**\n * Filter the post type.\n *\n * @param string $post_type Post type.\n */\nadd_filter( 'text_modules_post_type', function() {\n\n    return 'exotic_stuff';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_args</code></strong></p>\n<p>If you want to alter a specific post type argument but you can&#8217;t find a fitting filter, there&#8217;s <code>text_modules_post_type_args</code>, which provides you with the complete args array.</p>\n<pre><code>/**\n * Filter the post type args.\n *\n * @param array $args Post type args.\n */\nadd_filter( 'text_modules_post_type_args', function( $args ) {\n\n    // Use hierarchical external content\n    $args[ 'hierarchical' ] = TRUE;\n\n    return $args;\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_description</code></strong></p>\n<p>The post type description can be customized by using the <code>text_modules_post_type_description</code> filter.</p>\n<pre><code>/**\n * Filter the post type description.\n *\n * @param string $description Post type description.\n */\nadd_filter( 'text_modules_post_type_description', function() {\n\n    // Provide a description\n    return 'Simple post type for text modules.';\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_labels</code></strong></p>\n<p>In case you don&#8217;t like the labels, easily adapt them to your liking.</p>\n<pre><code>/**\n * Filter the post type labels.\n *\n * @param array $labels Post type labels.\n */\nadd_filter( 'text_modules_post_type_labels', function( $labels ) {\n\n    // A little more horror, please...\n    $labels[ 'not_found' ] = 'ZOMG, no text module found!!1!!1!!oneone!!!1!eleven!1!';\n\n    return $labels;\n} );\n</code></pre>\n<p><strong><code>text_modules_post_type_supports</code></strong></p>\n<p>This filter provides you with the post type supports.</p>\n<pre><code>/**\n * Filter the post type supports.\n *\n * @param array $supports Post type supports.\n */\nadd_filter( 'text_modules_post_type_supports', function( $supports ) {\n\n    // Let's add revisions for our post type\n    if ( ! in_array( 'revisions', $supports ) ) {\n        $supports[] = 'revisions';\n    }\n\n    return $supports;\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_apply_do_shortcode</code></strong></p>\n<p>By default, do_shortcode() will be called on the shortcode output. Of course, you can change that.</p>\n<pre><code>/**\n * Filter if the shortcode should apply do_shortcode() to the output.\n *\n * @param bool $do_shortcode Should the shortcode apply do_shortcode()?\n */\nadd_filter( 'text_modules_shortcode_apply_do_shortcode', '__return_false' );\n</code></pre>\n<p><strong><code>text_modules_shortcode_callback</code></strong></p>\n<p>In case you would like to adapt how the shortcode data is handled, you can provide your own shortcode callback. This can either be a string holding the function name, or an array with either a class name or an object, and the according method.</p>\n<pre><code>/**\n * Filter the shortcode callback.\n *\n * @param array|string $callback Shortcode callback.\n */\nadd_filter( 'text_modules_shortcode_callback', function() {\n\n    return 'my_text_modules_shortcode_callback';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_id_attribute_name</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s &#8216;id&#8217; attribute name.</p>\n<pre><code>/**\n * Filter the 'id' shortcode attribute name.\n *\n * @param string $name Attribute name.\n */\nadd_filter( 'text_modules_shortcode_id_attribute_name', function() {\n\n    return 'post_id';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_output</code></strong></p>\n<p>This filter lets you alter the shortcode output. The second parameter holds the shortcode attributes array.</p>\n<pre><code>/**\n * Filter the shortcode output.\n *\n * @param string $output Shortcode output.\n * @param array  $atts   Shortcode attributes array.\n */\nadd_filter( 'text_modules_shortcode_output', function( $output ) {\n\n    return $output . ' Over and out.';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_query_args</code></strong></p>\n<p>Also, there&#8217;s <code>text_modules_shortcode_query_args</code>, which provides you with the complete args array for the shortcode&#8217;s query.</p>\n<pre><code>/**\n * Filter the shortcode query args.\n *\n * @param array $args Shortcode query args.\n */\nadd_filter( 'text_modules_shortcode_query_args', function( $args ) {\n\n    // Exclude some text modules by ID\n    $args[ 'post__not_in' ] = array( 4, 8, 15, 16, 23, 42 );\n\n    return $args;\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_slug_attribute_name</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s &#8216;slug&#8217; attribute name.</p>\n<pre><code>/**\n * Filter the 'slug' shortcode attribute name.\n *\n * @param string $name Attribute name.\n */\nadd_filter( 'text_modules_shortcode_slug_attribute_name', function() {\n\n    return 'post_slug';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_tag</code></strong></p>\n<p>This filter lets you alter the shortcode&#8217;s tag.</p>\n<pre><code>/**\n * Filter the shortcode tag.\n *\n * @param string $shortcode_tag Shortcode tag.\n */\nadd_filter( 'text_modules_shortcode_tag', function() {\n\n    return 'text_block';\n} );\n</code></pre>\n<p><strong><code>text_modules_shortcode_use_slug</code></strong></p>\n<p>By default, text modules are being queried by their post ID first. Of course, you can change that and use the post slug instead.</p>\n<pre><code>/**\n * Filter if the shortcode (query) should use the post slug instead of the post ID.\n *\n * @param bool $use_slug Use slug instead of ID?\n */\nadd_filter( 'text_modules_shortcode_use_slug', '__return_true' );\n</code></pre>\n<p><strong><code>text_modules_widget_form_query_args</code></strong></p>\n<p>Also, there&#8217;s <code>text_modules_widget_form_query_args</code>, which provides you with the complete args array for the widget form&#8217;s query.</p>\n<pre><code>/**\n * Filter the widget form query args.\n *\n * @param array $args Query args.\n */\nadd_filter( 'text_modules_widget_form_query_args', function( $args ) {\n\n    // Exclude some text modules by ID\n    $args[ 'post__not_in' ] = array( 4, 8, 15, 16, 23, 42 );\n\n    return $args;\n} );\n</code></pre>\n<h4>Contribution</h4>\n<p>To <strong>contribute</strong> to this plugin, please see its <a href=\"https://github.com/tfrommen/text-modules\" rel=\"nofollow ugc\"><strong>GitHub repository</strong></a>.</p>\n<p>If you have a feature request, or if you have developed the feature already, please feel free to use the Issues and/or Pull Requests section.</p>\n<p>Of course, you can also provide me with translations if you would like to use the plugin in another not yet included language.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/text-modules.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/text-modules/assets/screenshot-1.png?rev=1225711",
            "caption": "<strong>List table</strong> - Here you can see all text modules together with their individual slug and shortcode."
        },
        {
            "src": "https://ps.w.org/text-modules/assets/screenshot-2.png?rev=1225711",
            "caption": "<strong>Meta box</strong> - Here you can see the currently edited text module's shortcode."
        },
        {
            "src": "https://ps.w.org/text-modules/assets/screenshot-3.png?rev=1225711",
            "caption": "<strong>Widget</strong> - Use any text module in a Text Module widget."
        }
    ],
    "tags": {
        "custom-post-type": "custom post type",
        "module": "module",
        "modules": "modules",
        "post": "post",
        "text": "text"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://ipm-frommen.de/wordpress",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/text-modules/assets/icon-128x128.png?rev=1205728",
        "2x": "https://ps.w.org/text-modules/assets/icon-256x256.png?rev=1205728"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}