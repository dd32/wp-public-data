{
    "name": "Easy SCSS and JS",
    "slug": "jvh-easy-scss-and-js",
    "version": "2.5.7",
    "author": "<a href=\"https://www.ljpc.solutions\">Lars Jansen</a>",
    "author_profile": "https://profiles.wordpress.org/jaapjvh/",
    "contributors": {
        "lars-2": {
            "profile": "https://profiles.wordpress.org/lars-2/",
            "avatar": "https://secure.gravatar.com/avatar/fc5f7b20007f92578f0deaaf4c9feef1?s=96&d=monsterid&r=g",
            "display_name": "Lars Jansen"
        }
    },
    "requires": "6.0",
    "tested": "6.0.9",
    "requires_php": "7.4",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 1,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/jvh-easy-scss-and-js/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 90,
    "downloaded": 2064,
    "last_updated": "2022-09-05 06:55:00",
    "added": "2020-03-19",
    "homepage": "",
    "sections": {
        "description": "<p>This plugin adds SCSS functionality, compresses JS for you and creates an easy way to enqueue scripts and styles as well as localize them.</p>\n<h3>How to use</h3>\n<p>Let&#8217;s assume this structure:<br />\n    your theme<br />\n    ├── assets<br />\n    │   ├── js<br />\n    │   │   └── script.js<br />\n    │   └── scss<br />\n    │       └── style.scss<br />\n    ├── functions.php<br />\n    └── &#8230;</p>\n<p>You can now do this in your functions.php with styles:</p>\n<pre><code>&lt;?php\nadd_action('wp_enqueue_scripts', static function(){\n    /* Full version */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [],[], true);\n\n    /* Shortest version */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss');\n\n    /* Add dependencies (example: depends on handle 'bootstrap') */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', ['bootstrap']);\n\n    /* Add variables */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [], [\n        'my_cool_color' =&gt; '#0000ff',\n    ]);\n\n    /* Enqueue it yourself */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [], [], false);\n    wp_enqueue_style('my_style_handle');\n});\n</code></pre>\n<p>And this with scripts:</p>\n<pre><code>&lt;?php\nadd_action('wp_enqueue_scripts', static function(){\n    /* Full version */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], true, true);\n\n    /* Shortest version (jquery is by default a dependency) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js');\n\n    /* No dependencies (also no jquery) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', []);\n\n    /* Add dependencies (besides jquery) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery', 'other_script']);\n\n    /* Add variables */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [\n        'my_variable' =&gt; 'testing this awesome plugin',\n    ]);\n\n    /* Enqueue it yourself */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], false);\n    wp_enqueue_script('my_script_handle');\n\n    /* Add the script to the header instead of the footer */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], true, false);\n});\n</code></pre>\n<p>Use variables in SCSS:</p>\n<pre><code>// This is recommended. It will throw a fatal error if your PHP doesn't set the variable for some reason.\n// If PHP does set it, it will replace $my_cool_color with the defined color in PHP.\n$my_cool_color: #ffffff !default;\n\nbody{\n  background-color: $my_cool_color; // This will be blue (#0000ff)\n}\n</code></pre>\n<p>Use variables in JS:</p>\n<pre><code>alert(my_script_handle_vars.my_variable);\n</code></pre>\n<p>Compiled files will be saved in wp-content/uploads/compiled-scss-and-js. When that folder is cleared, everything will be regenerated.</p>\n<h3>Filters</h3>\n<p>There are filters for adding generic variables to all (or a selection) of scripts and styles or for adding extra content to files:<br />\n&#8211; <code>easy_scss_extra_variables</code><br />\n&#8211; <code>easy_scss_add_code_before_content</code><br />\n&#8211; <code>easy_scss_add_code_after_content</code><br />\n&#8211; <code>easy_scss_create_source_map</code><br />\n&#8211; <code>easy_scss_storage_folder_name</code><br />\n&#8211; <code>easy_scss_storage_folder</code><br />\n&#8211; <code>easy_scss_storage_folder_url</code><br />\n&#8211; <code>easy_scss_after_compilation</code><br />\n&#8211; <code>easy_js_extra_variables</code><br />\n&#8211; <code>easy_js_storage_folder_name</code><br />\n&#8211; <code>easy_js_storage_folder</code><br />\n&#8211; <code>easy_js_storage_folder_url</code><br />\n&#8211; <code>easy_js_after_compilation</code></p>\n",
        "changelog": "<p>v2.5.7<br />\n&#8211; Updated scssphp to 1.11.0</p>\n<p>v2.5.6<br />\n&#8211; Updated scssphp to 1.10.5</p>\n<p>v2.5.5<br />\n&#8211; Updated scssphp to 1.10.2</p>\n<p>v2.5.4<br />\n&#8211; Updated scssphp to 1.10.1</p>\n<p>v2.5.3<br />\n&#8211; Removed legacy code</p>\n<p>v2.5.1<br />\n&#8211; Added the easy_css_after_compilation and easy_js_after_compilation filters<br />\n&#8211; Upgraded scssphp to 1.10.0</p>\n<p>v2.5.0<br />\n&#8211; Added the easy_css_after_compilation and easy_js_after_compilation filters<br />\n&#8211; Upgraded scssphp to 1.9.0</p>\n<p>v2.3.0<br />\n&#8211; Added the ability to include URLs, which are then cached, minified and served<br />\n&#8211; Upgraded scssphp to 1.7.0</p>\n"
    },
    "short_description": "This plugin adds SCSS functionality, compresses JS for you and creates an easy way to enqueue scripts and styles as well as localize them.",
    "description": "<p>This plugin adds SCSS functionality, compresses JS for you and creates an easy way to enqueue scripts and styles as well as localize them.</p>\n<h3>How to use</h3>\n<p>Let&#8217;s assume this structure:<br />\n    your theme<br />\n    ├── assets<br />\n    │   ├── js<br />\n    │   │   └── script.js<br />\n    │   └── scss<br />\n    │       └── style.scss<br />\n    ├── functions.php<br />\n    └── &#8230;</p>\n<p>You can now do this in your functions.php with styles:</p>\n<pre><code>&lt;?php\nadd_action('wp_enqueue_scripts', static function(){\n    /* Full version */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [],[], true);\n\n    /* Shortest version */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss');\n\n    /* Add dependencies (example: depends on handle 'bootstrap') */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', ['bootstrap']);\n\n    /* Add variables */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [], [\n        'my_cool_color' =&gt; '#0000ff',\n    ]);\n\n    /* Enqueue it yourself */\n    \\EasySCSSandJS\\Styles::add('my_style_handle', __DIR__ .'/assets/scss/style.scss', [], [], false);\n    wp_enqueue_style('my_style_handle');\n});\n</code></pre>\n<p>And this with scripts:</p>\n<pre><code>&lt;?php\nadd_action('wp_enqueue_scripts', static function(){\n    /* Full version */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], true, true);\n\n    /* Shortest version (jquery is by default a dependency) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js');\n\n    /* No dependencies (also no jquery) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', []);\n\n    /* Add dependencies (besides jquery) */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery', 'other_script']);\n\n    /* Add variables */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [\n        'my_variable' =&gt; 'testing this awesome plugin',\n    ]);\n\n    /* Enqueue it yourself */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], false);\n    wp_enqueue_script('my_script_handle');\n\n    /* Add the script to the header instead of the footer */\n    \\EasySCSSandJS\\Scripts::add('my_script_handle', __DIR__ .'/assets/js/script.js', ['jquery'], [], true, false);\n});\n</code></pre>\n<p>Use variables in SCSS:</p>\n<pre><code>// This is recommended. It will throw a fatal error if your PHP doesn't set the variable for some reason.\n// If PHP does set it, it will replace $my_cool_color with the defined color in PHP.\n$my_cool_color: #ffffff !default;\n\nbody{\n  background-color: $my_cool_color; // This will be blue (#0000ff)\n}\n</code></pre>\n<p>Use variables in JS:</p>\n<pre><code>alert(my_script_handle_vars.my_variable);\n</code></pre>\n<p>Compiled files will be saved in wp-content/uploads/compiled-scss-and-js. When that folder is cleared, everything will be regenerated.</p>\n<h3>Filters</h3>\n<p>There are filters for adding generic variables to all (or a selection) of scripts and styles or for adding extra content to files:<br />\n&#8211; <code>easy_scss_extra_variables</code><br />\n&#8211; <code>easy_scss_add_code_before_content</code><br />\n&#8211; <code>easy_scss_add_code_after_content</code><br />\n&#8211; <code>easy_scss_create_source_map</code><br />\n&#8211; <code>easy_scss_storage_folder_name</code><br />\n&#8211; <code>easy_scss_storage_folder</code><br />\n&#8211; <code>easy_scss_storage_folder_url</code><br />\n&#8211; <code>easy_scss_after_compilation</code><br />\n&#8211; <code>easy_js_extra_variables</code><br />\n&#8211; <code>easy_js_storage_folder_name</code><br />\n&#8211; <code>easy_js_storage_folder</code><br />\n&#8211; <code>easy_js_storage_folder_url</code><br />\n&#8211; <code>easy_js_after_compilation</code></p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.7.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "easy": "easy",
        "easyscss": "easyscss",
        "js": "JS",
        "ljpc": "ljpc",
        "scss": "scss"
    },
    "stable_tag": "2.5.7",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.1.0.1.zip",
        "1.0.2": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.1.0.2.zip",
        "1.0.3": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.1.0.3.zip",
        "1.0.4": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.1.0.4.zip",
        "2.0.1": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.0.1.zip",
        "2.1.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.1.0.zip",
        "2.1.1": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.1.1.zip",
        "2.1.2": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.1.2.zip",
        "2.1.3": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.1.3.zip",
        "2.1.4": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.1.4.zip",
        "2.2.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.2.0.zip",
        "2.3.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.3.0.zip",
        "2.4.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.4.0.zip",
        "2.5.0": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.0.zip",
        "2.5.1": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.1.zip",
        "2.5.2": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.2.zip",
        "2.5.3": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.3.zip",
        "2.5.4": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.4.zip",
        "2.5.5": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.5.zip",
        "2.5.6": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.6.zip",
        "2.5.7": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.2.5.7.zip",
        "trunk": "https://downloads.wordpress.org/plugin/jvh-easy-scss-and-js.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/jvh-easy-scss-and-js/assets/banner-772x250.png?rev=2263693",
        "high": "https://ps.w.org/jvh-easy-scss-and-js/assets/banner-1544x500.png?rev=2263693"
    },
    "icons": {
        "1x": "https://ps.w.org/jvh-easy-scss-and-js/assets/icon.svg?rev=2263693",
        "svg": "https://ps.w.org/jvh-easy-scss-and-js/assets/icon.svg?rev=2263693"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}