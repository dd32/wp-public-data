{
    "name": "Datawiza Proxy Auth Plugin &#8211; SSO",
    "slug": "reverse-proxy-auth-widget",
    "version": "1.1.2",
    "author": "<a href=\"https://www.datawiza.com/\">Datawiza</a>",
    "author_profile": "https://profiles.wordpress.org/fyuck1991/",
    "contributors": {
        "datawiza": {
            "profile": "https://profiles.wordpress.org/datawiza/",
            "avatar": "https://secure.gravatar.com/avatar/8d408b21a34d90bbde140f139cccf3f3?s=96&d=monsterid&r=g",
            "display_name": "Datawiza"
        }
    },
    "requires": "3.0.1",
    "tested": "5.8.10",
    "requires_php": "5.6",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 80,
    "ratings": {
        "5": 0,
        "4": 1,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/reverse-proxy-auth-widget/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 599,
    "last_updated": "2021-10-25 6:17am GMT",
    "added": "2020-12-19",
    "homepage": "",
    "sections": {
        "description": "<p>The Proxy Auth Plugin helps developers/DevOps/admins easily implement authentication and authorization for WordPress by using a <a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\" rel=\"nofollow ugc\">JWT (JSON Web Token)</a> provided by a reverse proxy.</p>\n<p>This could be employed to achieve SSO (OAUTH/OIDC and SAML) to a Cloud Identity Provider (e.g., Azure Active Directory, Okta, Auth0) by using an Identity-Aware Proxy, e.g., <a href=\"https://www.datawiza.com/\" rel=\"nofollow ugc\">Datawiza Access Broker</a> and <a href=\"https://cloud.google.com/iap\" rel=\"nofollow ugc\">Google IAP</a>.</p>\n<p>Note that the plugin requires a reverse proxy sitting in front of the WordPress site. The reverse proxy performs authentication, and passes the user name and role in a JWT to the plugin via a HTTP header called <code>DW-TOKEN</code>.</p>\n<p>By using <a href=\"https://www.datawiza.com/\" rel=\"nofollow ugc\">Datawiza Access Broker</a>, you get a <a href=\"https://docs.datawiza.com/step-by-step/step1.html\" rel=\"nofollow ugc\">configuration-based</a> <a href=\"https://docs.datawiza.com/\" rel=\"nofollow ugc\">no-code solution</a>, following the detail instruction <a href=\"https://docs.datawiza.com/step-by-step/step1.html\" rel=\"nofollow ugc\">here</a>.</p>\n<p>If you decide to use your own reverse proxy, please follow the instructions below.</p>\n<p><strong>How it works</strong></p>\n<ul>\n<li>The plugin retrieves the user id (email) from the JWT and then checks if such a user exists. If not, the plugin creates a new user by using this email and signs him/her in.</li>\n<li>The plugin retrieves the user role from the JWT and sets it as the user&#8217;s role in WordPress.</li>\n<li>\n<p>The plugin expects the JWT including user id and role as a HTTP header <code>DW-TOKEN</code>. For example, the payload of JWT may look like:</p>\n<p>{<br />\n    &#8220;role&#8221;: &#8220;administrator&#8221;,<br />\n    &#8220;email&#8221;: &#8220;admin@yourwebsite.com&#8221;<br />\n}</p>\n</li>\n</ul>\n<p><strong>Plugin config in WordPress</strong></p>\n<p>In <code>Setting</code> -&gt; <code>Datawiza Proxy Auth</code>, you need to input a private secret which is used as a Cryptography Key. Such secret is shared between the plugin and the reverse proxy which is responsible for passing the JWT to the plugin. The Signing Algorithm for the JWT is <code>HS256</code>.</p>\n<p><strong>!!! NOTES !!!</strong></p>\n<ul>\n<li><strong>If the enabled Proxy Auth Plugin cannot retrieve the expected JWT in the HTTP header, the plugin will not work. The authentication will use the default authentication of wordpress and you will see an error banner on top of the wordpress pages.</strong></li>\n<li><strong>MAKE SURE that clients cannot bypass the reverse proxy. This is to prevent people from sending forged malicious requests with arbitrary JWTs directly to WordPress.</strong></li>\n<li><strong>It&#8217;s recommended that the reverse proxy in front of the WordPress site erases the incoming http request’s <code>DW-TOKEN</code> header. The <code>DW-TOKEN</code> header should be generated by the reverse proxy only.</strong></li>\n<li><strong>If admin doesn’t assign role to the user, user’s role will be subscriber for WordPress by default.</strong></li>\n<li><strong>If user’s role has been updated in JWT, the plugin will update the role in WordPress accordingly.</strong></li>\n</ul>\n<p><strong>Generate the JWT required by the plugin</strong></p>\n<p>If you are using openresty/lua-nginx-module, here is the code sample to generate the JWT required by the plugin:</p>\n<pre><code>jwt = require(\"resty.jwt\")\nlocal jwt_token = jwt:sign(\n   \"jwt_secret\",\n    {\n    header={typ=\"JWT\", alg=\"HS256\"},\n    payload={email=\"admin@yourwebsite.com\", role=\"administrator\"}\n    })\nngx.req.set_header('DW-TOKEN', jwt_token)\n</code></pre>\n<p>The <code>jwt_secret</code> above should be the same private secret input in <code>Setting</code> -&gt; <code>Datawiza Proxy Auth</code>. The <code>role</code> in <code>payload</code> is optional. If it&#8217;s not specified, the default role is <code>subscriber</code>. For more details about <code>lua-resty-jwt</code>, you can visit <a href=\"https://github.com/SkyLothar/lua-resty-jwt\" rel=\"nofollow ugc\">here</a>.</p>\n",
        "installation": "<ol>\n<li>Activate the plugin through the &#8220;Plugins&#8221; menu in WordPress.</li>\n<li>Input private secret in &#8220;Settings&#8221; -&gt; &#8220;Datawiza Proxy Auth Plugin&#8221;.</li>\n</ol>\n",
        "changelog": "<h4>1.1.2</h4>\n<ul>\n<li>Keep the user&#8217;s role in WordPress in sync with the role value in JWT.</li>\n<li>Add close button to notification bar.</li>\n<li>Add invalid jwt error message.</li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Retrieves user info from encrypted DW-TOKEN instead of X-User.</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "The Proxy Auth Plugin helps developers/DevOps/admins easily implement authentication and authorization for WordPress by using a JWT (JSON Web Token) p &hellip;",
    "description": "<p>The Proxy Auth Plugin helps developers/DevOps/admins easily implement authentication and authorization for WordPress by using a <a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\" rel=\"nofollow ugc\">JWT (JSON Web Token)</a> provided by a reverse proxy.</p>\n<p>This could be employed to achieve SSO (OAUTH/OIDC and SAML) to a Cloud Identity Provider (e.g., Azure Active Directory, Okta, Auth0) by using an Identity-Aware Proxy, e.g., <a href=\"https://www.datawiza.com/\" rel=\"nofollow ugc\">Datawiza Access Broker</a> and <a href=\"https://cloud.google.com/iap\" rel=\"nofollow ugc\">Google IAP</a>.</p>\n<p>Note that the plugin requires a reverse proxy sitting in front of the WordPress site. The reverse proxy performs authentication, and passes the user name and role in a JWT to the plugin via a HTTP header called <code>DW-TOKEN</code>.</p>\n<p>By using <a href=\"https://www.datawiza.com/\" rel=\"nofollow ugc\">Datawiza Access Broker</a>, you get a <a href=\"https://docs.datawiza.com/step-by-step/step1.html\" rel=\"nofollow ugc\">configuration-based</a> <a href=\"https://docs.datawiza.com/\" rel=\"nofollow ugc\">no-code solution</a>, following the detail instruction <a href=\"https://docs.datawiza.com/step-by-step/step1.html\" rel=\"nofollow ugc\">here</a>.</p>\n<p>If you decide to use your own reverse proxy, please follow the instructions below.</p>\n<p><strong>How it works</strong></p>\n<ul>\n<li>The plugin retrieves the user id (email) from the JWT and then checks if such a user exists. If not, the plugin creates a new user by using this email and signs him/her in.</li>\n<li>The plugin retrieves the user role from the JWT and sets it as the user&#8217;s role in WordPress.</li>\n<li>\n<p>The plugin expects the JWT including user id and role as a HTTP header <code>DW-TOKEN</code>. For example, the payload of JWT may look like:</p>\n<p>{<br />\n    &#8220;role&#8221;: &#8220;administrator&#8221;,<br />\n    &#8220;email&#8221;: &#8220;admin@yourwebsite.com&#8221;<br />\n}</p>\n</li>\n</ul>\n<p><strong>Plugin config in WordPress</strong></p>\n<p>In <code>Setting</code> -&gt; <code>Datawiza Proxy Auth</code>, you need to input a private secret which is used as a Cryptography Key. Such secret is shared between the plugin and the reverse proxy which is responsible for passing the JWT to the plugin. The Signing Algorithm for the JWT is <code>HS256</code>.</p>\n<p><strong>!!! NOTES !!!</strong></p>\n<ul>\n<li><strong>If the enabled Proxy Auth Plugin cannot retrieve the expected JWT in the HTTP header, the plugin will not work. The authentication will use the default authentication of wordpress and you will see an error banner on top of the wordpress pages.</strong></li>\n<li><strong>MAKE SURE that clients cannot bypass the reverse proxy. This is to prevent people from sending forged malicious requests with arbitrary JWTs directly to WordPress.</strong></li>\n<li><strong>It&#8217;s recommended that the reverse proxy in front of the WordPress site erases the incoming http request’s <code>DW-TOKEN</code> header. The <code>DW-TOKEN</code> header should be generated by the reverse proxy only.</strong></li>\n<li><strong>If admin doesn’t assign role to the user, user’s role will be subscriber for WordPress by default.</strong></li>\n<li><strong>If user’s role has been updated in JWT, the plugin will update the role in WordPress accordingly.</strong></li>\n</ul>\n<p><strong>Generate the JWT required by the plugin</strong></p>\n<p>If you are using openresty/lua-nginx-module, here is the code sample to generate the JWT required by the plugin:</p>\n<pre><code>jwt = require(\"resty.jwt\")\nlocal jwt_token = jwt:sign(\n   \"jwt_secret\",\n    {\n    header={typ=\"JWT\", alg=\"HS256\"},\n    payload={email=\"admin@yourwebsite.com\", role=\"administrator\"}\n    })\nngx.req.set_header('DW-TOKEN', jwt_token)\n</code></pre>\n<p>The <code>jwt_secret</code> above should be the same private secret input in <code>Setting</code> -&gt; <code>Datawiza Proxy Auth</code>. The <code>role</code> in <code>payload</code> is optional. If it&#8217;s not specified, the default role is <code>subscriber</code>. For more details about <code>lua-resty-jwt</code>, you can visit <a href=\"https://github.com/SkyLothar/lua-resty-jwt\" rel=\"nofollow ugc\">here</a>.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/reverse-proxy-auth-widget.1.1.2.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "auth": "auth",
        "oidc": "oidc",
        "proxy": "proxy",
        "saml": "SAML",
        "sso": "sso"
    },
    "stable_tag": "1.1.2",
    "versions": {
        "1.1.0": "https://downloads.wordpress.org/plugin/reverse-proxy-auth-widget.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/reverse-proxy-auth-widget.1.1.1.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/reverse-proxy-auth-widget.1.1.2.zip",
        "trunk": "https://downloads.wordpress.org/plugin/reverse-proxy-auth-widget.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/reverse-proxy-auth-widget/assets/icon.svg?rev=2443145",
        "svg": "https://ps.w.org/reverse-proxy-auth-widget/assets/icon.svg?rev=2443145"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 80,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}