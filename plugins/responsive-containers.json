{
    "name": "Responsive Containers",
    "slug": "responsive-containers",
    "version": "1.1.0",
    "author": "<a href=\"http://kadamwhite.com\">K Adam White</a>",
    "author_profile": "https://profiles.wordpress.org/kadamwhite/",
    "contributors": {
        "kadamwhite": {
            "profile": "https://profiles.wordpress.org/kadamwhite/",
            "avatar": "https://secure.gravatar.com/avatar/6cd1cf6de05952505a165425efaf06b4?s=96&d=monsterid&r=g",
            "display_name": "K. Adam White"
        }
    },
    "requires": "5.2.0",
    "tested": "5.2.21",
    "requires_php": "5.6.20",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/responsive-containers/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1302,
    "last_updated": "2019-07-20 11:03am GMT",
    "added": "2019-07-13",
    "homepage": "https://github.com/kadamwhite/responsive-containers",
    "sections": {
        "description": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\" rel=\"nofollow ugc\">CSS media queries</a> let us style elements based on the size of the screen. What if we wanted to style them based on the size of their <strong>container</strong>? A widget or block should often look different if it&#8217;s full-width or constrained within a column or sidebar, but we didn&#8217;t have any way to write <strong>container queries</strong> to style those elements based on their on-screen width&hellip; until now!</p>\n<p>This plugin loads a small JavaScript file that conditionally applies classes to elements based on how wide those elements are in the browser. This can be used by other themes and plugins to write container-specific styles for editor blocks or widgets, so that they will display correctly wherever they are placed in the page.</p>\n<p>The script works on the frontend and in the block editor — see your responsive styles live while you&#8217;re composing your post, and trust that your widgets and blocks will look their best whether they&#8217;re full-width or in the narrowest sidebar.</p>\n<h3>Usage</h3>\n<p>If you have a block or widget in your site that you wish to use as a responsive container, add the <code>data-responsive-container</code> attribute to that block&#8217;s container element. For example, the parent <code>&lt;div&gt;</code> for a calendar block might look like this:</p>\n<pre><code>&lt;div class=\"calendar-block\" data-responsive-container&gt;\n</code></pre>\n<p>By adding that data-attribute and nothing more, your container will now be tagged with additional classes based on how big they appear:<br />\n&#8211; No special class if the container is below 420px (style for this narrow context as your default).<br />\n&#8211; <code>container-sm</code> if the container is 420px wide or more,<br />\n&#8211; <code>container-md</code> if it is wider than 600px,<br />\n&#8211; <code>container-lg</code> if it is wider than 720px, and<br />\n&#8211; <code>container-xl</code> for any element 960px or wider.</p>\n<p>These are default values and therefore somewhat arbitrary, so you may also provide your own custom theme- or plugin-specific breakpoint values using the <code>data-responsive-container</code> attribute. When rendering your element or block in PHP, pass an array of <strong>class names</strong> and the <strong>minimum width</strong> at which each class should be applied. These class names can be generic like the default <code>.container-*</code> classes, or they may be specific to the element being styled:</p>\n<pre><code>echo sprintf(\n  '&lt;div class=\"myblock\" data-responsive-container=\"%s\"&gt;',\n  esc_attr( wp_json_encode( [\n    'myblock--2-column' =&gt; 600,\n    'myblock--3-column' =&gt; 900,\n  ] )\n);\n</code></pre>\n<p>In this example your container would receive the <code>.myblock--2-column</code> class from 600px up, and <code>.myblock--3-column</code> at or above 900px.</p>\n<p>Note that in this case the <code>.myblock</code> element receives no custom class below 600px. We don&#8217;t apply any class names below your specified minimum because we assume styles are written narrow-context-first, but you may ensure your smallest class is always applied by providing a minimum width of <code>0</code>:</p>\n<pre><code>echo sprintf(\n  '&lt;div class=\"myblock\" data-responsive-container=\"%s\"&gt;',\n  esc_attr( wp_json_encode( [\n    'myblock--1-column' =&gt; 0, // Will apply in all circumstances.\n    'myblock--2-column' =&gt; 600,\n    'myblock--3-column' =&gt; 900,\n  ] )\n);\n</code></pre>\n<h3>From within WordPress</h3>\n<ol>\n<li>Visit &#8216;Plugins &gt; Add New&#8217;</li>\n<li>Search for &#8216;Responsive Containers&#8217;</li>\n<li>Activate the Responsive Containers plugin from your Plugins page.</li>\n<li>Start using <code>data-responsive-container</code> attributes within your theme or plugin.</li>\n</ol>\n<h3>Manually</h3>\n<ol>\n<li>Upload the <code>responsive-containers</code> folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the Responsive Containers plugin from your Plugins page.</li>\n<li>Start using <code>data-responsive-container</code> attributes within your theme or plugin.</li>\n</ol>\n<h3>License &amp; Attribution</h3>\n<p>This plugin is licensed under the terms of the <a href=\"./license.txt\" rel=\"nofollow ugc\">GNU General Public License</a> (or &#8220;GPL&#8221;). It is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p>\n<p>It was created by K. Adam White at <a href=\"https://humanmade.com\" rel=\"nofollow ugc\">Human Made</a>, based on a concept popularized by <a href=\"https://philipwalton.com/\" rel=\"nofollow ugc\">Philip Walton</a>.</p>\n<p>This plugin utilizes the <a href=\"https://www.npmjs.com/package/resize-observer-polyfill\" rel=\"nofollow ugc\"><code>resize-observer-polyfill</code> library</a> by Denis Rul, released under the MIT license and &copy; 2016 Denis Rul.</p>\n",
        "faq": "\n<h4>How does this work?</h4>\n<p>\n<p>The Responsive Containers plugin implements an approach popularized by <a href=\"https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/\" rel=\"nofollow ugc\">Philip Walton&#8217;s excellent article <em>Responsive Components: a Solution to the Container Queries Problem</em></a>. What this plugin does is apply his solution to WordPress sites so that, assuming this plugin is installed, any other plugin or theme can opt-in to responsive container styling.</p>\n<p>Under the hood this is all driven by <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" rel=\"nofollow ugc\"><code>ResizeObserver</code></a>, a new browser feature that efficiently detects element size changes. We use this method to track the size of specific containers on the page and apply a set of classes to those elements based on how big they appear on the screen.</p>\n</p>\n<h4>I activated this plugin and nothing changed</h4>\n<p>\n<p>Installing and activating this plugin will not change anything about your site on its own. You have to update your theme or plugin to add the <code>data-responsive-containers</code> HTML attribute to any elements you wish to use as responsive containers.</p>\n</p>\n\n",
        "changelog": "<h4>1.1</h4>\n<ul>\n<li>Alter class application logic to always apply classes once their minimum threshold width has been met or exceeded.</li>\n<li>Adjust default breakpoint cutoffs.</li>\n<li>Adjust README formatting to fix code block rendering issues.</li>\n<li>Begin work to support usage within the block editor.</li>\n<li>Un-document the <code>responsive_container_breakpoints()</code> method until it is confirmed to be a useful helper.</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Loads <code>responsive-containers.js</code> to observe and decorate <code>data-responsive-container</code> elements.</li>\n<li>Introduces <code>responsive_container_breakpoints()</code> method to render a stringified &amp; attribute-escaped custom breakpoints array.</li>\n</ul>\n"
    },
    "short_description": "Responsive Containers provides a framework for applying styles to blocks &amp; widgets based on how large they appear on screen.",
    "description": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\" rel=\"nofollow ugc\">CSS media queries</a> let us style elements based on the size of the screen. What if we wanted to style them based on the size of their <strong>container</strong>? A widget or block should often look different if it&#8217;s full-width or constrained within a column or sidebar, but we didn&#8217;t have any way to write <strong>container queries</strong> to style those elements based on their on-screen width&hellip; until now!</p>\n<p>This plugin loads a small JavaScript file that conditionally applies classes to elements based on how wide those elements are in the browser. This can be used by other themes and plugins to write container-specific styles for editor blocks or widgets, so that they will display correctly wherever they are placed in the page.</p>\n<p>The script works on the frontend and in the block editor — see your responsive styles live while you&#8217;re composing your post, and trust that your widgets and blocks will look their best whether they&#8217;re full-width or in the narrowest sidebar.</p>\n<h3>Usage</h3>\n<p>If you have a block or widget in your site that you wish to use as a responsive container, add the <code>data-responsive-container</code> attribute to that block&#8217;s container element. For example, the parent <code>&lt;div&gt;</code> for a calendar block might look like this:</p>\n<pre><code>&lt;div class=\"calendar-block\" data-responsive-container&gt;\n</code></pre>\n<p>By adding that data-attribute and nothing more, your container will now be tagged with additional classes based on how big they appear:<br />\n&#8211; No special class if the container is below 420px (style for this narrow context as your default).<br />\n&#8211; <code>container-sm</code> if the container is 420px wide or more,<br />\n&#8211; <code>container-md</code> if it is wider than 600px,<br />\n&#8211; <code>container-lg</code> if it is wider than 720px, and<br />\n&#8211; <code>container-xl</code> for any element 960px or wider.</p>\n<p>These are default values and therefore somewhat arbitrary, so you may also provide your own custom theme- or plugin-specific breakpoint values using the <code>data-responsive-container</code> attribute. When rendering your element or block in PHP, pass an array of <strong>class names</strong> and the <strong>minimum width</strong> at which each class should be applied. These class names can be generic like the default <code>.container-*</code> classes, or they may be specific to the element being styled:</p>\n<pre><code>echo sprintf(\n  '&lt;div class=\"myblock\" data-responsive-container=\"%s\"&gt;',\n  esc_attr( wp_json_encode( [\n    'myblock--2-column' =&gt; 600,\n    'myblock--3-column' =&gt; 900,\n  ] )\n);\n</code></pre>\n<p>In this example your container would receive the <code>.myblock--2-column</code> class from 600px up, and <code>.myblock--3-column</code> at or above 900px.</p>\n<p>Note that in this case the <code>.myblock</code> element receives no custom class below 600px. We don&#8217;t apply any class names below your specified minimum because we assume styles are written narrow-context-first, but you may ensure your smallest class is always applied by providing a minimum width of <code>0</code>:</p>\n<pre><code>echo sprintf(\n  '&lt;div class=\"myblock\" data-responsive-container=\"%s\"&gt;',\n  esc_attr( wp_json_encode( [\n    'myblock--1-column' =&gt; 0, // Will apply in all circumstances.\n    'myblock--2-column' =&gt; 600,\n    'myblock--3-column' =&gt; 900,\n  ] )\n);\n</code></pre>\n<h3>From within WordPress</h3>\n<ol>\n<li>Visit &#8216;Plugins &gt; Add New&#8217;</li>\n<li>Search for &#8216;Responsive Containers&#8217;</li>\n<li>Activate the Responsive Containers plugin from your Plugins page.</li>\n<li>Start using <code>data-responsive-container</code> attributes within your theme or plugin.</li>\n</ol>\n<h3>Manually</h3>\n<ol>\n<li>Upload the <code>responsive-containers</code> folder to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the Responsive Containers plugin from your Plugins page.</li>\n<li>Start using <code>data-responsive-container</code> attributes within your theme or plugin.</li>\n</ol>\n<h3>License &amp; Attribution</h3>\n<p>This plugin is licensed under the terms of the <a href=\"./license.txt\" rel=\"nofollow ugc\">GNU General Public License</a> (or &#8220;GPL&#8221;). It is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p>\n<p>It was created by K. Adam White at <a href=\"https://humanmade.com\" rel=\"nofollow ugc\">Human Made</a>, based on a concept popularized by <a href=\"https://philipwalton.com/\" rel=\"nofollow ugc\">Philip Walton</a>.</p>\n<p>This plugin utilizes the <a href=\"https://www.npmjs.com/package/resize-observer-polyfill\" rel=\"nofollow ugc\"><code>resize-observer-polyfill</code> library</a> by Denis Rul, released under the MIT license and &copy; 2016 Denis Rul.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/responsive-containers.1.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "container-queries": "container queries",
        "responsive-containers": "responsive containers",
        "responsive-design": "responsive design"
    },
    "stable_tag": "1.1",
    "versions": {
        "1.1": "https://downloads.wordpress.org/plugin/responsive-containers.1.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/responsive-containers.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/responsive-containers/assets/banner-772x250.png?rev=2122552",
        "high": "https://ps.w.org/responsive-containers/assets/banner-1544x500.png?rev=2122552"
    },
    "icons": {
        "1x": "https://ps.w.org/responsive-containers/assets/icon-128x128.png?rev=2122552",
        "2x": "https://ps.w.org/responsive-containers/assets/icon-256x256.png?rev=2122552"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}