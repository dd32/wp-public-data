{
    "name": "PHP Native Password Hash",
    "slug": "password-hash",
    "version": "3.0",
    "author": "<a href=\"https://aye.sh/open-source\">Ayesh Karunaratne</a>",
    "author_profile": "https://profiles.wordpress.org/ayeshrajans/",
    "contributors": {
        "ayeshrajans": {
            "profile": "https://profiles.wordpress.org/ayeshrajans/",
            "avatar": "https://secure.gravatar.com/avatar/2a3aa31abfe8eea6930b6afe9a8e39ee?s=96&d=monsterid&r=g",
            "display_name": "Ayesh Karunaratne"
        }
    },
    "requires": "5.2",
    "tested": "6.5.5",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 5,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 5,
    "support_url": "https://wordpress.org/support/plugin/password-hash/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 2000,
    "downloaded": 17854,
    "last_updated": "2024-06-10 4:52pm GMT",
    "added": "2017-01-04",
    "homepage": "",
    "sections": {
        "description": "<p>This plugin swaps out WordPress core&#8217;s password hashing mechanism with PHP 5.5&#8217;s <code>password_hash()</code> and its accompanying functions. By default, PHP uses bcrypt to hash the passwords. If available, this plugin will use modern Argon2 algorithm. The transition will be transparent.</p>\n<ul>\n<li>A password salt will be generated using a Cryptographically Secure Pseudo-Random Number Generator (<code>CSPRNG</code>)</li>\n<li>Password hashes are safe from dictionary attacks with rainbow tables or any other precomputed hash lists, because a secure salt is generated for each password.</li>\n<li>The password hashing is iterated multiple times to provide a good resistance against brute-force attacks.</li>\n<li>Password checks are made in a way that it mitigates time-attacks.</li>\n<li>You do not have to reset passwords of all users. Passwords already hashed in the database will be rehashed automatically and transparently the next time the user logs in.</li>\n<li>PHP might come up with newer password hashing algorithms, and they will be automatically supported without having to reset all the passwords.</li>\n</ul>\n<p>This plugin was made initially because one of our applications used WordPress for authentication, but we needed to use an external system<br />\nto verify the passwords directly from the database too. Since WordPress has its own password hashing algorithm, we decided to make this plugin to address that problem.<br />\nWith this plugin, passwords generated by both WordPress and other custom applications now use the PHP&#8217;s default <code>password_hash()</code> functions without compromising any of the applications&#8217; security.</p>\n<p>This plugin is designed to be as minimal and fast as possible, and can be considered a must-use for EVERY WordPress application given the minimal footprint of this plugin, and considering the importance of using a secure hashing algorithm for passwords.</p>\n",
        "installation": "<ol>\n<li>Upload the plugin files to the <code>/wp-content/plugins/password-hash</code> directory, or install the plugin through the WordPress plugins screen directly.</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; screen in WordPress.</li>\n<li>You are all set! There is nothing to configure. All existing users passwords will be rehashed on their next successful login. There is no configuration UI; it just works.</li>\n</ol>\n",
        "faq": "\n<dt id='do%20i%20have%20to%20reset%20all%20existing%20passwords%3F'>\nDo I have to reset all existing passwords?\n</h4>\n<p>\n<p>Nope! This plugin is smart enough to identify an old password hash, capable to seamlessly validate it using the old algorithm, and update the hash with the new version automatically. Your users wouldn&#8217;t notice a thing.</p>\n</p>\n<dt id='what%20happens%20if%20i%20uninstall%20this%20plugin%3F'>\nWhat happens if I uninstall this plugin?\n</h4>\n<p>\n<p>Password hashing is a one-way operation, and it&#8217;s near impossible to extract the original password from the hash. This<br />\nmeans we cannot undo the effect of this plugin. Your existing users will need to reset their passwords. However, your<br />\npassword hashes will remain safe. This plugin is does one specific thing and does it well. There should be no significant<br />\nimpact on using this plugin.</p>\n</p>\n<dt id='how%20do%20i%20confirm%20the%20new%20hashing%20algorithm%20is%20in%20use%3F'>\nHow do I confirm the new hashing algorithm is in use?\n</h4>\n<p>\n<p>The easiest way would be to check your database from PHPMyAdmin or any other software in its line. Check if the password<br />\nhash field in your users table has the format <code>$2y$10...</code>. Those who have not updated their hashes will have a different<br />\nformat. However, if the plugin is unable to override the password hashing algorithm from WordPress core, you will see a<br />\nnotification in your dashboard. If you do not see anything, you are golden.</p>\n</p>\n<dt id='how%20to%20use%20%60argon2i%60%20and%20%60argon2id%60%20hashing%20algorithms%3F'>\nHow to use `Argon2I` and `Argon2ID` hashing algorithms?\n</h4>\n<p>\n<p>To keep the plugin size minimal, this plugin does not offer a UI configuration page. You can set the password hashing<br />\nalgorithm with a configuration value set in <code>wp-config.php</code> file.</p>\n<p>Open your <code>wp-config.php</code> file at the root of your WordPress site, and find the line that says <code>That's all, stop editing! Happy publishing</code>.<br />\nAbove this line, you can configure the hashing algorithm you want this plugin to use. Note that a wrong configuration value<br />\nmeans your users will not be able to log in until you fix this configuration option. It&#8217;s not recommended that you set<br />\nthis configuration value unless you know what you are doing.</p>\n<pre><code>define( 'WP_PASSWORD_HASH_ALGO', PASSWORD_ARGON2ID );\n</code></pre>\n<p>You can use the following values depending on your PHP version:<br />\n &#8211; <strong>PHP 7.2 or later</strong>: <code>PASSWORD_ARGON2I</code><br />\n &#8211; <strong>PHP 7.3 or later</strong>: <code>PASSWORD_ARGON2ID</code> (recommended)</p>\n</p>\n<dt id='how%20do%20i%20configure%20options%20for%20the%20specified%20hashing%20algorithm%3F'>\nHow do I configure options for the specified hashing algorithm?\n</h4>\n<p>\n<p>Alrighty folks, read carefully: This plugin can listen to a configuration option you specify and pass it along to the hashing<br />\nprocess. Please make sure you are absolutely sure about the values you set here. If you set a value too easy to crack,<br />\nyou will open up a security vulnerability in your site. If you set a value too high, your server will take too much resources.</p>\n<p>This plugin does not make any effort to <em>validate</em> the configuration you set. If you do not configure a value, plugin will<br />\nuse the default value your PHP version comes with.</p>\n<p>If you would still like to configure these options, similar to the way you set the hashing algorithm, open the <code>wp-config.php</code><br />\nfile for your WordPress site (at root of your WordPress installation), and right below the line that you configure hashing<br />\nalgorithm (see FAQ above), set your configuration values as well. Here is an example (not necessarily a recommendation):</p>\n<pre><code>define( 'WP_PASSWORD_HASH_OPTIONS', ['memory_cost' =&gt; 2&lt;&lt;16, 'time_cost' =&gt; \\PASSWORD_ARGON2_DEFAULT_TIME_COST, 'threads' =&gt; \\PASSWORD_ARGON2_DEFAULT_THREADS]] );\n</code></pre>\n<p>The values you set here will be different based on the algorithm you set. You <em>must</em> set the <code>WP_PASSWORD_HASH_ALGO</code><br />\nconfiguration in order for this to be effective.</p>\n<p>See https://www.php.net/manual/en/password.constants.php for more examples and information.</p>\n<p><strong>Existing password hashes will be updated the next time the user logs in. Existing hashes will be checked using the existing algorithm regardless of this configuration.</strong></p>\n</p>\n<dt id='how%20did%20pirates%20collaborate%20before%20computers%3F'>\nHow did pirates collaborate before computers?\n</h4>\n<p>\n<p>Pier to pier networking.</p>\n</p>\n\n",
        "changelog": "<h4>1.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n<h4>1.1</h4>\n<ul>\n<li>Fixed a bug for PHP 5.5 users whose PHP core lacks the time-safe hash_equals function, resulting in a fatal error. This version introduces a polyfill to add that functionality for PHP 5.5 users. Users with newer PHP versions will use PHP-provided hash_equals() function.</li>\n</ul>\n<h4>1.2</h4>\n<ul>\n<li>This plugin now requires WordPress minimum version 3.9.2 the least, and uses the hash_equals() function polyfill provided by WordPress core.</li>\n</ul>\n<h4>1.4</h4>\n<ul>\n<li>Skipped 1.3 version because a WIP Argon2i support conflicted with the bug fix (#2). Argon2i support will be added in a future release.</li>\n<li>Fixes an error with password validation when the PasswordHash class from WordPress core is not loaded. See https://github.com/Ayesh/wordpress-password-hash/pull/2</li>\n</ul>\n<h4>1.5</h4>\n<ul>\n<li>Fix a security issue with the password verification when updating from a password_hash()-compatible hashing algorithm to another. Thanks to Steve Thomas (Sc00bz on GitHub).</li>\n</ul>\n<h4>2.0</h4>\n<p>This is a major rewrite of the plugin. This version still requires PHP 5.5, but WordPress 5.2+ now requires PHP version 5.6 to function, and this is enforced at plugin level as well.</p>\n<p>Core functionality of the plugin is extracted to a separate class. This plugin aims to be as light-weight as possible, and this version cuts the main plugin file size to less than half the v1.x size.</p>\n<p>There is a new namespaced PasswordHash class that is cleaner and well-structured compared to our v1 code base.</p>\n<ul>\n<li>Fixes a bug that the hook-provided hash cost changes did not trigger a password rehash. Thanks to Steve Thomas (Sc00bz on GitHub).</li>\n<li>Adds support for Argon2I, Argon2ID and any future hashing algorithms PHP will introduce. See the updated FAQ item on how to use the new hashing algorithms.</li>\n<li>Removed a helper function used to trigger an admin warning if the plugin cannot properly work. The notices are now shown with help of lambda functions (which further reduces the code bloat and load).</li>\n</ul>\n<h4>2.1</h4>\n<ul>\n<li>Adds support for &#8220;WP_PASSWORD_HASH_OPTIONS&#8221; configuration option that can be set in <code>wp-config.php</code> to configure password hashing options.</li>\n<li>Update WordPress core &#8220;Tested up to&#8221; field to WordPress 5.6.</li>\n</ul>\n<h4>3.0</h4>\n<ul>\n<li>Drops support for PHP &lt; 7.0</li>\n<li>Class methods and functions have return types where applicable.</li>\n<li>Tested upto WordPress 6.3</li>\n<li>Uses FQFN/FQCN where available as a micro-optimization</li>\n</ul>\n"
    },
    "short_description": "Makes WordPress use PHP&#039;s native password_hash() functions for portable, stronger, and time-attack safe bcrypt and Argon2 hashes.",
    "description": "<p>This plugin swaps out WordPress core&#8217;s password hashing mechanism with PHP 5.5&#8217;s <code>password_hash()</code> and its accompanying functions. By default, PHP uses bcrypt to hash the passwords. If available, this plugin will use modern Argon2 algorithm. The transition will be transparent.</p>\n<ul>\n<li>A password salt will be generated using a Cryptographically Secure Pseudo-Random Number Generator (<code>CSPRNG</code>)</li>\n<li>Password hashes are safe from dictionary attacks with rainbow tables or any other precomputed hash lists, because a secure salt is generated for each password.</li>\n<li>The password hashing is iterated multiple times to provide a good resistance against brute-force attacks.</li>\n<li>Password checks are made in a way that it mitigates time-attacks.</li>\n<li>You do not have to reset passwords of all users. Passwords already hashed in the database will be rehashed automatically and transparently the next time the user logs in.</li>\n<li>PHP might come up with newer password hashing algorithms, and they will be automatically supported without having to reset all the passwords.</li>\n</ul>\n<p>This plugin was made initially because one of our applications used WordPress for authentication, but we needed to use an external system<br />\nto verify the passwords directly from the database too. Since WordPress has its own password hashing algorithm, we decided to make this plugin to address that problem.<br />\nWith this plugin, passwords generated by both WordPress and other custom applications now use the PHP&#8217;s default <code>password_hash()</code> functions without compromising any of the applications&#8217; security.</p>\n<p>This plugin is designed to be as minimal and fast as possible, and can be considered a must-use for EVERY WordPress application given the minimal footprint of this plugin, and considering the importance of using a secure hashing algorithm for passwords.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/password-hash.3.0.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "argon2": "argon2",
        "bcrypt": "bcrypt",
        "password": "password",
        "password-hashing": "password hashing",
        "password_hash": "password_hash"
    },
    "stable_tag": "3.0",
    "versions": {
        "1.0": "https://downloads.wordpress.org/plugin/password-hash.1.0.zip",
        "1.1": "https://downloads.wordpress.org/plugin/password-hash.1.1.zip",
        "1.2": "https://downloads.wordpress.org/plugin/password-hash.1.2.zip",
        "1.4": "https://downloads.wordpress.org/plugin/password-hash.1.4.zip",
        "1.5": "https://downloads.wordpress.org/plugin/password-hash.1.5.zip",
        "2.0": "https://downloads.wordpress.org/plugin/password-hash.2.0.zip",
        "2.1": "https://downloads.wordpress.org/plugin/password-hash.2.1.zip",
        "3.0": "https://downloads.wordpress.org/plugin/password-hash.3.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/password-hash.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/password-hash/assets/banner-772x250.png?rev=1569073",
        "high": "https://ps.w.org/password-hash/assets/banner-1544x500.png?rev=1569073"
    },
    "icons": {
        "1x": "https://ps.w.org/password-hash/assets/icon-128x128.png?rev=1569084",
        "2x": "https://ps.w.org/password-hash/assets/icon-256x256.png?rev=1569084"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}