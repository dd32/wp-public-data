{
    "name": "Meta Extension",
    "slug": "meta-extensions",
    "version": "1.0.3",
    "author": "<a href=\"http://www.premiumdigitalservices.net\">Scott E. Royalty</a>",
    "author_profile": "https://profiles.wordpress.org/sroyalty/",
    "contributors": {
        "sroyalty": {
            "profile": "https://profiles.wordpress.org/sroyalty/",
            "avatar": "https://secure.gravatar.com/avatar/b492caa39c1842efb6006ff3dd3de24f?s=96&d=monsterid&r=g",
            "display_name": "sroyalty"
        }
    },
    "requires": "2.0.2",
    "tested": "3.0.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/meta-extensions/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 3107,
    "last_updated": "2010-07-11 2:05pm GMT",
    "added": "2010-06-10",
    "homepage": "http://www.premiumdigitalservices.net",
    "sections": {
        "description": "<p>This plugin takes a simple concept of giving you fields to enter information that use the meta tags built into<br />\nWordpress and expands on it. Modifying conf.txt in the plugin directory will allow you to enter custom fields to<br />\nthe Posts pages to add textfields, textarea, dropdown selections, checkboxes, and radio selections.</p>\n<p>On top of all this simplicity, it also integrates several popular WordPress plugins. With gallery selection for<br />\nNextGen Gallery you can select a gallery to save the id to a meta field for your post to pull in your theme. Support<br />\nfor WordTube video selection is also added. WP-Download Manager is also supported in this initial release to get ids<br />\nfor downloads as well.</p>\n<p>Now while that may seem enough to make this a popular plugin, there is more. Meta Extensions allows you mark the<br />\nfields to auto add tags based on field title or content (explained in the readme). It also allows you to set up<br />\ncheckboxes to add a post to/remove from a category automatically as wanted. All from the single conf.txt file included<br />\nwith the plugin.</p>\n<p>One of the latest features is the ability to place conf.txt in your current theme&#8217;s directory. By placing conf.txt in<br />\nthe theme directories this allows you to run the plugin with multiple themes on your site and have custom conf.txt per<br />\ntheme to only show the specific fields needed in that theme. If the file is not in the theme directory, it pulls from<br />\nthe default conf.txt in the plugin&#8217;s directory.</p>\n<p>Related Links:</p>\n<ul>\n<li><a href=\"http://www.premiumdigitalservices.net/blog/\" title=\"Meta Extensions Plugin for WordPress\" rel=\"nofollow ugc\">Plugin Homepage</a></li>\n</ul>\n<h3>Arbitrary section</h3>\n<h4>CONFIGURATION</h4>\n<p>Filed/Element Types:<br />\n    textfield &#8211; HTML Form Textfield<br />\n    textarea  &#8211; HTML Form Textarea<br />\n    checkbox  &#8211; HTML Form Checkbox<br />\n    radio     &#8211; HTML Form Radio selections<br />\n    select    &#8211; HTML Form Select box<br />\n    gallery   &#8211; HTML Form Select box to choose a NextGen Gallery<br />\n    video     &#8211; HTML Form Select box to choose a Wordtube Video<br />\n    download  &#8211; HTML Form Select box to choose a WordPress Download Manager file</p>\n<p>To specify the custom fields, edit the file conf.txt</p>\n<p>Each entry begins with the subject inside square brackets. The second<br />\nline specifies its type. The third line, which only applies to type<br />\n&#8220;radio&#8221; and &#8220;select,&#8221; enumerates the available options. Each option<br />\nhas to be separated by a hash mark (#). Each entry for standard HTML<br />\nform entities you can also include a default which tells it which to<br />\nmark as selected or checked. You can also include the tag option which<br />\nwill tell the plugin to add the selection as a post tag automatically.<br />\nTags are explained further down. Checkbox also has unique entries called<br />\ncategory_id and category_name. These are filled based on existing categories<br />\nin your WordPress site. This can be used to auto add/remove the post to the<br />\nentered category id (and it&#8217;s matching name for error checks) when used.</p>\n<p>Ex.</p>\n<p>[Plan]<br />\ntype = textfield<br />\nsubtitle = Enter the generic name of your plan here.</p>\n<p>[Favorite Post]<br />\ntype = checkbox<br />\ncategory_id = 4<br />\ncategory_name = Project Plans</p>\n<p>[Miles Walked]<br />\ntype = radio<br />\nvalue = 0-9#10-19#20+<br />\ndefault = 0-9</p>\n<p>[Temper Level]<br />\ntype = select<br />\nvalue = High#Medium#Low</p>\n<p>[Hidden Thought]<br />\ntype = textarea<br />\nrows = 4<br />\ncols = 40</p>\n<p>[Picture Gallery]<br />\ntype = gallery<br />\ntag = 0</p>\n<p>[The Video]<br />\ntype = video<br />\ntag = 0</p>\n<p>[Attachment]<br />\ntype = download<br />\ntag = 0</p>\n<p>Tags can be very useful. Below is how each special type generates the<br />\ntag for it.</p>\n<p>Tag Design:<br />\n    textfield &#8211; Title of the entry when filled<br />\n    textarea  &#8211; Title of the entry when filled<br />\n    checkbox  &#8211; Title of the entry when checked<br />\n    radio     &#8211; The name of the selection<br />\n    select    &#8211; The name of the selection<br />\n    gallery   &#8211; Not handled<br />\n    video     &#8211; Not handled</p>\n<h4>Useage</h4>\n<p>Once you build your conf.txt file, you are ready to start making posts<br />\nusing the custom fields. In order to call these fields you can either<br />\nuse the built in get methods for post meta, or you can use the ones that<br />\nI have added to the metaext class to keep your code clean and know what<br />\nis what. Below is the current list of functions you can use in your theme<br />\nto call the meta information easily.</p>\n<p>Meta Extensions Class:<br />\n    metaext::get_single_metaext($meta_name, $limit)<br />\n        Description: Creates a post object containing all the Posts with the meta_name passed being set in them.<br />\n            $meta_name: the name in brackets for the field you want to pull the list of posts using this field.<br />\n            $limit: how many of these posts to pull. Defaults to 5 if nothing is passed.<br />\n    metaext::get_multi_metaext($meta_names, $limit)<br />\n        Description: Creates a post object containing all the Posts the all the meta_names passed (meta_names is an array).<br />\n            $meta_names: the names in brackets in an array for the fields you want to pull the list of posts using this field.<br />\n            $limit: how many of these posts to pull. Defaults to 5 if nothing is passed.<br />\n    metaext:: get_value_metaext($the_ID, $name)<br />\n        Description: Gets the value for the passed name from the post id passed.<br />\n            $the_ID: the post ID you are wanting to pull the custom field&#8217;s value from.<br />\n            $name: The field name of the entry you want to pull the value for. The name is what is in [] and is case sensitive.</p>\n<p>Meta Extensions WordPress Download Manager Class:<br />\n    metaext_wpdm::get_metaext_downloadlink($id)<br />\n        Description: Returns the download link for WPDM ID passed.<br />\n            $id: The download ID (can use metaext::get_value_metaext() to get the ID) you want the link for.<br />\n    metaext_wpdm::show_metaext_downloadlink($id)<br />\n        Description: Echos the download link for WPDM ID passed.<br />\n            $id: The download ID (can use metaext::get_value_metaext() to get the ID) you want the link for.</p>\n<p>Meta Extensions NextGen Gallery Class:<br />\n    metaext_ngg::get_metaext_firstpic($galleryid)<br />\n        Description: Pulls the first image&#8217;s src link for the gallery id passed to it.<br />\n            $galleryid: The gallery ID that you want to pull the first pic&#8217;s image url for.<br />\n    metaext_ngg::show_metaext_firstpic($galleryid, $class = &#8221;)<br />\n        Description: Echos the first image&#8217;s src link for the gallery id passed to it using the optional class name passed.<br />\n            $galleryid: The gallery ID that you want to pull the first pic&#8217;s image url for.<br />\n            $class: The name of the class you want to use, optional.<br />\n    metaext_ngg::show_metaext_gallery($galleryid)<br />\n        Description: Echos the Gallery ID passed, the same as using the NGG show gallery shortcode.<br />\n            $galleryid: The gallery ID that you want to show the gallery for.</p>\n<p>Meta Extensions WordTube Class:<br />\n    metaext_wt::get_metaext_wtvideo($videoid)<br />\n        Description: Returns the Video code to show on a page for the video id passed.<br />\n            $videoid: The video id to get the code for.<br />\n    metaext_wt::show_metaext_wtvideo($videoid)<br />\n        Description: Echos the Video code to show on a page for the video id passed.<br />\n            $videoid: The video id to get the code for.</p>\n<h4>Code Examples</h4>\n<pre><code>&lt;div id=\"meta-ext-test\"&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_gallery') ) : ?&gt;\n        &lt;h2&gt;Test for Galleries using Meta Extensions with NextGen Gallery&lt;/h2&gt;\n        &lt;?php metaext_ngg::show_metaext_gallery(metaext::get_value_metaext(get_the_ID(), 'the_gallery')) ?&gt;\n    &lt;?php endif; ?&gt;\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_video') ) : ?&gt;\n        &lt;h2&gt;Test for Videos using Meta Extensions with WordTube&lt;/h2&gt;\n        &lt;?php metaext_wt::show_metaext_wtvideo(metaext::get_value_metaext(get_the_ID(), 'the_video')) ?&gt;\n    &lt;?php endif; ?&gt;\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_download') ) : ?&gt;\n        &lt;h2&gt;Test for Downloads using Meta Extensions with WP Download Manager&lt;/h2&gt;\n        &lt;?php metaext_wpdm::show_metaext_downloadlink(metaext::get_value_metaext(get_the_ID(), 'the_download')) ?&gt;\n    &lt;?php endif; ?&gt;\n&lt;/div&gt;\n</code></pre>\n",
        "installation": "<ol>\n<li>Extract and upload the contents of the zip file to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Edit the conf.txt file in the plugin directory for the fields you want to set up.</li>\n<li>Under Posts is where the new fields will populate.</li>\n</ol>\n",
        "faq": "<p>Q: Is there any shortcode useage yet?<br />\nA: Not yet, possible in future versions.</p>\n",
        "changelog": "<h4>1.0</h4>\n<ul>\n<li>Initial public release.</li>\n</ul>\n<h4>1.0.1</h4>\n<ul>\n<li>Upgraded to conf.txt instead of conf.txt for editing via the Plugin Editor.</li>\n</ul>\n<h4>1.0.2</h4>\n<ul>\n<li>Fixed linebreaks with subtitles in several types.</li>\n</ul>\n<h4>1.0.3</h4>\n<ul>\n<li>Changed html layout to match admin panel boxes.</li>\n<li>Now uses current theme name in the title box.</li>\n<li>Checks for conf.txt in current theme&#8217;s directory first. If exists, uses that one. If not, defaults to one in plugin directory.</li>\n</ul>\n"
    },
    "short_description": "Allows adding custom form fields to posts, storing them in custom meta fields. Integrates NGG, WT, and WP-DM.",
    "description": "<p>This plugin takes a simple concept of giving you fields to enter information that use the meta tags built into<br />\nWordpress and expands on it. Modifying conf.txt in the plugin directory will allow you to enter custom fields to<br />\nthe Posts pages to add textfields, textarea, dropdown selections, checkboxes, and radio selections.</p>\n<p>On top of all this simplicity, it also integrates several popular WordPress plugins. With gallery selection for<br />\nNextGen Gallery you can select a gallery to save the id to a meta field for your post to pull in your theme. Support<br />\nfor WordTube video selection is also added. WP-Download Manager is also supported in this initial release to get ids<br />\nfor downloads as well.</p>\n<p>Now while that may seem enough to make this a popular plugin, there is more. Meta Extensions allows you mark the<br />\nfields to auto add tags based on field title or content (explained in the readme). It also allows you to set up<br />\ncheckboxes to add a post to/remove from a category automatically as wanted. All from the single conf.txt file included<br />\nwith the plugin.</p>\n<p>One of the latest features is the ability to place conf.txt in your current theme&#8217;s directory. By placing conf.txt in<br />\nthe theme directories this allows you to run the plugin with multiple themes on your site and have custom conf.txt per<br />\ntheme to only show the specific fields needed in that theme. If the file is not in the theme directory, it pulls from<br />\nthe default conf.txt in the plugin&#8217;s directory.</p>\n<p>Related Links:</p>\n<ul>\n<li><a href=\"http://www.premiumdigitalservices.net/blog/\" title=\"Meta Extensions Plugin for WordPress\" rel=\"nofollow ugc\">Plugin Homepage</a></li>\n</ul>\n<h3>Arbitrary section</h3>\n<h4>CONFIGURATION</h4>\n<p>Filed/Element Types:<br />\n    textfield &#8211; HTML Form Textfield<br />\n    textarea  &#8211; HTML Form Textarea<br />\n    checkbox  &#8211; HTML Form Checkbox<br />\n    radio     &#8211; HTML Form Radio selections<br />\n    select    &#8211; HTML Form Select box<br />\n    gallery   &#8211; HTML Form Select box to choose a NextGen Gallery<br />\n    video     &#8211; HTML Form Select box to choose a Wordtube Video<br />\n    download  &#8211; HTML Form Select box to choose a WordPress Download Manager file</p>\n<p>To specify the custom fields, edit the file conf.txt</p>\n<p>Each entry begins with the subject inside square brackets. The second<br />\nline specifies its type. The third line, which only applies to type<br />\n&#8220;radio&#8221; and &#8220;select,&#8221; enumerates the available options. Each option<br />\nhas to be separated by a hash mark (#). Each entry for standard HTML<br />\nform entities you can also include a default which tells it which to<br />\nmark as selected or checked. You can also include the tag option which<br />\nwill tell the plugin to add the selection as a post tag automatically.<br />\nTags are explained further down. Checkbox also has unique entries called<br />\ncategory_id and category_name. These are filled based on existing categories<br />\nin your WordPress site. This can be used to auto add/remove the post to the<br />\nentered category id (and it&#8217;s matching name for error checks) when used.</p>\n<p>Ex.</p>\n<p>[Plan]<br />\ntype = textfield<br />\nsubtitle = Enter the generic name of your plan here.</p>\n<p>[Favorite Post]<br />\ntype = checkbox<br />\ncategory_id = 4<br />\ncategory_name = Project Plans</p>\n<p>[Miles Walked]<br />\ntype = radio<br />\nvalue = 0-9#10-19#20+<br />\ndefault = 0-9</p>\n<p>[Temper Level]<br />\ntype = select<br />\nvalue = High#Medium#Low</p>\n<p>[Hidden Thought]<br />\ntype = textarea<br />\nrows = 4<br />\ncols = 40</p>\n<p>[Picture Gallery]<br />\ntype = gallery<br />\ntag = 0</p>\n<p>[The Video]<br />\ntype = video<br />\ntag = 0</p>\n<p>[Attachment]<br />\ntype = download<br />\ntag = 0</p>\n<p>Tags can be very useful. Below is how each special type generates the<br />\ntag for it.</p>\n<p>Tag Design:<br />\n    textfield &#8211; Title of the entry when filled<br />\n    textarea  &#8211; Title of the entry when filled<br />\n    checkbox  &#8211; Title of the entry when checked<br />\n    radio     &#8211; The name of the selection<br />\n    select    &#8211; The name of the selection<br />\n    gallery   &#8211; Not handled<br />\n    video     &#8211; Not handled</p>\n<h4>Useage</h4>\n<p>Once you build your conf.txt file, you are ready to start making posts<br />\nusing the custom fields. In order to call these fields you can either<br />\nuse the built in get methods for post meta, or you can use the ones that<br />\nI have added to the metaext class to keep your code clean and know what<br />\nis what. Below is the current list of functions you can use in your theme<br />\nto call the meta information easily.</p>\n<p>Meta Extensions Class:<br />\n    metaext::get_single_metaext($meta_name, $limit)<br />\n        Description: Creates a post object containing all the Posts with the meta_name passed being set in them.<br />\n            $meta_name: the name in brackets for the field you want to pull the list of posts using this field.<br />\n            $limit: how many of these posts to pull. Defaults to 5 if nothing is passed.<br />\n    metaext::get_multi_metaext($meta_names, $limit)<br />\n        Description: Creates a post object containing all the Posts the all the meta_names passed (meta_names is an array).<br />\n            $meta_names: the names in brackets in an array for the fields you want to pull the list of posts using this field.<br />\n            $limit: how many of these posts to pull. Defaults to 5 if nothing is passed.<br />\n    metaext:: get_value_metaext($the_ID, $name)<br />\n        Description: Gets the value for the passed name from the post id passed.<br />\n            $the_ID: the post ID you are wanting to pull the custom field&#8217;s value from.<br />\n            $name: The field name of the entry you want to pull the value for. The name is what is in [] and is case sensitive.</p>\n<p>Meta Extensions WordPress Download Manager Class:<br />\n    metaext_wpdm::get_metaext_downloadlink($id)<br />\n        Description: Returns the download link for WPDM ID passed.<br />\n            $id: The download ID (can use metaext::get_value_metaext() to get the ID) you want the link for.<br />\n    metaext_wpdm::show_metaext_downloadlink($id)<br />\n        Description: Echos the download link for WPDM ID passed.<br />\n            $id: The download ID (can use metaext::get_value_metaext() to get the ID) you want the link for.</p>\n<p>Meta Extensions NextGen Gallery Class:<br />\n    metaext_ngg::get_metaext_firstpic($galleryid)<br />\n        Description: Pulls the first image&#8217;s src link for the gallery id passed to it.<br />\n            $galleryid: The gallery ID that you want to pull the first pic&#8217;s image url for.<br />\n    metaext_ngg::show_metaext_firstpic($galleryid, $class = &#8221;)<br />\n        Description: Echos the first image&#8217;s src link for the gallery id passed to it using the optional class name passed.<br />\n            $galleryid: The gallery ID that you want to pull the first pic&#8217;s image url for.<br />\n            $class: The name of the class you want to use, optional.<br />\n    metaext_ngg::show_metaext_gallery($galleryid)<br />\n        Description: Echos the Gallery ID passed, the same as using the NGG show gallery shortcode.<br />\n            $galleryid: The gallery ID that you want to show the gallery for.</p>\n<p>Meta Extensions WordTube Class:<br />\n    metaext_wt::get_metaext_wtvideo($videoid)<br />\n        Description: Returns the Video code to show on a page for the video id passed.<br />\n            $videoid: The video id to get the code for.<br />\n    metaext_wt::show_metaext_wtvideo($videoid)<br />\n        Description: Echos the Video code to show on a page for the video id passed.<br />\n            $videoid: The video id to get the code for.</p>\n<h4>Code Examples</h4>\n<pre><code>&lt;div id=\"meta-ext-test\"&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_gallery') ) : ?&gt;\n        &lt;h2&gt;Test for Galleries using Meta Extensions with NextGen Gallery&lt;/h2&gt;\n        &lt;?php metaext_ngg::show_metaext_gallery(metaext::get_value_metaext(get_the_ID(), 'the_gallery')) ?&gt;\n    &lt;?php endif; ?&gt;\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_video') ) : ?&gt;\n        &lt;h2&gt;Test for Videos using Meta Extensions with WordTube&lt;/h2&gt;\n        &lt;?php metaext_wt::show_metaext_wtvideo(metaext::get_value_metaext(get_the_ID(), 'the_video')) ?&gt;\n    &lt;?php endif; ?&gt;\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;?php if ( metaext::get_value_metaext(get_the_ID(), 'the_download') ) : ?&gt;\n        &lt;h2&gt;Test for Downloads using Meta Extensions with WP Download Manager&lt;/h2&gt;\n        &lt;?php metaext_wpdm::show_metaext_downloadlink(metaext::get_value_metaext(get_the_ID(), 'the_download')) ?&gt;\n    &lt;?php endif; ?&gt;\n&lt;/div&gt;\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/meta-extensions.zip",
    "upgrade_notice": {
        "": "<ol>\n<li>Nothing special required.</li>\n</ol>"
    },
    "screenshots": [],
    "tags": {
        "custom-fields": "custom fields",
        "fields": "fields",
        "meta": "meta",
        "meta-fields": "meta fields",
        "posts": "posts"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "http://www.premiumdigitalservices.net/blog",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/meta-extensions.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}