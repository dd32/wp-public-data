{
    "name": "Sewn In Notifications",
    "slug": "sewn-in-notifications",
    "version": "1.1.1",
    "author": "<a href=\"http://Jupitercow.com/\">Jupitercow</a>",
    "author_profile": "https://profiles.wordpress.org/jcow/",
    "contributors": {
        "jcow": {
            "profile": "https://profiles.wordpress.org/jcow/",
            "avatar": "https://secure.gravatar.com/avatar/d209f2d41dc5fdbba19dc9138783b953?s=96&d=monsterid&r=g",
            "display_name": "Jupitercow"
        },
        "ekaj": {
            "profile": "https://profiles.wordpress.org/ekaj/",
            "avatar": "https://secure.gravatar.com/avatar/bbaea6c8034920ea74c94f26f582bb9a?s=96&d=monsterid&r=g",
            "display_name": "Jake Snyder"
        }
    },
    "requires": "3.6.1",
    "tested": "4.2.38",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/sewn-in-notifications/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 957,
    "last_updated": "2015-06-13 2:27am GMT",
    "added": "2015-06-13",
    "homepage": "https://wordpress.org/plugins/sewn-in-notifications/",
    "sections": {
        "description": "<p>A plugin for WordPress that creates a very pluggable framework to add notifications on the front end of your application. Notifications can be generated by query variables or through template functions and actions.</p>\n<p>This plugin can be used to create site wide notifications, or you can narrow it down to specific pages.</p>\n<h4>Add the Notification Center to Your Template(s)</h4>\n<p>The most basic way to add notifications is sitewide. You can add the &#8220;show&#8221; action to a template like your header.php file. This is the most powerful use for the plugin: uniform, centralized notifications.</p>\n<pre><code>&lt;?php do_action( 'sewn/notifications/show' ); ?&gt;\n</code></pre>\n<h4>Create Query Variable Notifications</h4>\n<p>The simplest way to extend the notification center is to add query variable key/value pairs to generate a new message when url query variables are submitted.</p>\n<pre><code>&lt;?php\nadd_filter( 'sewn/notifications/queries', 'custom_add_query_notifications' );\nfunction custom_add_query_notifications( $queries )\n{\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'true',\n        'message' =&gt; \"Updated.\",\n        'args' =&gt; 'fade=true'\n    );\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'failed',\n        'message' =&gt; \"Unable to update.\",\n        'args' =&gt; 'dismiss=true&amp;error=true'\n    );\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'finished',\n        'message' =&gt; \"Finished!\",\n        'args' =&gt; 'fade=10000' // wait ten seconds before fading\n    );\n    return $queries;\n}\n?&gt;\n</code></pre>\n<p>Now whenever a query variable is added to the end of a page, a message can be shown in the notification center.</p>\n<p>So <code>http://example.com/path/to/page/?update=true</code> will generate the message: &#8220;Updated.&#8221; in the notification center.</p>\n<h4>Arguments for Messages</h4>\n<p>When adding a message, there are arguments you can use to customize the functionality.</p>\n<ol>\n<li><code>error</code> When set to true, this will add the error class to the message. Default: false</li>\n<li><code>fade</code> When set to true, this will fade the message out after 3 seconds. You can change the pause time by setting fade to a number (in milliseconds). Default: false</li>\n<li><code>dismiss</code> Allows a message to be dismissed by the user with a close button. Default: false</li>\n<li><code>event</code> Allows message to be persistent, so that it shows up on each page load unless dismissed. The event tracks the message and updates the user&#8217;s meta when the message is dismissed, so it will stop showing up. Default: false</li>\n<li><code>page</code> Lock a message to a specific page only. When page is set, a <code>is_page($page)</code> check will be performed before showing the message. Particularly useful when setting up query variable pairs. Default: false</li>\n</ol>\n<h4>Maually Generate Notifications</h4>\n<p>Add notifications manually anywhere before the <code>show</code> action.</p>\n<pre><code>if ( $something_happened ) :\n    do_action( 'sewn/notifications/add', $message, $args );\nendif;\n</code></pre>\n",
        "installation": "<ul>\n<li>Install plugin either via the WordPress.org plugin directory, or by uploading the files to your server.</li>\n<li>Activate the plugin via the Plugins admin page.</li>\n</ul>\n",
        "faq": "\n<h4>None yet.</h4>\n<p></p>\n\n",
        "changelog": "<h4>1.1.1 &#8211; 2015-06-08</h4>\n<ul>\n<li>Launched in the repo</li>\n</ul>\n"
    },
    "short_description": "A centralized, application notification center for front end users.",
    "description": "<p>A plugin for WordPress that creates a very pluggable framework to add notifications on the front end of your application. Notifications can be generated by query variables or through template functions and actions.</p>\n<p>This plugin can be used to create site wide notifications, or you can narrow it down to specific pages.</p>\n<h4>Add the Notification Center to Your Template(s)</h4>\n<p>The most basic way to add notifications is sitewide. You can add the &#8220;show&#8221; action to a template like your header.php file. This is the most powerful use for the plugin: uniform, centralized notifications.</p>\n<pre><code>&lt;?php do_action( 'sewn/notifications/show' ); ?&gt;\n</code></pre>\n<h4>Create Query Variable Notifications</h4>\n<p>The simplest way to extend the notification center is to add query variable key/value pairs to generate a new message when url query variables are submitted.</p>\n<pre><code>&lt;?php\nadd_filter( 'sewn/notifications/queries', 'custom_add_query_notifications' );\nfunction custom_add_query_notifications( $queries )\n{\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'true',\n        'message' =&gt; \"Updated.\",\n        'args' =&gt; 'fade=true'\n    );\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'failed',\n        'message' =&gt; \"Unable to update.\",\n        'args' =&gt; 'dismiss=true&amp;error=true'\n    );\n    $queries[] = array(\n        'key' =&gt; 'update',\n        'value' =&gt; 'finished',\n        'message' =&gt; \"Finished!\",\n        'args' =&gt; 'fade=10000' // wait ten seconds before fading\n    );\n    return $queries;\n}\n?&gt;\n</code></pre>\n<p>Now whenever a query variable is added to the end of a page, a message can be shown in the notification center.</p>\n<p>So <code>http://example.com/path/to/page/?update=true</code> will generate the message: &#8220;Updated.&#8221; in the notification center.</p>\n<h4>Arguments for Messages</h4>\n<p>When adding a message, there are arguments you can use to customize the functionality.</p>\n<ol>\n<li><code>error</code> When set to true, this will add the error class to the message. Default: false</li>\n<li><code>fade</code> When set to true, this will fade the message out after 3 seconds. You can change the pause time by setting fade to a number (in milliseconds). Default: false</li>\n<li><code>dismiss</code> Allows a message to be dismissed by the user with a close button. Default: false</li>\n<li><code>event</code> Allows message to be persistent, so that it shows up on each page load unless dismissed. The event tracks the message and updates the user&#8217;s meta when the message is dismissed, so it will stop showing up. Default: false</li>\n<li><code>page</code> Lock a message to a specific page only. When page is set, a <code>is_page($page)</code> check will be performed before showing the message. Particularly useful when setting up query variable pairs. Default: false</li>\n</ol>\n<h4>Maually Generate Notifications</h4>\n<p>Add notifications manually anywhere before the <code>show</code> action.</p>\n<pre><code>if ( $something_happened ) :\n    do_action( 'sewn/notifications/add', $message, $args );\nendif;\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/sewn-in-notifications.1.1.1.zip",
    "upgrade_notice": {
        "1.1.1": "<p>This is the first version in the Wordpress repository.</p>"
    },
    "screenshots": [
        {
            "src": "https://ps.w.org/sewn-in-notifications/assets/screenshot-1.png?rev=1180029",
            "caption": "A basic example of a notification out of the box."
        }
    ],
    "tags": {
        "applications": "applications",
        "front-end": "front end",
        "frontend": "Frontend",
        "messages": "messages",
        "notifications": "Notifications"
    },
    "stable_tag": "1.1.1",
    "versions": {
        "1.1.1": "https://downloads.wordpress.org/plugin/sewn-in-notifications.1.1.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/sewn-in-notifications.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=jacobsnyder%40gmail%2ecom&lc=US&item_name=Jacob%20Snyder&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted",
    "banners": {
        "low": "https://ps.w.org/sewn-in-notifications/assets/banner-772x250.png?rev=1180035",
        "high": "https://ps.w.org/sewn-in-notifications/assets/banner-1544x500.png?rev=1180035"
    },
    "icons": {
        "1x": "https://ps.w.org/sewn-in-notifications/assets/icon-128x128.jpg?rev=1180035",
        "2x": "https://ps.w.org/sewn-in-notifications/assets/icon-256x256.jpg?rev=1180035"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}