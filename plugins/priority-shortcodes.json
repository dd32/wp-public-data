{
    "name": "Priority Shortcodes",
    "slug": "priority-shortcodes",
    "version": "2.0.2",
    "author": "<a href=\"http://www.swinggraphics.com/\">Greg Perham</a>",
    "author_profile": "https://profiles.wordpress.org/swinggraphics/",
    "contributors": {
        "swinggraphics": {
            "profile": "https://profiles.wordpress.org/swinggraphics/",
            "avatar": "https://secure.gravatar.com/avatar/65ad4c2bbbe1a282def2c76275938f51?s=96&d=monsterid&r=g",
            "display_name": "swinggraphics"
        }
    },
    "requires": "2.5.0",
    "tested": "6.5.5",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 20,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 1
    },
    "num_ratings": 1,
    "support_url": "https://wordpress.org/support/plugin/priority-shortcodes/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1400,
    "last_updated": "2024-04-15 22:19:00",
    "added": "2014-09-20",
    "homepage": "https://github.com/swinggraphics/Priority-Shortcodes",
    "sections": {
        "description": "<p><em>Intended for use with the Classic Editor plugin.</em></p>\n<p>Ever get annoyed or frustrated by the way TinyMCE+wpautop+do_shortcode wreak havoc on your shortcodes, wrapping <code>&lt;p&gt;</code>s around <code>&lt;div&gt;</code>s, leaving orphan <code>&lt;/p&gt;</code>s, and all sorts of craziness? This plugin allows you to specify shortcodes to be processed before those other actions, generating the clean code you expected.</p>\n<p>Priority Shortcodes works by adding an action to <code>the_content</code> and <code>widget_text</code> hooks with a higher priority than <code>wpautop</code> and <code>do_shortcode</code>. The result is that those other actions run your shortcode&#8217;s final output, rather than trying to guess if it should be wrapped in <code>&lt;p&gt;</code> tags, etc.</p>\n<p>The <a href=\"https://codex.wordpress.org/Shortcode_API#Output\" rel=\"nofollow ugc\">Codex says</a>:</p>\n<blockquote>\n<p>wpautop recognizes shortcode syntax and will attempt not to wrap p or br tags around shortcodes that stand alone on a line by themselves. Shortcodes intended for use in this manner should ensure that the output is wrapped in an appropriate block tag such as <code>&lt;p&gt;</code> or <code>&lt;div&gt;</code>.</p>\n</blockquote>\n<p>But sometimes shortcodes stand on their own on a line, wanting desperately to be wrapped in a paragraph tag, and sometimes they don&#8217;t. Like a shortcode that generates a <code>&lt;span&gt;</code> tag with some classes. <em>(Yeah, you might want to use <a href=\"https://codex.wordpress.org/TinyMCE_Custom_Styles\" rel=\"nofollow ugc\">custom TinyMCE styles</a> instead for a simple span.)</em></p>\n<h4>Usage</h4>\n<p>Where you want to process a shortcode with priority, use &#8220;[!&#8221; at the start. For example: <code>[my-shortcode]</code> becomes <code>[!my-shortcode]</code> and <code>[my-shortcode]Some content.[/my-shortcode]</code> becomes <code>[!my-shortcode]Some content.[/my-shortcode]</code>.</p>\n<h4>Gutenberg</h4>\n<p>Users of the new WordPress editor, &#8220;Gutenberg&#8221;, will probably not use Priority Shortcodes within the new editor, but the plugin continues to work in the Classic Editor.</p>\n",
        "installation": "<p>See the standard installation instructions at <a href=\"https://codex.wordpress.org/Managing_Plugins#Installing_Plugins\" rel=\"nofollow ugc\">WordPress.org</a> or <a href=\"http://www.wpbeginner.com/beginners-guide/step-by-step-guide-to-install-a-wordpress-plugin-for-beginners/\" rel=\"nofollow ugc\">WPBeginner</a>.</p>\n<p>I expect developers will copy the code directly into their functions.php files, possibly customizing the string to specify the priority shortcodes.</p>\n",
        "faq": "\n<dt id='does%20this%20affect%20all%20shortcodes%3F'>\nDoes this affect all shortcodes?\n</h4>\n<p>\n<p>No. See &#8220;Usage&#8221; above.</p>\n</p>\n<dt id='should%20i%20use%20this%20everywhere%20instead%20of%20the%20normal%20shortcodes%3F'>\nShould I use this everywhere instead of the normal shortcodes?\n</h4>\n<p>\n<p>No. Only use it on shortcodes that are being messed up.</p>\n</p>\n<dt id='how%20does%20it%20work%3F'>\nHow does it work?\n</h4>\n<p>\n<p>The plugin adds an action hook to <code>the_content</code> with priority 9, before <code>wpautop</code> and <code>do_shortcode</code>, which run with normal priority 10. The function that runs in our action hook is basically a copy/mashup of <code>do_shortcode()</code> and <code>do_shortcode_tag()</code> with a custom regular expression. That regex pulled using <code>get_shortcode_regex()</code>, so any updates to that expression in core will be respected by this plugin. See <a href=\"https://core.trac.wordpress.org/browser/tags/4.0/src/wp-includes/shortcodes.php#L0\" rel=\"nofollow ugc\">shortcodes.php</a></p>\n</p>\n<dt id='why%20not%20just%20change%20the%20order%20wpautop%20and%20do_shortcode%20run%20in%3F'>\nWhy not just change the order wpautop and do_shortcode run in?\n</h4>\n<p>\n<p>That can mess up other shortcodes. Plus, I&#8217;ve tried it, and it doesn&#8217;t have the result I wanted at all.</p>\n</p>\n\n",
        "changelog": "<h4>2.0.2</h4>\n<ul>\n<li>Tested with WP 5.6</li>\n<li>Updated README with note about Gutenberg</li>\n</ul>\n<h4>2.0.1</h4>\n<ul>\n<li>Bumped &#8220;Tested up to&#8221; version</li>\n</ul>\n<h4>2.0</h4>\n<ul>\n<li>Changed to more simple <code>[!</code> syntax</li>\n<li>Added compatibility with text widgets</li>\n</ul>\n<h4>1.0</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n"
    },
    "short_description": "Processes specific shortcodes before wpautop() and do_shortcode()",
    "description": "<p><em>Intended for use with the Classic Editor plugin.</em></p>\n<p>Ever get annoyed or frustrated by the way TinyMCE+wpautop+do_shortcode wreak havoc on your shortcodes, wrapping <code>&lt;p&gt;</code>s around <code>&lt;div&gt;</code>s, leaving orphan <code>&lt;/p&gt;</code>s, and all sorts of craziness? This plugin allows you to specify shortcodes to be processed before those other actions, generating the clean code you expected.</p>\n<p>Priority Shortcodes works by adding an action to <code>the_content</code> and <code>widget_text</code> hooks with a higher priority than <code>wpautop</code> and <code>do_shortcode</code>. The result is that those other actions run your shortcode&#8217;s final output, rather than trying to guess if it should be wrapped in <code>&lt;p&gt;</code> tags, etc.</p>\n<p>The <a href=\"https://codex.wordpress.org/Shortcode_API#Output\" rel=\"nofollow ugc\">Codex says</a>:</p>\n<blockquote>\n<p>wpautop recognizes shortcode syntax and will attempt not to wrap p or br tags around shortcodes that stand alone on a line by themselves. Shortcodes intended for use in this manner should ensure that the output is wrapped in an appropriate block tag such as <code>&lt;p&gt;</code> or <code>&lt;div&gt;</code>.</p>\n</blockquote>\n<p>But sometimes shortcodes stand on their own on a line, wanting desperately to be wrapped in a paragraph tag, and sometimes they don&#8217;t. Like a shortcode that generates a <code>&lt;span&gt;</code> tag with some classes. <em>(Yeah, you might want to use <a href=\"https://codex.wordpress.org/TinyMCE_Custom_Styles\" rel=\"nofollow ugc\">custom TinyMCE styles</a> instead for a simple span.)</em></p>\n<h4>Usage</h4>\n<p>Where you want to process a shortcode with priority, use &#8220;[!&#8221; at the start. For example: <code>[my-shortcode]</code> becomes <code>[!my-shortcode]</code> and <code>[my-shortcode]Some content.[/my-shortcode]</code> becomes <code>[!my-shortcode]Some content.[/my-shortcode]</code>.</p>\n<h4>Gutenberg</h4>\n<p>Users of the new WordPress editor, &#8220;Gutenberg&#8221;, will probably not use Priority Shortcodes within the new editor, but the plugin continues to work in the Classic Editor.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/priority-shortcodes.zip",
    "upgrade_notice": {
        "2.0": "<ul>\n<li>This update changes the syntax for specifying your priority shortcodes!! You now use <code>[!</code> and the start and a single <code>]</code> at the end of your shortcodes.</li>\n<li>Priority shortcodes can now be used in text widgets</li>\n</ul>",
        "1.0": "<p>Get it while it&#039;s hot.</p>"
    },
    "screenshots": [],
    "tags": {
        "classic-editor": "classic editor",
        "shortcodes": "shortcodes",
        "tinymce": "tinyMCE"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "1x": "https://ps.w.org/priority-shortcodes/assets/icon-128x128.png?rev=2439220",
        "2x": "https://ps.w.org/priority-shortcodes/assets/icon-256x256.png?rev=2439220"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 20,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}