{
    "name": "Web Worker Offloading",
    "slug": "web-worker-offloading",
    "version": "0.1.0",
    "author": "<a href=\"https://make.wordpress.org/performance/\">WordPress Performance Team</a>",
    "author_profile": "https://profiles.wordpress.org/performanceteam/",
    "contributors": {
        "wordpressdotorg": {
            "profile": "https://profiles.wordpress.org/wordpressdotorg/",
            "avatar": "https://secure.gravatar.com/avatar/61ee2579b8905e62b4b4045bdc92c11a?s=96&d=monsterid&r=g",
            "display_name": "WordPress.org"
        }
    },
    "requires": "6.5",
    "tested": "6.6.2",
    "requires_php": "7.2",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/web-worker-offloading/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "last_updated": "2024-10-03 18:57:00",
    "added": "2024-10-03",
    "homepage": "https://github.com/WordPress/performance/issues/176",
    "sections": {
        "description": "<p>This plugin offloads JavaScript execution to a Web Worker, improving performance by freeing up the main thread. This should translate into improved <a href=\"https://web.dev/articles/inp\" rel=\"nofollow ugc\">Interaction to Next Paint</a> (INP) scores.</p>\n<p>âš  <em>This functionality is experimental.</em> âš </p>\n<p>In order to opt in a script to be loaded in a worker, simply add <code>worker</code> script data to a registered script. For example,<br />\nif you have a script registered with the handle of <code>foo</code>, opt-in to offload it to a web worker by doing:</p>\n<pre><code>wp_script_add_data( 'foo', 'worker', true );\n</code></pre>\n<p>Unlike with the script loading strategies (async/defer), any inline before/after scripts associated with the worker-offloaded registered script will also be offloaded to the worker, whereas with the script strategies an inline after script would block the script from being delayed.</p>\n<p>Otherwise, the plugin currently ships with built-in integrations to offload Google Analytics to a web worker for the following plugin:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/woocommerce/\" rel=\"ugc\">WooCommerce</a></li>\n</ul>\n<p>Support for <a href=\"https://wordpress.org/plugins/google-site-kit/\" rel=\"ugc\">Site Kit by Google</a> and <a href=\"https://wordpress.org/plugins/seo-by-rank-math/\" rel=\"ugc\">Rank Math SEO</a> are <a href=\"https://github.com/WordPress/performance/issues/1455\" rel=\"nofollow ugc\">planned</a>.</p>\n<p>Please monitor your analytics once activating to ensure all the expected events are being logged. At the same time, monitor your INP scores to check for improvement.</p>\n<p>This plugin relies on the <a href=\"https://partytown.builder.io/\" rel=\"nofollow ugc\">Partytown ðŸŽ‰</a> library by Builder.io, released under the MIT license. This library is in beta and there are quite a few <a href=\"https://github.com/BuilderIO/partytown/issues?q=is%3Aopen+is%3Aissue+label%3Abug\" rel=\"nofollow ugc\">open bugs</a>.</p>\n<p>The <a href=\"https://partytown.builder.io/configuration\" rel=\"nofollow ugc\">Partytown configuration</a> can be modified via the <code>plwwo_configuration</code> filter. For example:</p>\n<pre><code>&lt;?php\nadd_filter( 'plwwo_configuration', function ( $config ) {\n    $config['mainWindowAccessors'][] = 'wp'; // Make the wp global available in the worker (e.g. wp.i18n and wp.hooks).\n    return $config;\n} );\n</code></pre>\n<p>However, not all of the configuration options can be serialized to JSON in this way, for example the <code>resolveUrl</code> configuration is a function. To specify this, you can add an inline script as follows.</p>\n<pre><code>&lt;?php\nadd_action(\n    'wp_enqueue_scripts',\n    function () {\n        wp_add_inline_script(\n            'web-worker-offloading',\n            &lt;&lt;&lt;JS\n            window.partytown = {\n                ...(window.partytown || {}),\n                resolveUrl: (url, location, type) =&gt; {\n                    if (type === 'script') {\n                        const proxyUrl = new URL('https://my-reverse-proxy.example.com/');\n                        proxyUrl.searchParams.append('url', url.href);\n                        return proxyUrl;\n                    }\n                    return url;\n                },\n            };\n            JS,\n            'before'\n        );\n    }\n);\n</code></pre>\n<p>There are also many configuration options which are not documented, so refer to the <a href=\"https://github.com/BuilderIO/partytown/blob/b292a14047a0c12ca05ba97df1833935d42fdb66/src/lib/types.ts#L393-L548\" rel=\"nofollow ugc\">TypeScript definitions</a>.</p>\n",
        "faq": "\n<dt id='why%20are%20my%20offloaded%20scripts%20not%20working%20and%20i%20see%20a%20404%20error%20in%20the%20console%20for%20%60partytown-sandbox-sw.html%60%3F'>\nWhy are my offloaded scripts not working and I see a 404 error in the console for `partytown-sandbox-sw.html`?\n</h4>\n<p>\n<p>If you find that your offloaded scripts aren&#8217;t working while also seeing a 404 error in the console for a file at <code>/wp-content/plugins/web-worker-offloading/build/partytown-sandbox-sw.html?1727389399791</code> then it&#8217;s likely you have Chrome DevTools open with the &#8220;Bypass for Network&#8221; toggle enabled in the Application panel.</p>\n</p>\n<dt id='where%20can%20i%20report%20security%20bugs%3F'>\nWhere can I report security bugs?\n</h4>\n<p>\n<p>The Performance team and WordPress community take security bugs seriously. We appreciate your efforts to responsibly disclose your findings, and will make every effort to acknowledge your contributions.</p>\n<p>To report a security issue, please visit the <a href=\"https://hackerone.com/wordpress\" rel=\"nofollow ugc\">WordPress HackerOne</a> program.</p>\n</p>\n<dt id='how%20can%20i%20contribute%20to%20the%20plugin%3F'>\nHow can I contribute to the plugin?\n</h4>\n<p>\n<p>Contributions are always welcome! Learn more about how to get involved in the <a href=\"https://make.wordpress.org/performance/handbook/get-involved/\" rel=\"nofollow ugc\">Core Performance Team Handbook</a>.</p>\n<p>The <a href=\"https://github.com/WordPress/performance/tree/trunk/plugins/web-worker-offloading\" rel=\"nofollow ugc\">plugin source code</a> is located in the <a href=\"https://github.com/WordPress/performance\" rel=\"nofollow ugc\">WordPress/performance</a> repo on GitHub.</p>\n</p>\n\n",
        "changelog": "<h4>0.1.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "Offload JavaScript execution to a Web Worker.",
    "description": "<p>This plugin offloads JavaScript execution to a Web Worker, improving performance by freeing up the main thread. This should translate into improved <a href=\"https://web.dev/articles/inp\" rel=\"nofollow ugc\">Interaction to Next Paint</a> (INP) scores.</p>\n<p>âš  <em>This functionality is experimental.</em> âš </p>\n<p>In order to opt in a script to be loaded in a worker, simply add <code>worker</code> script data to a registered script. For example,<br />\nif you have a script registered with the handle of <code>foo</code>, opt-in to offload it to a web worker by doing:</p>\n<pre><code>wp_script_add_data( 'foo', 'worker', true );\n</code></pre>\n<p>Unlike with the script loading strategies (async/defer), any inline before/after scripts associated with the worker-offloaded registered script will also be offloaded to the worker, whereas with the script strategies an inline after script would block the script from being delayed.</p>\n<p>Otherwise, the plugin currently ships with built-in integrations to offload Google Analytics to a web worker for the following plugin:</p>\n<ul>\n<li><a href=\"https://wordpress.org/plugins/woocommerce/\" rel=\"ugc\">WooCommerce</a></li>\n</ul>\n<p>Support for <a href=\"https://wordpress.org/plugins/google-site-kit/\" rel=\"ugc\">Site Kit by Google</a> and <a href=\"https://wordpress.org/plugins/seo-by-rank-math/\" rel=\"ugc\">Rank Math SEO</a> are <a href=\"https://github.com/WordPress/performance/issues/1455\" rel=\"nofollow ugc\">planned</a>.</p>\n<p>Please monitor your analytics once activating to ensure all the expected events are being logged. At the same time, monitor your INP scores to check for improvement.</p>\n<p>This plugin relies on the <a href=\"https://partytown.builder.io/\" rel=\"nofollow ugc\">Partytown ðŸŽ‰</a> library by Builder.io, released under the MIT license. This library is in beta and there are quite a few <a href=\"https://github.com/BuilderIO/partytown/issues?q=is%3Aopen+is%3Aissue+label%3Abug\" rel=\"nofollow ugc\">open bugs</a>.</p>\n<p>The <a href=\"https://partytown.builder.io/configuration\" rel=\"nofollow ugc\">Partytown configuration</a> can be modified via the <code>plwwo_configuration</code> filter. For example:</p>\n<pre><code>&lt;?php\nadd_filter( 'plwwo_configuration', function ( $config ) {\n    $config['mainWindowAccessors'][] = 'wp'; // Make the wp global available in the worker (e.g. wp.i18n and wp.hooks).\n    return $config;\n} );\n</code></pre>\n<p>However, not all of the configuration options can be serialized to JSON in this way, for example the <code>resolveUrl</code> configuration is a function. To specify this, you can add an inline script as follows.</p>\n<pre><code>&lt;?php\nadd_action(\n    'wp_enqueue_scripts',\n    function () {\n        wp_add_inline_script(\n            'web-worker-offloading',\n            &lt;&lt;&lt;JS\n            window.partytown = {\n                ...(window.partytown || {}),\n                resolveUrl: (url, location, type) =&gt; {\n                    if (type === 'script') {\n                        const proxyUrl = new URL('https://my-reverse-proxy.example.com/');\n                        proxyUrl.searchParams.append('url', url.href);\n                        return proxyUrl;\n                    }\n                    return url;\n                },\n            };\n            JS,\n            'before'\n        );\n    }\n);\n</code></pre>\n<p>There are also many configuration options which are not documented, so refer to the <a href=\"https://github.com/BuilderIO/partytown/blob/b292a14047a0c12ca05ba97df1833935d42fdb66/src/lib/types.ts#L393-L548\" rel=\"nofollow ugc\">TypeScript definitions</a>.</p>\n",
    "download_link": "https://downloads.wordpress.org/plugin/web-worker-offloading.0.1.0.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "analytics": "analytics",
        "javascript": "javascript",
        "partytown": "partytown",
        "performance": "performance",
        "web-worker": "web worker"
    },
    "stable_tag": "0.1.0",
    "versions": {
        "0.1.0": "https://downloads.wordpress.org/plugin/web-worker-offloading.0.1.0.zip",
        "trunk": "https://downloads.wordpress.org/plugin/web-worker-offloading.zip"
    },
    "business_model": "community",
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/web-worker-offloading/assets/banner-772x250.png?rev=3162333",
        "high": "https://ps.w.org/web-worker-offloading/assets/banner-1544x500.png?rev=3162333"
    },
    "icons": {
        "1x": "https://ps.w.org/web-worker-offloading/assets/icon.svg?rev=3162333",
        "svg": "https://ps.w.org/web-worker-offloading/assets/icon.svg?rev=3162333"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}