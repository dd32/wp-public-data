{
    "name": "Appcachify",
    "slug": "appcachify",
    "version": "0.1",
    "author": "<a href=\"http://interconnectit.com\">Robert O'Rourke</a>",
    "author_profile": "https://profiles.wordpress.org/sanchothefat/",
    "contributors": {
        "sanchothefat": {
            "profile": "https://profiles.wordpress.org/sanchothefat/",
            "avatar": "https://secure.gravatar.com/avatar/191a8adeac141d56158bc032b181072f?s=96&d=monsterid&r=g",
            "display_name": "Robert O'Rourke"
        }
    },
    "requires": "3.8",
    "tested": "3.9.40",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 2,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/appcachify/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 10,
    "downloaded": 1432,
    "last_updated": "2014-07-24 2:20pm GMT",
    "added": "2014-07-24",
    "homepage": "http://interconnectit.com",
    "sections": {
        "description": "<p>The plugin adds an iframe to the footer of your website which points to <code>example.com/manifest</code>.</p>\n<p>That URL is an empty page that references the generated manifest file at <code>example.com/manifest.appcache</code>.</p>\n<p>The manifest itself is built in the following way:</p>\n<ol>\n<li>adds URLs of all queued scripts and styles</li>\n<li>searches theme files and folder for any images or other static assets</li>\n<li>if a theme has a 307.php template it is used as an offline fallback</li>\n<li>a timestamp of the most recently modified file is added to force appcache to refresh</li>\n</ol>\n<p>The net result of all this is that your main static files are stored locally on your visitors devices. For mobile this greatly helps to improve download and rendering times.</p>\n<h3>Documentation</h3>\n<h3>Adding items to the manifest</h3>\n<p>Appcache can do more than store static assets. You could cache entire pages, or add fallbacks for when a user is offline.</p>\n<p>There are 3 main sections to a manifest:</p>\n<h4>CACHE</h4>\n<p>The main <code>CACHE</code> section is for URLs that should be explicitly cached.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_cache', function( $urls ) {\n   $urls[] = '/page-available-offline/';\n   return $urls;\n} );\n?&gt;\n</code></pre>\n<h4>NETWORK</h4>\n<p>This section is for specifying URLs that should <em>never</em> be cached.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_network', function( $urls ) {\n   $urls[] = '*';\n   $urls[] = '/online-only-page/';\n   return $urls;\n} );\n?&gt;\n</code></pre>\n<h4>FALLBACK</h4>\n<p>The fallback section allows you to set fallback pages or images if the user is offline.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_fallback', function( $patterns ) {\n   $patterns[] = 'wp-content/uploads/ wp-content/uploads/offline.jpg';\n   return $patterns;\n} );\n?&gt;\n</code></pre>\n<h4>The update header</h4>\n<p>Appcaches are refetched when the manifest file content changes so we add a few items as comments at the top of the file.</p>\n<ol>\n<li>The current theme (and version if available)</li>\n<li>The most recent modified time of any files we find the server path for</li>\n<li>\n<p>The size of all the files that we find a server path for</p>\n<p>get_var( &#8220;SELECT post_modified FROM $wpdb-&gt;posts WHERE post_type = &#8216;post&#8217; ORDER BY post_modified DESC LIMIT 1&#8221; );<br />\n   return $headers;<br />\n} );<br />\n?&gt;</li>\n</ol>\n<h3>More about appcache</h3>\n<p>I strongly recommend learning more about what you can do with appcache by reading the following articles:</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\" rel=\"nofollow ugc\">HTML5 Rock&#8217;s Introduction to Appcache</a></li>\n<li><a href=\"http://alistapart.com/article/application-cache-is-a-douchebag\" rel=\"nofollow ugc\">Application cache is a douchebag</a></li>\n</ul>\n",
        "installation": "<p>Upload the plugin to your plugins directory and activate it. There&#8217;s no configuration involved or settings screen.</p>\n",
        "changelog": "<h4>1.0</h4>\n<ul>\n<li>Initial commit to wordpress.org</li>\n</ul>\n"
    },
    "short_description": "Adds an HTML5 appcache manifest to speed up your site by storing static assets client-side.",
    "description": "<p>The plugin adds an iframe to the footer of your website which points to <code>example.com/manifest</code>.</p>\n<p>That URL is an empty page that references the generated manifest file at <code>example.com/manifest.appcache</code>.</p>\n<p>The manifest itself is built in the following way:</p>\n<ol>\n<li>adds URLs of all queued scripts and styles</li>\n<li>searches theme files and folder for any images or other static assets</li>\n<li>if a theme has a 307.php template it is used as an offline fallback</li>\n<li>a timestamp of the most recently modified file is added to force appcache to refresh</li>\n</ol>\n<p>The net result of all this is that your main static files are stored locally on your visitors devices. For mobile this greatly helps to improve download and rendering times.</p>\n<h3>Documentation</h3>\n<h3>Adding items to the manifest</h3>\n<p>Appcache can do more than store static assets. You could cache entire pages, or add fallbacks for when a user is offline.</p>\n<p>There are 3 main sections to a manifest:</p>\n<h4>CACHE</h4>\n<p>The main <code>CACHE</code> section is for URLs that should be explicitly cached.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_cache', function( $urls ) {\n   $urls[] = '/page-available-offline/';\n   return $urls;\n} );\n?&gt;\n</code></pre>\n<h4>NETWORK</h4>\n<p>This section is for specifying URLs that should <em>never</em> be cached.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_network', function( $urls ) {\n   $urls[] = '*';\n   $urls[] = '/online-only-page/';\n   return $urls;\n} );\n?&gt;\n</code></pre>\n<h4>FALLBACK</h4>\n<p>The fallback section allows you to set fallback pages or images if the user is offline.</p>\n<pre><code>&lt;?php\nadd_filter( 'appcache_fallback', function( $patterns ) {\n   $patterns[] = 'wp-content/uploads/ wp-content/uploads/offline.jpg';\n   return $patterns;\n} );\n?&gt;\n</code></pre>\n<h4>The update header</h4>\n<p>Appcaches are refetched when the manifest file content changes so we add a few items as comments at the top of the file.</p>\n<ol>\n<li>The current theme (and version if available)</li>\n<li>The most recent modified time of any files we find the server path for</li>\n<li>\n<p>The size of all the files that we find a server path for</p>\n<p>get_var( &#8220;SELECT post_modified FROM $wpdb-&gt;posts WHERE post_type = &#8216;post&#8217; ORDER BY post_modified DESC LIMIT 1&#8221; );<br />\n   return $headers;<br />\n} );<br />\n?&gt;</li>\n</ol>\n<h3>More about appcache</h3>\n<p>I strongly recommend learning more about what you can do with appcache by reading the following articles:</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\" rel=\"nofollow ugc\">HTML5 Rock&#8217;s Introduction to Appcache</a></li>\n<li><a href=\"http://alistapart.com/article/application-cache-is-a-douchebag\" rel=\"nofollow ugc\">Application cache is a douchebag</a></li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/appcachify.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "appcache": "appcache",
        "caching": "caching",
        "html5": "HTML5",
        "performance": "performance"
    },
    "stable_tag": "trunk",
    "versions": [],
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/appcachify/assets/banner-772x250.png?rev=954160",
        "high": false
    },
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/appcachify_1d1d1d.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}