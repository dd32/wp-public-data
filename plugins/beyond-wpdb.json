{
    "name": "Beyond Wpdb",
    "slug": "beyond-wpdb",
    "version": "2.0.1",
    "author": "<a href=\"https://www.pressman.ne.jp/\">PRESSMAN</a>",
    "author_profile": "https://profiles.wordpress.org/pressmaninc/",
    "contributors": {
        "pressmaninc": {
            "profile": "https://profiles.wordpress.org/pressmaninc/",
            "avatar": "https://secure.gravatar.com/avatar/ade84fa656486f3003a7d0c72a23d5c8?s=96&d=monsterid&r=g",
            "display_name": "PRESSMAN"
        },
        "kazunao": {
            "profile": "https://profiles.wordpress.org/kazunao/",
            "avatar": "https://secure.gravatar.com/avatar/2c2dddc0d2a9cce136296865083ac8fd?s=96&d=monsterid&r=g",
            "display_name": "kazunao"
        },
        "hiroshisekiguchi": {
            "profile": "https://profiles.wordpress.org/hiroshisekiguchi/",
            "avatar": "https://secure.gravatar.com/avatar/aa552d8f2399e3bafbad0f1227cbc564?s=96&d=monsterid&r=g",
            "display_name": "Hiroshi Sekiguchi"
        },
        "hommakoharu": {
            "profile": "https://profiles.wordpress.org/hommakoharu/",
            "avatar": "https://secure.gravatar.com/avatar/2b970cdd2204e3460a41265f9b384a46?s=96&d=monsterid&r=g",
            "display_name": "hommakoharu"
        },
        "pmhirotaka": {
            "profile": "https://profiles.wordpress.org/pmhirotaka/",
            "avatar": "https://secure.gravatar.com/avatar/cc9d2f75534f85401f51bb86637d2c07?s=96&d=monsterid&r=g",
            "display_name": "pmhirotaka"
        }
    },
    "requires": false,
    "tested": "5.5.15",
    "requires_php": "7.0",
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/beyond-wpdb/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 926,
    "last_updated": "2020-12-07 6:44am GMT",
    "added": "2020-06-25",
    "homepage": "",
    "sections": {
        "installation": "<p>1.Download the plugin<br />\n2.Upload the plugin to the plugin directory<br />\n3.Enable plugins from the admin page&#8217;s Plugins</p>\n",
        "description": "<p>※ Table names have been changed since v2.0.Please delete the meta_json table and reactivate it in the options screen.</p>\n<p>Are you having trouble with slow queries due to WordPress table structure?<br />\nThis plugin helps your site speed up using JSON type columns, one of the features of MySQL, and prevents complex queries while maintaining the flexibility of WordPress development.<br />\nYou can also add a virtual column in the configuration page and index the virtual column to make it even faster.You can also add a virtual column in the configuration page and index the virtual column to make it even faster.</p>\n<h3>Features</h3>\n<p>If a large amount of meta data is given to 1 post/user/comment and a complex meta_query is specified, a large number of inner joins will occur, which will slow down the execution of the query.<br />\nThe effect will be noticeable especially when the number of records is large.<br />\nThis plugin avoids complex joins and prevents slowdowns by storing all the meta data for 1 post/user/comment in a JSON type column in a custom meta table.<br />\nThe dedicated configuration page includes a check for group_concat_max_len, a function to measure consistency of meta table and its custom meta table,<br />\nand the ability to add virtual columns, add a The ability to create indexes. Indexes on virtual columns to make it even faster.</p>\n<h3>Actual Behavior</h3>\n<ul>\n<li>You can create and delete json tables and triggers and data for each json table on the configuration page.</li>\n<li>Create virtual columns and indexes for the json table you created in the configuration page.</li>\n<li>If you add a virtual column to the json table in the configuration page, the SQL is converted to face the virtual column.</li>\n<li>Converts the SQL that WordPress auto-generates when using the default APIs of get_posts, Wp_Query, and etc. into a simple SQL that combines the posts/users/comment table with its own meta table.</li>\n<li>The custom meta table automatically stores data using MySQL and MariaDB triggers.</li>\n</ul>\n<h3>Conversion Conditions</h3>\n<ul>\n<li>Both the value in meta_key and meta_value is specified.</li>\n<li>If meta_compare_key is specified, only <code>=</code> or <code>EXISTS</code> are allowed.</li>\n<li><code>suppress_filters</code> is false.</li>\n</ul>\n<h3>Custom meta tables generated by plugin</h3>\n<p>The actual table names are prefixed with $table_prefix.<br />\n* postmeta_beyond (for posts table)<br />\n* usermeta_beyond (for users table)<br />\n* commentmeta_beyond (for comment table)</p>\n<h3>Columns in each table</h3>\n<p>The actual table names are prefixed with $table_prefix.<br />\n* postmeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)<br />\n* usermeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)<br />\n* commentmeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)</p>\n<h3>Example of storing data in JSON type column</h3>\n<pre>{ \"state\": \"Wisconsin\", \"city\": \"Winter\" } </pre>\n<h3>Results of Speed Measurement</h3>\n<p>ex1 ) Create 100 posts and 50 meta data for each post. Combine them 9 times.</p>\n<ul>\n<li>\n<p>postmeta_beyond</p>\n<ul>\n<li>Equal:0.04</li>\n<li>IN:0.09</li>\n<li>NOT IN:0.06</li>\n<li>LIKE:0.03</li>\n<li>NOT LIKE:0.03</li>\n<li>BETWEEN:0.04</li>\n<li>NOT BETWEEN:0.04</li>\n</ul>\n</li>\n<li>\n<p>postmeta</p>\n<ul>\n<li>Equal:4.72</li>\n<li>IN:4.79</li>\n<li>NOT IN:4.74</li>\n<li>LIKE:0.64</li>\n<li>NOT LIKE:0.66</li>\n<li>BETWEEN:0.63</li>\n<li>NOT BETWEEN:0.63</li>\n</ul>\n</li>\n</ul>\n<p>ex2 ) 10,000 posts, 1 meta per post. meta_key is category.<br />\n      Add a virtual column(category) to postmeta_beyond and put an index,<br />\n      and compare it to the case without adding a virtual column.</p>\n<ul>\n<li>\n<p>postmeta_beyond(with virtual column)</p>\n<ul>\n<li>Equal:0.02</li>\n<li>IN:0.35</li>\n<li>BETWEEN:0.12</li>\n<li>NOT BETWEEN:0.09</li>\n</ul>\n</li>\n<li>\n<p>postmeta_beyond(without virtual column)</p>\n<ul>\n<li>Equal:0.15</li>\n<li>IN:1.92</li>\n<li>BETWEEN:0.37</li>\n<li>NOT BETWEEN:0.29</li>\n</ul>\n</li>\n</ul>\n<h3>Notes</h3>\n<ul>\n<li>You&#8217;ll need TRIGGER, SELECT, and UPDATE permissions for the target table and its columns to use the trigger feature of MySQL and MariaDB.</li>\n<li>It makes changes to SQL only if <code>suppress_filters</code> is false.</li>\n<li>This plugin sets 4294967295 to group_concat_max_len when it create an original table with JSON type column. You can change the number by using filter &#8216;beyond_group_concat_max_len&#8217;.</li>\n</ul>\n"
    },
    "short_description": "※ Table names have been changed since v2.0.Please delete the meta_json table and reactivate it in the options screen. Are you having trouble with slo &hellip;",
    "description": "<p>※ Table names have been changed since v2.0.Please delete the meta_json table and reactivate it in the options screen.</p>\n<p>Are you having trouble with slow queries due to WordPress table structure?<br />\nThis plugin helps your site speed up using JSON type columns, one of the features of MySQL, and prevents complex queries while maintaining the flexibility of WordPress development.<br />\nYou can also add a virtual column in the configuration page and index the virtual column to make it even faster.You can also add a virtual column in the configuration page and index the virtual column to make it even faster.</p>\n<h3>Features</h3>\n<p>If a large amount of meta data is given to 1 post/user/comment and a complex meta_query is specified, a large number of inner joins will occur, which will slow down the execution of the query.<br />\nThe effect will be noticeable especially when the number of records is large.<br />\nThis plugin avoids complex joins and prevents slowdowns by storing all the meta data for 1 post/user/comment in a JSON type column in a custom meta table.<br />\nThe dedicated configuration page includes a check for group_concat_max_len, a function to measure consistency of meta table and its custom meta table,<br />\nand the ability to add virtual columns, add a The ability to create indexes. Indexes on virtual columns to make it even faster.</p>\n<h3>Actual Behavior</h3>\n<ul>\n<li>You can create and delete json tables and triggers and data for each json table on the configuration page.</li>\n<li>Create virtual columns and indexes for the json table you created in the configuration page.</li>\n<li>If you add a virtual column to the json table in the configuration page, the SQL is converted to face the virtual column.</li>\n<li>Converts the SQL that WordPress auto-generates when using the default APIs of get_posts, Wp_Query, and etc. into a simple SQL that combines the posts/users/comment table with its own meta table.</li>\n<li>The custom meta table automatically stores data using MySQL and MariaDB triggers.</li>\n</ul>\n<h3>Conversion Conditions</h3>\n<ul>\n<li>Both the value in meta_key and meta_value is specified.</li>\n<li>If meta_compare_key is specified, only <code>=</code> or <code>EXISTS</code> are allowed.</li>\n<li><code>suppress_filters</code> is false.</li>\n</ul>\n<h3>Custom meta tables generated by plugin</h3>\n<p>The actual table names are prefixed with $table_prefix.<br />\n* postmeta_beyond (for posts table)<br />\n* usermeta_beyond (for users table)<br />\n* commentmeta_beyond (for comment table)</p>\n<h3>Columns in each table</h3>\n<p>The actual table names are prefixed with $table_prefix.<br />\n* postmeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)<br />\n* usermeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)<br />\n* commentmeta_beyond<br />\n    * post_id(int)<br />\n    * json(json)</p>\n<h3>Example of storing data in JSON type column</h3>\n<pre>{ \"state\": \"Wisconsin\", \"city\": \"Winter\" } </pre>\n<h3>Results of Speed Measurement</h3>\n<p>ex1 ) Create 100 posts and 50 meta data for each post. Combine them 9 times.</p>\n<ul>\n<li>\n<p>postmeta_beyond</p>\n<ul>\n<li>Equal:0.04</li>\n<li>IN:0.09</li>\n<li>NOT IN:0.06</li>\n<li>LIKE:0.03</li>\n<li>NOT LIKE:0.03</li>\n<li>BETWEEN:0.04</li>\n<li>NOT BETWEEN:0.04</li>\n</ul>\n</li>\n<li>\n<p>postmeta</p>\n<ul>\n<li>Equal:4.72</li>\n<li>IN:4.79</li>\n<li>NOT IN:4.74</li>\n<li>LIKE:0.64</li>\n<li>NOT LIKE:0.66</li>\n<li>BETWEEN:0.63</li>\n<li>NOT BETWEEN:0.63</li>\n</ul>\n</li>\n</ul>\n<p>ex2 ) 10,000 posts, 1 meta per post. meta_key is category.<br />\n      Add a virtual column(category) to postmeta_beyond and put an index,<br />\n      and compare it to the case without adding a virtual column.</p>\n<ul>\n<li>\n<p>postmeta_beyond(with virtual column)</p>\n<ul>\n<li>Equal:0.02</li>\n<li>IN:0.35</li>\n<li>BETWEEN:0.12</li>\n<li>NOT BETWEEN:0.09</li>\n</ul>\n</li>\n<li>\n<p>postmeta_beyond(without virtual column)</p>\n<ul>\n<li>Equal:0.15</li>\n<li>IN:1.92</li>\n<li>BETWEEN:0.37</li>\n<li>NOT BETWEEN:0.29</li>\n</ul>\n</li>\n</ul>\n<h3>Notes</h3>\n<ul>\n<li>You&#8217;ll need TRIGGER, SELECT, and UPDATE permissions for the target table and its columns to use the trigger feature of MySQL and MariaDB.</li>\n<li>It makes changes to SQL only if <code>suppress_filters</code> is false.</li>\n<li>This plugin sets 4294967295 to group_concat_max_len when it create an original table with JSON type column. You can change the number by using filter &#8216;beyond_group_concat_max_len&#8217;.</li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/beyond-wpdb.2.0.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "json": "JSON",
        "meta_query": "meta_query",
        "pressman": "pressman",
        "pressmaninc": "pressmaninc",
        "wpdb": "wpdb"
    },
    "stable_tag": "2.0.1",
    "versions": {
        "1.1.0": "https://downloads.wordpress.org/plugin/beyond-wpdb.1.1.0.zip",
        "2.0.0": "https://downloads.wordpress.org/plugin/beyond-wpdb.2.0.0.zip",
        "2.0.1": "https://downloads.wordpress.org/plugin/beyond-wpdb.2.0.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/beyond-wpdb.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/beyond-wpdb.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}