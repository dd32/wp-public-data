{
    "name": "Voce Group Keys",
    "slug": "voce-group-keys",
    "version": "1.0.1",
    "author": "banderon",
    "author_profile": "https://profiles.wordpress.org/banderon/",
    "contributors": {
        "banderon": {
            "profile": "https://profiles.wordpress.org/banderon/",
            "avatar": "https://secure.gravatar.com/avatar/118f1cf504218d3690ebaf89c1d7dec3?s=96&d=monsterid&r=g",
            "display_name": "banderon"
        }
    },
    "requires": "2.8",
    "tested": "4.0.38",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 0,
    "ratings": {
        "5": 0,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 0,
    "support_url": "https://wordpress.org/support/plugin/voce-group-keys/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 0,
    "downloaded": 643,
    "last_updated": "2015-02-03 9:13pm GMT",
    "added": "2015-01-06",
    "homepage": "",
    "sections": {
        "description": "<p>Gives functions to use to generate strings to use as keys for caching. Keys are generated based on a passed in name and<br />\nzero or more groups. Providing the same name and groups will return the same key until the entire cache is cleared<br />\nor the cache for a specific group name is cleared.</p>\n<h3>Usage</h3>\n<p>$key: STRING<br />\n$groups: STRING|ARRAY</p>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Get a key for $key that is in the $groups group(s)\n    voce_get_cache_key( $key, $groups );\n\n    // Clear the keys for $groups\n    // If multiple groups are specified, keys in any of the specified groups will be cleared\n    voce_clear_group_cache( $groups );\n\n    // Clear all keys\n    voce_clear_all_group_cache();\n}\n</code></pre>\n<h4>Example 1</h4>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Get a key without a group\n    echo voce_get_cache_key( 'data' );  // data_4942b011eb\n\n    // Get keys in a single group\n    echo voce_get_cache_key( 'data', 'people' );  // data_9915443f5c\n    echo voce_get_cache_key( 'more-data', 'people' );  // more-data_9915443f5c\n\n    // The same key will be returned\n    echo voce_get_cache_key( 'data', 'people' );  // data_9915443f5c\n\n    // Clear keys in the 'people' group\n    voce_clear_group_cache( 'people' );\n\n    // After clearing keys, a new key is returned for keys using that group\n    echo voce_get_cache_key( 'data', 'people' );  // data_77j18e728\n    echo voce_get_cache_key( 'data' );  // data_4942b011eb\n\n}\n</code></pre>\n<h4>Example 2</h4>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Set transients using multiple groups\n    echo voce_get_cache_key( 'user-data', 'users' );  // user-data_9915443f5c\n    echo voce_get_cache_key( 'post-data', 'posts' );  // post-data_85fb002156\n    echo voce_get_cache_key( 'user-post-data', array( 'posts', 'users' ) );  // user-post-data_4aee2c2c89\n\n    // Clear any keys using the 'posts' group\n    voce_clear_group_cache( 'posts' );\n\n    // New keys returned for anything in the 'posts' group\n    echo voce_get_cache_key( 'user-data', 'users' );  // user-data_9915443f5c\n    echo voce_get_cache_key( 'post-data', 'posts' );  // post-data_820dd0dfb0\n    echo voce_get_cache_key( 'user-post-data', array( 'posts', 'users' ) );  // user-post-data_b7ac93f802\n\n    // The order of groups is irrelevant\n    echo voce_get_cache_key( 'user-post-data', array( 'users', 'posts' ) );  // user-post-data_b7ac93f802\n\n    // Clear any keys in either the 'users' or 'posts' groups\n    voce_clear_group_cache( array( 'users', 'posts' ) );\n\n    // Clear all keys\n    voce_clear_all_group_cache();\n}\n</code></pre>\n",
        "installation": "<ol>\n<li>Upload <code>voce-group-keys.php</code> to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress</li>\n<li>Use the plugin&#8217;s functions where necessary in your code, making sure to check if the plugin is enabled</li>\n</ol>\n",
        "changelog": "<h4>1.0.1</h4>\n<p>*Bug fix: added slight delay when saving new keys to avoid collisions</p>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n"
    },
    "short_description": "Create string keys for caching based off of specified groups, allowing clearing keys based on the groups to which they belong.",
    "description": "<p>Gives functions to use to generate strings to use as keys for caching. Keys are generated based on a passed in name and<br />\nzero or more groups. Providing the same name and groups will return the same key until the entire cache is cleared<br />\nor the cache for a specific group name is cleared.</p>\n<h3>Usage</h3>\n<p>$key: STRING<br />\n$groups: STRING|ARRAY</p>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Get a key for $key that is in the $groups group(s)\n    voce_get_cache_key( $key, $groups );\n\n    // Clear the keys for $groups\n    // If multiple groups are specified, keys in any of the specified groups will be cleared\n    voce_clear_group_cache( $groups );\n\n    // Clear all keys\n    voce_clear_all_group_cache();\n}\n</code></pre>\n<h4>Example 1</h4>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Get a key without a group\n    echo voce_get_cache_key( 'data' );  // data_4942b011eb\n\n    // Get keys in a single group\n    echo voce_get_cache_key( 'data', 'people' );  // data_9915443f5c\n    echo voce_get_cache_key( 'more-data', 'people' );  // more-data_9915443f5c\n\n    // The same key will be returned\n    echo voce_get_cache_key( 'data', 'people' );  // data_9915443f5c\n\n    // Clear keys in the 'people' group\n    voce_clear_group_cache( 'people' );\n\n    // After clearing keys, a new key is returned for keys using that group\n    echo voce_get_cache_key( 'data', 'people' );  // data_77j18e728\n    echo voce_get_cache_key( 'data' );  // data_4942b011eb\n\n}\n</code></pre>\n<h4>Example 2</h4>\n<pre><code>&lt;?php\nif ( class_exists( 'Voce_Group_Keys' ) ) {\n\n    // Set transients using multiple groups\n    echo voce_get_cache_key( 'user-data', 'users' );  // user-data_9915443f5c\n    echo voce_get_cache_key( 'post-data', 'posts' );  // post-data_85fb002156\n    echo voce_get_cache_key( 'user-post-data', array( 'posts', 'users' ) );  // user-post-data_4aee2c2c89\n\n    // Clear any keys using the 'posts' group\n    voce_clear_group_cache( 'posts' );\n\n    // New keys returned for anything in the 'posts' group\n    echo voce_get_cache_key( 'user-data', 'users' );  // user-data_9915443f5c\n    echo voce_get_cache_key( 'post-data', 'posts' );  // post-data_820dd0dfb0\n    echo voce_get_cache_key( 'user-post-data', array( 'posts', 'users' ) );  // user-post-data_b7ac93f802\n\n    // The order of groups is irrelevant\n    echo voce_get_cache_key( 'user-post-data', array( 'users', 'posts' ) );  // user-post-data_b7ac93f802\n\n    // Clear any keys in either the 'users' or 'posts' groups\n    voce_clear_group_cache( array( 'users', 'posts' ) );\n\n    // Clear all keys\n    voce_clear_all_group_cache();\n}\n</code></pre>\n",
    "download_link": "https://downloads.wordpress.org/plugin/voce-group-keys.1.0.1.zip",
    "upgrade_notice": [],
    "screenshots": [],
    "tags": {
        "cache": "cache",
        "group": "group",
        "keys": "keys"
    },
    "stable_tag": "1.0.1",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/voce-group-keys.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/voce-group-keys.1.0.1.zip",
        "trunk": "https://downloads.wordpress.org/plugin/voce-group-keys.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": [],
    "icons": {
        "default": "https://s.w.org/plugins/geopattern-icon/voce-group-keys.svg"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 0,
    "blueprints": [],
    "preview_link": "",
    "language_packs": []
}