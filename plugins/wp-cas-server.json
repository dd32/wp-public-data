{
    "name": "Cassava CAS Server",
    "slug": "wp-cas-server",
    "version": "1.2.3",
    "author": "<a href=\"http://goblindegook.com/\">Lu√≠s Rodrigues</a>",
    "author_profile": "https://profiles.wordpress.org/goblindegook/",
    "contributors": {
        "goblindegook": {
            "profile": "https://profiles.wordpress.org/goblindegook/",
            "avatar": "https://secure.gravatar.com/avatar/95eb08f1a938c78e26371262fa9a75d7?s=96&d=monsterid&r=g",
            "display_name": "Luis Rodrigues"
        }
    },
    "requires": "3.9",
    "tested": "4.4.33",
    "requires_php": false,
    "requires_plugins": [],
    "compatibility": [],
    "rating": 100,
    "ratings": {
        "5": 2,
        "4": 0,
        "3": 0,
        "2": 0,
        "1": 0
    },
    "num_ratings": 2,
    "support_url": "https://wordpress.org/support/plugin/wp-cas-server/",
    "support_threads": 0,
    "support_threads_resolved": 0,
    "active_installs": 40,
    "downloaded": 2619,
    "last_updated": "2016-02-13 00:05:00",
    "added": "2014-04-30",
    "homepage": "https://goblindegook.github.io/wp-cas-server",
    "sections": {
        "description": "<p>Cassava allows WordPress to act as a single sign-on authenticator using the Central Authentication Service (CAS) protocol.</p>\n<p>That way, users on your WordPress install may be able to access different applications that support the CAS protocol by providing a single set of credentials and without exposing the user&#8217;s password.</p>\n<p>By default, CAS method URIs are provided under the <code>wp-cas</code> endpoint:</p>\n<ul>\n<li><code>/wp-cas/login</code>: Allows a remote service to request that a user authenticate on the CAS server. Will redirect back to the remote service along with a service ticket.</li>\n<li><code>/wp-cas/logout</code>: Terminates the single sign-on session. May optionally redirect the user back to the remote service.</li>\n<li><code>/wp-cas/validate</code> [CAS 1.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns a plaintext response.</li>\n<li><code>/wp-cas/proxy</code> [CAS 2.0]: Provides access to remote services with proxy tickets in exchange for proxy-granting tickets. Returns an XML response.</li>\n<li><code>/wp-cas/proxyValidate</code> [CAS 2.0]: Allows a remote service to validate a service or proxy ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/serviceValidate</code> [CAS 2.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/p3/proxyValidate</code> [CAS 3.0]: Allows a remote service to validate a service or proxy ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/p3/serviceValidate</code> [CAS 3.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns an XML response.</li>\n</ul>\n<p>There are a few <a href=\"http://www.jasig.org/cas/client-integration\" rel=\"nofollow ugc\">client integration</a> libraries available for CAS, as well as a handy guide for <a href=\"https://wiki.jasig.org/display/CASC/CASifying+Applications\" rel=\"nofollow ugc\">CASifying several existing applications</a>. Independent WordPress installations may integrate with Cassava using a client plugin such as <a href=\"https://wordpress.org/plugins/cas-maestro/\" rel=\"ugc\">CAS Maestro</a>.</p>\n<p>Please follow and contribute to Cassava&#8217;s development on <a href=\"https://github.com/goblindegook/wp-cas-server\" rel=\"nofollow ugc\">Github</a>.</p>\n<h3>Hooks</h3>\n<h4>Action: cas_server_before_request</h4>\n<p>Fires before a CAS request is processed.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Action: cas_server_after_request</h4>\n<p>Fires after a CAS request is processed.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Action: cas_server_error</h4>\n<p>Fires if the CAS server has to return an XML error.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>WP_Error</em> <code>$error</code>: WordPress error to return as XML.</li>\n</ul>\n<h4>Action: cas_server_validation_success</h4>\n<p>Fires on successful ticket validation.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>WP_User</em> <code>$user</code>: WordPress user validated by ticket.</li>\n<li><em>string</em> <code>$ticket</code>: Valid ticket string.</li>\n</ul>\n<h4>Filter: cas_enabled</h4>\n<p>Allows developers to disable CAS.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>boolean</em> <code>$cas_enabled</code>: Whether the server should respond to single sign-on requests.</li>\n</ul>\n<h4>Filter: cas_server_routes</h4>\n<p>Allows developers to override the default controller mapping, define additional endpoints and provide alternative implementations to the provided controllers.</p>\n<p>Controllers provided in this fashion should extend the <code>\\Cassava\\CAS\\Controller\\BaseController</code> class.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$cas_routes</code>: CAS endpoint to controller mapping.</li>\n</ul>\n<h4>Filter: cas_server_response</h4>\n<p>Lets developers change the CAS server response string.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$output</code>: Response output string.</li>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Filter: cas_server_dispatch_args</h4>\n<p>Filters the callback arguments to be dispatched for the request. Plugin developers may return a <code>WP_Error</code> object here to abort the request.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$args</code>: Arguments to pass the callback.</li>\n<li><em>(string|array)</em> <code>$callback</code>: Callback function or method.</li>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Filter: cas_server_login_args</h4>\n<p>Allows developers to change the request parameters passed to a <code>/login</code> request.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$args</code>: HTTP request (GET, POST) parameters.</li>\n</ul>\n<h4>Filter: cas_server_redirect_service</h4>\n<p>Filters the redirect URI for the service requesting user authentication.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$service</code>: Service URI requesting user authentication.</li>\n<li><em>WP_User</em> <code>$user</code>: Logged in WordPress user.</li>\n</ul>\n<h4>Filter: cas_server_custom_auth_uri</h4>\n<p>Allows developers to redirect the user to a custom login form.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$custom_login_url</code>: URI for the custom login page.</li>\n<li><em>array</em> <code>$args</code>: Login request parameters.</li>\n</ul>\n<h4>Filter: cas_server_ticket_expiration</h4>\n<p>This filter allows developers to override the default ticket expiration period.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>int</em> <code>$expiration</code>: Ticket expiration period (in seconds).</li>\n<li><em>string</em> <code>$type</code>: Type of ticket to set.</li>\n<li><em>WP_User</em> <code>$user</code>: Authenticated user associated with the ticket.</li>\n</ul>\n<h4>Filter: cas_server_validation_user_attributes</h4>\n<p>Allows developers to change the list of (key, value) pairs before they&#8217;re included in a <code>/serviceValidate</code> response.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$attributes</code>: List of attributes to output.</li>\n<li><em>WP_User</em> <code>$user</code>: Authenticated user.</li>\n</ul>\n<h4>Filter: cas_server_settings_user_attribute_options</h4>\n<p>Allows developers to change the list of user attributes that appear in the dashboard for an administrator to set to return on successful validation requests.</p>\n<p>Options are stored in an associative array, with user attribute slugs as array keys and option labels as array values.</p>\n<p>These settings are valid only for CAS 2.0 validation requests.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$attributeOptions</code> Attribute options an administrator can set on the dashboard.</li>\n</ul>\n",
        "installation": "<h4>Using [Composer](https://getcomposer.org)</h4>\n<ol>\n<li>Install the plugin package using <code>composer require goblindegook/wp-cas-server</code>.</li>\n</ol>\n<h4>Using the WordPress Dashboard</h4>\n<ol>\n<li>Navigate to the &#8216;Add New&#8217; in the plugins dashboard</li>\n<li>Search for &#8216;wp cas server&#8217;</li>\n<li>Click &#8216;Install Now&#8217;</li>\n<li>Activate the plugin on the Plugin dashboard</li>\n</ol>\n<h4>Uploading in WordPress Dashboard</h4>\n<ol>\n<li>Navigate to the &#8216;Add New&#8217; in the plugins dashboard</li>\n<li>Navigate to the &#8216;Upload&#8217; area</li>\n<li>Select <code>wp-cas-server.zip</code> from your computer</li>\n<li>Click &#8216;Install Now&#8217;</li>\n<li>Activate the plugin in the Plugin dashboard</li>\n</ol>\n<h4>Using FTP</h4>\n<ol>\n<li>Download <code>wp-cas-server.zip</code></li>\n<li>Extract the <code>wp-cas-server</code> directory to your computer</li>\n<li>Upload the <code>wp-cas-server</code> directory to the <code>/wp-content/plugins/</code> directory</li>\n<li>Activate the plugin in the Plugin dashboard</li>\n</ol>\n",
        "faq": "\n<h4>How does CAS work?</h4>\n<p>\n<p>The CAS protocol requires three entities to function: the user&#8217;s web <em>browser</em>, a web <em>application</em> requesting authentication, and a <em>CAS server</em> as implemented by this plugin.</p>\n<p>When a user accesses an application and attempts to authenticate to it, the application sends the user to the CAS server for validation. The CAS server will look for an active session or else explicitly request the user to insert their credentials.</p>\n<p>Upon authenticating the user, the CAS server returns the user to the application they came from along with a security ticket.</p>\n<p>Behind the scenes, the application then contacts the CAS server over a secure connection to independently verify that the security ticket is valid.  The CAS server responds with information about the user&#8217;s status, confirming they are who they claim to be.</p>\n</p>\n<h4>Does the plugin require HTTPS to function?</h4>\n<p>\n<p>Yes.  Because applications trade security tickets via HTTP requests, it is very important that this information be encrypted so as not to be easily intercepted.  By running a single sign-on service over an unencrypted channel such as plain HTTP, you would be at considerable risk of allowing unauthorized persons into your network.</p>\n</p>\n<h4>What do I do if a malicious agent forges or alters my security tickets?</h4>\n<p>\n<p>If you suspect someone may have compromised the integrity of the security tickets generated by the CAS server, you should immediately <a href=\"https://api.wordpress.org/secret-key/1.1/salt/\" rel=\"nofollow ugc\">generate a new set of secret keys</a> and swap them out in WordPress&#8217;s <code>wp-config.php</code> file.</p>\n</p>\n<h4>I&#8217;m getting a `Class &#8216;DOMDocument&#8217; not found` error. What&#8217;s going on?</h4>\n<p>\n<p>The plugin requires the PHP DOM extension to generate and read XML data, and the error is likely due to the extension not being installed on the server.</p>\n<p>While the extension is enabled by default on most setups, some systems require manual activation. It may also have been disabled by a systems administrator. Depending on your operating system, you may be able to install it by running <code>yum install php-dom</code> (RPM) or <code>apt-get install php5-dom</code> (APT). If not, contact your hosting provider or systems administrator to enable it for you.</p>\n</p>\n<h4>What is the default endpoint for the CAS server?</h4>\n<p>\n<p>By default, the plugin provides methods under the <code>wp-cas</code> endpoint.  So, if you&#8217;re configuring a CAS client to authenticate using your server at <code>https://www.my-site.com/</code>, then the full URI should be something like <code>https://www.my-site.com/wp-cas/</code>.</p>\n<p>The endpoint may be changed at any time by navigating to <strong>Settings &gt; Permalinks</strong> in the dashboard.  Bear in mind that if you change the endpoint you will also need to reconfigure all CAS clients currently using the service.</p>\n</p>\n<h4>How can I make information besides the user&#8217;s login name available to external applications?</h4>\n<p>\n<p>To return user data along with a validation response, navigate to <strong>Settings &gt; Cassava CAS Server</strong> and check the attributes you want the server to return.</p>\n<p>Only versions 2.0 and above of the protocol can disclose user attributes, these options will not change how the earlier CAS 1.0 validation method works.  Also note that making user attributes visible does not guarantee the remote application will use them.</p>\n</p>\n<h4>How can I change other settings?</h4>\n<p>\n<p>At the moment, the only way to change the plugin&#8217;s behaviour is through the <a href=\"https://codex.wordpress.org/Plugin_API/Hooks\" rel=\"nofollow ugc\">Hooks API</a>. Please refer to the <a href=\"/plugins/wp-cas-server/other_notes/\" rel=\"nofollow ugc\">Other Notes</a> page for a list of actions and filters supported by the plugin.</p>\n</p>\n<h4>Where can I read about the CAS protocol specification?</h4>\n<p>\n<p>You may peruse the CAS protocol specifications in complete detail at the <a href=\"http://www.jasig.org/cas/protocol\" rel=\"nofollow ugc\">official project site</a>.</p>\n</p>\n<h4>What types of tickets does this plugin support?</h4>\n<p>\n<p>Cassava sets and receives Service Tickets (ST), Proxy-Granting Tickets (PGT), Proxy-Granting Ticket IOUs (PGTIOU) and Proxy Tickets (PT).</p>\n</p>\n\n",
        "changelog": "<h4>1.2.3</h4>\n<ul>\n<li>Requirement checks and admin error on pre-PHP 5.3 setups.</li>\n</ul>\n<h4>1.2.2</h4>\n<ul>\n<li>Fixed endpoint registration in mixed HTTP/HTTPS installs. The server will now respond to requests over unencrypted HTTP, but will throw an error and tell the user to switch to HTTPS.</li>\n</ul>\n<h4>1.2.1</h4>\n<ul>\n<li>Fixed missing autoloader in the SVN repository.</li>\n</ul>\n<h4>1.2.0</h4>\n<ul>\n<li>Added support for the CAS 3.0 <code>/p3/serviceValidate</code> and <code>/p3/proxyValidate</code> endpoints.</li>\n<li>Fixed a bug that prevented setting a custom CAS endpoint permalink.</li>\n<li>Fixed the handling of service URLs containing pipe characters.</li>\n<li>Developers: The <code>cas_server_routes</code> filter no longer deals with callbacks, controller classes are handled instead. Controller classes must extend <code>\\Cassava\\CAS\\Controller\\BaseController</code>.</li>\n<li>WordPress 4.1.1 compatibility.</li>\n<li>Cleaner, easier to maintain codebase.</li>\n<li>Improved tests and test coverage.</li>\n</ul>\n<h4>1.1.2</h4>\n<ul>\n<li>WordPress 4.0 compatibility.</li>\n<li>Portuguese (pt_PT) localization.</li>\n</ul>\n<h4>1.1.1</h4>\n<ul>\n<li>Fixed a bug that broke the permalinks page.</li>\n</ul>\n<h4>1.1.0</h4>\n<ul>\n<li>Settings now allow a successful CAS 2.0 validation response to return user attributes.</li>\n<li>Miscellaneous under-the-hood improvements and bug fixes.</li>\n<li>Developers: New filter <code>cas_server_validation_user_attribute_options</code>.</li>\n<li>Developers: Renamed filter <code>cas_server_validation_extra_attributes</code> to <code>cas_server_validation_user_attributes</code>.</li>\n<li>Developers: Removed filter <code>cas_server_validation_error</code>.</li>\n</ul>\n<h4>1.0.1</h4>\n<ul>\n<li>SSL is a requirement. No endpoints are exposed over unencrypted HTTP.</li>\n</ul>\n<h4>1.0.0</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n"
    },
    "short_description": "Cassava provides authentication services based on the Jasig CAS protocol.",
    "description": "<p>Cassava allows WordPress to act as a single sign-on authenticator using the Central Authentication Service (CAS) protocol.</p>\n<p>That way, users on your WordPress install may be able to access different applications that support the CAS protocol by providing a single set of credentials and without exposing the user&#8217;s password.</p>\n<p>By default, CAS method URIs are provided under the <code>wp-cas</code> endpoint:</p>\n<ul>\n<li><code>/wp-cas/login</code>: Allows a remote service to request that a user authenticate on the CAS server. Will redirect back to the remote service along with a service ticket.</li>\n<li><code>/wp-cas/logout</code>: Terminates the single sign-on session. May optionally redirect the user back to the remote service.</li>\n<li><code>/wp-cas/validate</code> [CAS 1.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns a plaintext response.</li>\n<li><code>/wp-cas/proxy</code> [CAS 2.0]: Provides access to remote services with proxy tickets in exchange for proxy-granting tickets. Returns an XML response.</li>\n<li><code>/wp-cas/proxyValidate</code> [CAS 2.0]: Allows a remote service to validate a service or proxy ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/serviceValidate</code> [CAS 2.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/p3/proxyValidate</code> [CAS 3.0]: Allows a remote service to validate a service or proxy ticket forwarded by the user on redirect. Returns an XML response.</li>\n<li><code>/wp-cas/p3/serviceValidate</code> [CAS 3.0]: Allows a remote service to validate a service ticket forwarded by the user on redirect. Returns an XML response.</li>\n</ul>\n<p>There are a few <a href=\"http://www.jasig.org/cas/client-integration\" rel=\"nofollow ugc\">client integration</a> libraries available for CAS, as well as a handy guide for <a href=\"https://wiki.jasig.org/display/CASC/CASifying+Applications\" rel=\"nofollow ugc\">CASifying several existing applications</a>. Independent WordPress installations may integrate with Cassava using a client plugin such as <a href=\"https://wordpress.org/plugins/cas-maestro/\" rel=\"ugc\">CAS Maestro</a>.</p>\n<p>Please follow and contribute to Cassava&#8217;s development on <a href=\"https://github.com/goblindegook/wp-cas-server\" rel=\"nofollow ugc\">Github</a>.</p>\n<h3>Hooks</h3>\n<h4>Action: cas_server_before_request</h4>\n<p>Fires before a CAS request is processed.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Action: cas_server_after_request</h4>\n<p>Fires after a CAS request is processed.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Action: cas_server_error</h4>\n<p>Fires if the CAS server has to return an XML error.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>WP_Error</em> <code>$error</code>: WordPress error to return as XML.</li>\n</ul>\n<h4>Action: cas_server_validation_success</h4>\n<p>Fires on successful ticket validation.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>WP_User</em> <code>$user</code>: WordPress user validated by ticket.</li>\n<li><em>string</em> <code>$ticket</code>: Valid ticket string.</li>\n</ul>\n<h4>Filter: cas_enabled</h4>\n<p>Allows developers to disable CAS.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>boolean</em> <code>$cas_enabled</code>: Whether the server should respond to single sign-on requests.</li>\n</ul>\n<h4>Filter: cas_server_routes</h4>\n<p>Allows developers to override the default controller mapping, define additional endpoints and provide alternative implementations to the provided controllers.</p>\n<p>Controllers provided in this fashion should extend the <code>\\Cassava\\CAS\\Controller\\BaseController</code> class.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$cas_routes</code>: CAS endpoint to controller mapping.</li>\n</ul>\n<h4>Filter: cas_server_response</h4>\n<p>Lets developers change the CAS server response string.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$output</code>: Response output string.</li>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Filter: cas_server_dispatch_args</h4>\n<p>Filters the callback arguments to be dispatched for the request. Plugin developers may return a <code>WP_Error</code> object here to abort the request.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$args</code>: Arguments to pass the callback.</li>\n<li><em>(string|array)</em> <code>$callback</code>: Callback function or method.</li>\n<li><em>string</em> <code>$path</code>: Requested URI path.</li>\n</ul>\n<h4>Filter: cas_server_login_args</h4>\n<p>Allows developers to change the request parameters passed to a <code>/login</code> request.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$args</code>: HTTP request (GET, POST) parameters.</li>\n</ul>\n<h4>Filter: cas_server_redirect_service</h4>\n<p>Filters the redirect URI for the service requesting user authentication.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$service</code>: Service URI requesting user authentication.</li>\n<li><em>WP_User</em> <code>$user</code>: Logged in WordPress user.</li>\n</ul>\n<h4>Filter: cas_server_custom_auth_uri</h4>\n<p>Allows developers to redirect the user to a custom login form.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>string</em> <code>$custom_login_url</code>: URI for the custom login page.</li>\n<li><em>array</em> <code>$args</code>: Login request parameters.</li>\n</ul>\n<h4>Filter: cas_server_ticket_expiration</h4>\n<p>This filter allows developers to override the default ticket expiration period.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>int</em> <code>$expiration</code>: Ticket expiration period (in seconds).</li>\n<li><em>string</em> <code>$type</code>: Type of ticket to set.</li>\n<li><em>WP_User</em> <code>$user</code>: Authenticated user associated with the ticket.</li>\n</ul>\n<h4>Filter: cas_server_validation_user_attributes</h4>\n<p>Allows developers to change the list of (key, value) pairs before they&#8217;re included in a <code>/serviceValidate</code> response.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$attributes</code>: List of attributes to output.</li>\n<li><em>WP_User</em> <code>$user</code>: Authenticated user.</li>\n</ul>\n<h4>Filter: cas_server_settings_user_attribute_options</h4>\n<p>Allows developers to change the list of user attributes that appear in the dashboard for an administrator to set to return on successful validation requests.</p>\n<p>Options are stored in an associative array, with user attribute slugs as array keys and option labels as array values.</p>\n<p>These settings are valid only for CAS 2.0 validation requests.</p>\n<p>Parameters:</p>\n<ul>\n<li><em>array</em> <code>$attributeOptions</code> Attribute options an administrator can set on the dashboard.</li>\n</ul>\n",
    "download_link": "https://downloads.wordpress.org/plugin/wp-cas-server.1.2.3.zip",
    "upgrade_notice": [],
    "screenshots": [
        {
            "src": "https://ps.w.org/wp-cas-server/assets/screenshot-1.png?rev=1114928",
            "caption": "Administration settings panel."
        }
    ],
    "tags": {
        "authentication": "authentication",
        "cas": "cas",
        "central-authentication-service": "central authentication service",
        "jasig-cas": "jasig cas",
        "single-sign-on": "Single Sign-on"
    },
    "stable_tag": "1.2.3",
    "versions": {
        "1.0.0": "https://downloads.wordpress.org/plugin/wp-cas-server.1.0.0.zip",
        "1.0.1": "https://downloads.wordpress.org/plugin/wp-cas-server.1.0.1.zip",
        "1.1.0": "https://downloads.wordpress.org/plugin/wp-cas-server.1.1.0.zip",
        "1.1.1": "https://downloads.wordpress.org/plugin/wp-cas-server.1.1.1.zip",
        "1.1.2": "https://downloads.wordpress.org/plugin/wp-cas-server.1.1.2.zip",
        "1.2.0": "https://downloads.wordpress.org/plugin/wp-cas-server.1.2.0.zip",
        "1.2.1": "https://downloads.wordpress.org/plugin/wp-cas-server.1.2.1.zip",
        "1.2.2": "https://downloads.wordpress.org/plugin/wp-cas-server.1.2.2.zip",
        "1.2.3": "https://downloads.wordpress.org/plugin/wp-cas-server.1.2.3.zip",
        "trunk": "https://downloads.wordpress.org/plugin/wp-cas-server.zip"
    },
    "business_model": false,
    "repository_url": "",
    "commercial_support_url": "",
    "donate_link": "",
    "banners": {
        "low": "https://ps.w.org/wp-cas-server/assets/banner-772x250.png?rev=1114928",
        "high": "https://ps.w.org/wp-cas-server/assets/banner-1544x500.png?rev=1114928"
    },
    "icons": {
        "1x": "https://ps.w.org/wp-cas-server/assets/icon-128x128.png?rev=1114928",
        "2x": "https://ps.w.org/wp-cas-server/assets/icon-256x256.png?rev=1114928"
    },
    "blocks": [],
    "block_assets": [],
    "author_block_count": 0,
    "author_block_rating": 100,
    "blueprints": [],
    "preview_link": "",
    "language_packs": [
        {
            "type": "plugin",
            "slug": "wp-cas-server",
            "language": "pt_PT",
            "version": "1.2.3",
            "updated": "2016-05-26 16:51:20",
            "package": "http://downloads.wordpress.org/translation/plugin/wp-cas-server/1.2.3/pt_PT.zip"
        }
    ]
}